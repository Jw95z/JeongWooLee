{
  
    
        "post0": {
            "title": "Title",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] def __str__(self): return json.dumps(self.dictionary) # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$OKc...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$TFf...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$rPm...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$mXm...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$72g...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$OKc...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$TFf...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$leP...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$mXm...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$72g...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$OKcNKHQ6b2AJENPd$67aa30fdba181445956e78c7cfbf7f6ef0639091307ad3cb0da4a5b610045c99&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$TFfkgbLpZRz11jjj$63b708faf599813ccd9d702279f45b93ff54d9a18857c6557cbd8b206888d77f&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$lePZmyOojun2609l$98071fe9ca5b49869d65c82c4c92096d8414ff091e1a98c0df3727f58c479923&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$mXmAfSkUi6j3Qn43$f5ccfebcc3e6a0ade3b21620e09362d435afe57c476c0be2ad27314101ca24d1&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$72g1t8IEmWwCmNpP$2196bf58d2eaf13462c74f27385c2fdd6e89a3116243ee23ee05965fc913065a&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$OKcNKHQ6b2AJENPd$67aa30fdba181445956e78c7cfbf7f6ef0639091307ad3cb0da4a5b610045c99&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$TFfkgbLpZRz11jjj$63b708faf599813ccd9d702279f45b93ff54d9a18857c6557cbd8b206888d77f&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$lePZmyOojun2609l$98071fe9ca5b49869d65c82c4c92096d8414ff091e1a98c0df3727f58c479923&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$mXmAfSkUi6j3Qn43$f5ccfebcc3e6a0ade3b21620e09362d435afe57c476c0be2ad27314101ca24d1&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$72g1t8IEmWwCmNpP$2196bf58d2eaf13462c74f27385c2fdd6e89a3116243ee23ee05965fc913065a&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . import datetime from datetime import date import json today = datetime.datetime.now() class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob @property def age(self): global today if today.month &lt; self._dob.month: return today.year - self._dob.year -1 elif today.month == self._dob.month: if today.day &lt; self._dob.day: return today.year - self._dob.year - 1 else: return today.year - self._dob.year else: return today.year - self._dob.year # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob = date(2004, 12, 14)) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;, dob=date(2005, 12, 14)) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;, dob = date(2004, 12, 14)) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;, dob = date(2006, 12, 14)) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;, dob = date(2007, 12, 14)) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) &#39;&#39;&#39; . Test 1, find user 3 {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Nicholas Tesla&#34;, &#34;uid&#34;: &#34;nick&#34;, &#34;dob&#34;: &#34;12-14-2005&#34;, &#34;age&#34;: 17} * {&#34;name&#34;: &#34;Alexander Graham Bell&#34;, &#34;uid&#34;: &#34;lex&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Eli Whitney&#34;, &#34;uid&#34;: &#34;eli&#34;, &#34;dob&#34;: &#34;12-14-2006&#34;, &#34;age&#34;: 16} {&#34;name&#34;: &#34;Hedy Lemarr&#34;, &#34;uid&#34;: &#34;hedy&#34;, &#34;dob&#34;: &#34;12-14-2007&#34;, &#34;age&#34;: 15} Test 2, change user 3 {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Nicholas Tesla&#34;, &#34;uid&#34;: &#34;nick&#34;, &#34;dob&#34;: &#34;12-14-2005&#34;, &#34;age&#34;: 17} * {&#34;name&#34;: &#34;John Mortensen&#34;, &#34;uid&#34;: &#34;jm1021&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Eli Whitney&#34;, &#34;uid&#34;: &#34;eli&#34;, &#34;dob&#34;: &#34;12-14-2006&#34;, &#34;age&#34;: 16} {&#34;name&#34;: &#34;Hedy Lemarr&#34;, &#34;uid&#34;: &#34;hedy&#34;, &#34;dob&#34;: &#34;12-14-2007&#34;, &#34;age&#34;: 15} .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/04/17/model.html",
            "relUrl": "/2023/04/17/model.html",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "CPT Draft",
            "content": "3.a . 3.a.1 . The program is coded so that the user can create an account on the site and log in. In addition, we made it possible for users to delete their accounts so that they can retrieve their passwords if they are lost. . 3.a.2 . In the video, it shows user inputting new username and password to make a new account. When you log in, enter the correct username and password, and go to the main page. If incorrect, the login page tells you that the username or password is incorrect. . 3.a.3 . The video will show user inputting own username, password, and birthday for making account. If account is finally created, the user will go to login page for the login. The video will show that if user enters correct username and password, he will go to main website. If there is an error during login, the warning will come out. Besides, in order to change password, user has to input the right birthday and username. . 3.b . 3.b.1 . . 3.b.2 . . 3.b.3 . data . 3.b.4 . This variable data is made into a database for users. Extract the data from the API and store it in the code as a variable called data. In this data, user names and passwords of various people and various information are grouped and divided for each user. . 3.b.5 . 3.c.1 . . 3.c.2 . . Video Link . Link . Code for login . Link . Code for Deleting account . Link . Code for changing password . Link .",
            "url": "https://jw95z.github.io/JeongWooLee/cpt/",
            "relUrl": "/cpt/",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "MCQ 4",
            "content": "Test Score . .",
            "url": "https://jw95z.github.io/JeongWooLee/mcq4/",
            "relUrl": "/mcq4/",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "import webbrowser def search_song(): song_title = input(&quot;enter the song&#39;s title&quot;) query = song_title.replace(&quot; &quot;, &quot;+&quot;) url = f&quot;https://www.youtube.com/results?search_query={query}&quot; return url song_url = search_song() # a = [&quot;0&quot;, webbrowser.open(song_url)] # i = input(&quot;play&quot;) # a[i] webbrowser.open(song_url) . True . What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionaries. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is one. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # it didn&#39;t print the values that are repeated # it print as dictionary # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # don&#39;t cannot have collision # doesn&#39;t not print duplicate answer . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;csp&quot;, &quot;artist&quot;: &quot;James&quot;, &quot;year&quot;: 2016, &quot;genre&quot;: [&quot;csp&quot;, &quot;python&quot;, &quot;Electronic&quot;, &quot;Electricity&quot;], &quot;tracks&quot;: { 1: &quot;variable&quot;, 2: &quot;dict&quot;, 3: &quot;function&quot;, 4: &quot;binary&quot;, 5: &quot;cpu&quot;, 6: &quot;ram&quot;, 7: &quot;math&quot;, 8: &quot;science&quot;, 9: &quot;finished&quot;, 10: &quot;tech talks&quot;, } } # What data structures do you see? # Dictionaries # But inside the dictionaries, I can see some lists and dictionaries # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;csp&#39;, &#39;artist&#39;: &#39;James&#39;, &#39;year&#39;: 2016, &#39;genre&#39;: [&#39;csp&#39;, &#39;python&#39;, &#39;Electronic&#39;, &#39;Electricity&#39;], &#39;tracks&#39;: {1: &#39;variable&#39;, 2: &#39;dict&#39;, 3: &#39;function&#39;, 4: &#39;binary&#39;, 5: &#39;cpu&#39;, 6: &#39;ram&#39;, 7: &#39;math&#39;, 8: &#39;science&#39;, 9: &#39;finished&#39;, 10: &#39;tech talks&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;variable&#39;, 2: &#39;dict&#39;, 3: &#39;function&#39;, 4: &#39;binary&#39;, 5: &#39;cpu&#39;, 6: &#39;ram&#39;, 7: &#39;math&#39;, 8: &#39;science&#39;, 9: &#39;finished&#39;, 10: &#39;tech talks&#39;} {1: &#39;variable&#39;, 2: &#39;dict&#39;, 3: &#39;function&#39;, 4: &#39;binary&#39;, 5: &#39;cpu&#39;, 6: &#39;ram&#39;, 7: &#39;math&#39;, 8: &#39;science&#39;, 9: &#39;finished&#39;, 10: &#39;tech talks&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . binary binary . lover_album[&quot;tracks&quot;].update({11: &quot;SEEDPOINTS&quot;}) # How would add an additional genre to the dictionary, like electropop? # do the update() # so it changes the value of the tracks print(lover_album) . {&#39;title&#39;: &#39;csp&#39;, &#39;artist&#39;: &#39;James&#39;, &#39;year&#39;: 2016, &#39;genre&#39;: [&#39;csp&#39;, &#39;python&#39;, &#39;Electronic&#39;, &#39;Electricity&#39;], &#39;tracks&#39;: {1: &#39;variable&#39;, 2: &#39;dict&#39;, 3: &#39;function&#39;, 4: &#39;binary&#39;, 5: &#39;cpu&#39;, 6: &#39;ram&#39;, 7: &#39;math&#39;, 8: &#39;science&#39;, 9: &#39;finished&#39;, 10: &#39;tech talks&#39;, 11: &#39;SEEDPOINTS&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Frank Dukes&#39;, &#39;Joel Little&#39;}} . genre = &quot;&quot; types = [&#39;title&#39;, &#39;artist&#39;, &#39;year&#39;] for h in types: print(str(h) + &quot;: &quot; + str(lover_album[h])) for i in lover_album[&#39;genre&#39;]: # iterate using a for loop for key and value genre += i +&quot; &quot; print(&quot;genre: &quot;, genre) for track_number, track_name in lover_album[&quot;tracks&quot;].items(): print(f&quot;{track_number}: {track_name}&quot;) # Write your own code to print tracks in readable format # Ok # I got it . title: csp artist: James year: 2016 genre: csp python Electronic Electricity 1: variable 2: dict 3: function 4: binary 5: cpu 6: ram 7: math 8: science 9: finished 10: tech talks 11: SEEDPOINTS . def search(): search = input(&quot;What would you like to know about the album?&quot;) print(search) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) if isinstance(lover_album.get(search.lower()), list): for i in range(len(lover_album.get(search.lower()))): print(lover_album.get(search.lower())[i]) if isinstance(lover_album.get(search.lower()), dict): for track_number, track_name in lover_album[&quot;tracks&quot;].items(): print(f&quot;{track_number}: {track_name}&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # We can search for other columns such as tracks ad title # . tracks 1: variable 2: dict 3: function 4: binary 5: cpu 6: ram 7: math 8: science 9: finished 10: tech talks 11: SEEDPOINTS . Hacks . Answer ALL questions in the code segments | Create a venn diagram or other compare and contrast tool related to hashmaps. What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 4.3a Parallel Computing",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=320): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- images -- . . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- images -- . . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. | Try top -H for linux. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 The answer will be the 50 seconds because if there are two processors and starts running A and C first, then C will end in 10 seconds and have time to run B. B only takes 30 seconds, so after B code is completely executed, A is still running because it takes 50 seconds. When A is finished, B and C are already done. Therefore, 50 seconds is the minimum amount of time when there are two processors. | . | Example 2 The difference between two processors and one processors is time. When the programmer run two code A and B with one processors, it will take 25 + 45 seconds because the programers will end the remain code after the first code is done. However, if there are two processors, programmer can run each code in different processors, so it takes 45 seconds because B code takes 45 seconds to complete. Therefore, the time difference will become 70 -45 = 25 seconds. | . | .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/03/29/AP-unit4-3a-parallel-computing.html",
            "relUrl": "/2023/03/29/AP-unit4-3a-parallel-computing.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Extra Credit",
            "content": "Taylor swift’s best song . Personally, I think Taylor Swift’s RED album was her heyday. Before that, of course, there were a lot of good songs, but it seems that Red has become a iconic album. This by far, a masterpiece that will remain as one of the best ever. Even if you don’t know Taylor, I recommend you to listen to this song. Aldo, this song is better in live video than on record. I think it’s because Taylor’s emotions are more buried. In a Vogue 73 interview, Taylor said that this was the song that took the longest to write. As much as he said it took a long time because he was so emotional, I can clearly feel Taylor’s emotions when he sings. . . All Too Well .",
            "url": "https://jw95z.github.io/JeongWooLee/song/",
            "relUrl": "/song/",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "CPT plan",
            "content": "Reporting Category | Scoring Criteria | Comments | Student Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Input will be the username and password and output is to save data in the database and show in API. | 1/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | Has a code segment that shows the arithmetic that calculates the triangle ratios. Shows a list. Has name of variables and describes the data in the list. | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | I think my code is pretty complex because it connects 5 different code. The list will be pulling data from database | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | Has code segment showing the student-developed procedure and has parameter and shows where the SDP is being called. Finally describes the functionality of the program well. | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Describes what identified procedure is and how it contributes to overall functionality | I have sequencing for all the code and iteration for running APi and selection for the login thing in my personal site. | 1/1 | . Testing | Describes two calls that pass different argument and cause different result Conditions tested by each call result of each call | Two different values that one is correct login and another is incorrect login is putting in the login site The conditions will be username and password is correct. Right username and password will be go to main page and wrong will be go different page. | 1/1 | . Describing project . making a brick game input will be the pressing keyboards and video will show about the game. | . | adding brick | ball | wall | bar | . | Video the ball will keep bouncing toward the ball | if gamer can move the bar | If the ball hit the brick, the brick will | . | .",
            "url": "https://jw95z.github.io/JeongWooLee/CollegeBoardGrading4/",
            "relUrl": "/CollegeBoardGrading4/",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "College Board MCQ 3",
            "content": ". A researcher is analyzing data about students in a school district to determine whether there is a relationship between grade point average and number of absences. The researcher plans on compiling data from several sources to create a record for each student. . The researcher has access to a database with the following information about each student. . Last name | First name | Grade level (9, 10, 11, or 12) | Grade point average (on a 0.0 to 4.0 scale) | . The researcher also has access to another database with the following information about each student. . First name | Last name | Number of absences from school | Number of late arrivals to school Upon compiling the data, the researcher identifies a problem due to the fact that neither data source uses a unique ID number for each student. Which of the following best describes the problem caused by the lack of unique ID numbers? | . Correct answer: A Reflection: A unique identifier would be required in order to distinguish between two students with the same first and last names. . . A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? . Correct answer: B Reflection: It will be a challenge to clean the data from the different counties to make the data uniform. The way pollution data is captured and organized may vary significantly from county to county. . . A student is creating a Web site that is intended to display information about a city based on a city name that a user enters in a text field. Which of the following are likely to be challenges associated with processing city names that users might provide as input? . Select two answers. . Correct answer: B Reflection: Different users may abbreviate city names differently. This may require the student to clean the data to make it uniform before it can be processed. Correct answer: C Reflection: Misspelled city names will not be an exact match to information stored by the Web site. This may require the student to clean the data to make it uniform before it can be processed. . . Each student at a school has a unique student ID number. A teacher has the following spreadsheets available. . Spreadsheet I contains information on all students at the school. For each entry in this spreadsheet, the student name, the student ID, and the student’s grade point average are included. | Spreadsheet II contains information on only students who play at least one sport. For each entry in this spreadsheet, the student ID and the names of the sports the student plays are included. | Spreadsheet III contains information on only students whose grade point average is greater than 3.5. For each entry in this spreadsheet, the student name and the student ID are included. Spreadsheet IV contains information on only students who play more than one sport. For each entry in this spreadsheet, the student name and the student ID are included. | . The teacher wants to determine whether students who play a sport are more or less likely to have higher grade point averages than students who do not play any sports. Which of the following pairs of spreadsheets can be combined and analyzed to determine the desired information? Correct answer: A Reflection: The desired information can be determined by using the student IDs in spreadsheet II to identify the students who play a sport. Once the students who play a sport are identified, the grade point averages of students who play sports in spreadsheet I can be compared to the grade point averages of all other students in spreadsheet I. . . A database of information about shows at a concert venue contains the following information. . Name of artist performing at the show | Date of show | Total dollar amount of all tickets sold Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? | . Correct answer: A Reflection: The attendance for a particular show can be calculated dividing the total dollar amount of all tickets sold by the average ticket price. . . Delivery trucks enter and leave a depot through a controlled gate. At the depot, each truck is loaded with packages, which will then be delivered to one or more customers. As each truck enters and leaves the depot, the following information is recorded and uploaded to a database. . The truck’s identification number | The truck’s weight | The date and time the truck passes through the gate | Whether the truck is entering or leaving the depot Using only the information in the database, which of the following questions CANNOT be answered? | . Correct answer: B Reflection: The data captured each time a truck enters or leaves the depot do not include any information about the number of customers or deliveries associated with the truck. . . A camera mounted on the dashboard of a car captures an image of the view from the driver’s seat every second. Each image is stored as data. Along with each image, the camera also captures and stores the car’s speed, the date and time, and the car’s GPS location as metadata. Which of the following can best be determined using only the data and none of the metadata? . Correct answer: D Reflection: Determining the number of bicycles the car encountered would require the use of image recognition software to examine the images collected by the camera. The images are the data collected and no metadata would be required. . . A teacher sends students an anonymous survey in order to learn more about the students’ work habits. The survey contains the following questions. . On average, how long does homework take you each night (in minutes) ? | On average, how long do you study for each test (in minutes) ? | Do you enjoy the subject material of this class (yes or no) ? Which of the following questions about the students who responded to the survey can the teacher answer by analyzing the survey results? . | Do students who enjoy the subject material tend to spend more time on homework each night than the other students do? | Do students who spend more time on homework each night tend to spend less time studying for tests than the other students do? | Do students who spend more time studying for tests tend to earn higher grades in the class than the other students do? | . Correct answer: C Reflection: Question I can be answered because the teacher can detect a correlation between responses to questions 1 and 3 on the survey. Question II can be answered because the teacher can detect a correlation between responses to questions 1 and 2 on the survey. Question III cannot be answered because the survey is anonymous and the teacher cannot compare student grades with the responses to the survey questions. . . A city maintains a database of all traffic tickets that were issued over the past ten years. The tickets are divided into the following two categories. . Moving violations | Nonmoving violations The data recorded for each ticket include only the following information. . | The month and year in which the ticket was issued | The category of the ticket Which of the following questions CANNOT be answered using only the information in the database? | . Correct answer: B Reflection: The database only tracks the month and year that each ticket was issued. There is no information about whether the tickets were issued on weekends or weekdays. . . The owner of a clothing store records the following information for each transaction made at the store during a 7-day period. . The date of the transaction | The method of payment used in the transaction | The number of items purchased in the transaction | The total amount of the transaction, in dollars | . Customers can pay for purchases using cash, check, a debit card, or a credit card. Using only the data collected during the 7-day period, which of the following statements is true? .",
            "url": "https://jw95z.github.io/JeongWooLee/mcq3/",
            "relUrl": "/mcq3/",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . I don&#39;t know exactly about space and time complexity, but I think it will be related to time and space | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;kush.png&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;kush.png&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin PNG RGBA Original size: (451, 338) pixels: 152,438 Scaled size: (5000, 3747) pixels: 18,735,000 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . I think this is time complexity because all computer are different and their speed of calculating are different. Therefore, it is a time complexity. | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(100)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[76]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 76 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,jpace . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 76 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 76 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 1.6316053867340088 seconds 9227465 Time taken: 2.593003511428833 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. Best Time Complexity: Define the input for which algorithm takes less time or minimum time. In the best case calculate the lower bound of an algorithm. Example: In the linear search when search data is present at the first location of large data then the best case occurs. Average Time Complexity: In the average case take all random inputs and calculate the computation time for all inputs. And then we divide it by the total number of inputs. Worst Time Complexity: Define the input for which algorithm takes a long time or maximum time. In the worst calculate the upper bound of an algorithm. Example: In the linear search when search data is present at the last location of large data then the worst case occurs. | Why is time and space complexity important when choosing an algorithm? For example, in FPS game time complexity is important but for example like twitter it uses database so space complexity is more important | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? It depends on circumstances. All situations is not same. | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? time is related to many time to return and space is related to return many values. | . Complete the Time and Space Complexity analysis questions linked below. Practice .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/03/22/DS-space_time_complexity.html",
            "relUrl": "/2023/03/22/DS-space_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - database blueprint . What is the purpose of identity Column in SQL database? to know which data is belong to | . | What is the purpose of a primary key in SQL database? To find the data more much easily also faster | . | What are the Data Types in SQL table? string | . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? A Connection object represents a unique session with a data source. I think the connection create the relationship to database. | Same for cursor object? In this case, cursor connect to the database called sqlite3 | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? I don&#39;t think result is an object that connect database. This is the value from database | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? I think sqlite3 is more simple than SQL. In SQL, we have to define all the column, but it is more precise and more comfortable while doing a project. | Explain purpose of SQL INSERT. Is this the same as User init? No Insert means to put the data in sqlite3 | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? is to change the value in database | Explain try/except, when would except occur? if there is and error | What code seems to be repeated in each of these examples to point, why is it repeated? cursor.execute, it is the code to manage database | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? because it removes one of data, and it is difficult to redintegrate | . | In the print statemements, what is the &quot;f&quot; and what does {uid} do? f means format, so it will print the value more beautiful | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? Menu has to be repeated because users sometime don&#39;t want for only one thing. They sometime want to create and update it. | . | Could you refactor this menu? Make it work with a List? Ok I will. | . | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;1&#39;: create() elif operation.lower() == &#39;2&#39;: read() elif operation.lower() == &#39;3&#39;: update() elif operation.lower() == &#39;4&#39;: delete() elif operation.lower() == &#39;5&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . hack . import requests import json url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text[&#39;countries_stat&#39;]) countries = response.json().get(&#39;countries_stat&#39;) print(len(countries)) . import sqlite3 import requests def make(): url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) countries = response.json().get(&#39;countries_stat&#39;) # Connect to the database file con = sqlite3.connect(&#39;instance/covid.db&#39;) # Create a cursor object to execute SQL queries cur = con.cursor() cur.execute(&#39;&#39;&#39;CREATE TABLE covid (country_name, cases, deaths, total_recovered, serious_critical, active_cases)&#39;&#39;&#39;) # Save (commit) the changes con.commit() # We can also close the connection if we are done with it. # Just be sure any changes have been committed or they will be lost. con.close() make() . import sqlite3 import requests def make(): # Connect to the database file con = sqlite3.connect(&#39;instance/covid.db&#39;) # Create a cursor object to execute SQL queries cur = con.cursor() url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) countries = response.json().get(&#39;countries_stat&#39;) for i in range(len(countries)): country_name = countries[i][&quot;country_name&quot;] cases = countries[i][&quot;cases&quot;] deaths = countries[i][&quot;deaths&quot;] total_recovered = countries[i][&quot;total_recovered&quot;] serious_critical = countries[i][&quot;serious_critical&quot;] active_cases = countries[i][&quot;active_cases&quot;] cur.execute(&quot;INSERT INTO covid (country_name, cases, deaths, total_recovered, serious_critical, active_cases) VALUES (?, ?, ?, ?, ?, ?)&quot;, (country_name, cases, deaths, total_recovered, serious_critical, active_cases)) # Save (commit) the changes con.commit() con.close() make() . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(&#39;instance/playlist.db&#39;) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM playlist&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . import sqlite3 def create(): title = input(&quot;Enter the song title:&quot;) author = input(&quot;Enter author:&quot;) link = input(&quot;Enter the link&quot;) whenMade = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) time = input() # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO stock (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() . Create . import sqlite3 def rebuild(): conn = sqlite3.connect(&#39;instance/covid.db&#39;) cursor = conn.cursor() . import sqlite3 def recreate_covid(): country_name = input(&quot;Enter the country_name: &quot;) cases = input(&quot;Enter whole cases: &quot;) deaths = input(&quot;Enter the deaths: &quot;) total_recovered = input(&quot;Enter total_recovered&quot;) serious_critical = input(&quot;Enter total_recovered&quot;) active_cases = input(&quot;enter the active cases&quot;) conn = sqlite3.connect(&#39;instance/covid.db&#39;) cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;DELETE INTO covid&quot;) cursor.execute(&quot;INSERT INTO covid (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (country_name, cases, deaths, total_recovered, serious_critical, active_cases)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {country_name} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() recreate_covid() . Error while executing the INSERT: near &#34;INTO&#34;: syntax error . import sqlite3 from tabulate import tabulate def read_covid(): # Connect to the database file conn = sqlite3.connect(&#39;instance/covid.db&#39;) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM covid&#39;).fetchall() # Print the results table = tabulate(results, headers=[&quot;appName&quot;, &quot;_uid&quot;, &quot;_password&quot;, &quot;_personalUse&quot;, &quot;_favoriteFeature&quot;]) print(table) # Close the cursor and connection objects cursor.close() conn.close() read_covid() . import sqlite3 def update_covid(): conn = sqlite3.connect(&#39;instance/covid.db&#39;) cursor = conn.cursor() country_name = input(&quot;Enter conuntry name for update&quot;) cases = input(&#39;cases&#39;) cursor.execute(&quot;SELECT country_name FROM covid where country_name= &#39;&quot;+country_name+&quot;&#39;&quot;) results = cursor.fetchall() if len(results) == 0: return &quot;no country&quot; else: pass try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE covid SET cases = ? WHERE country_name = ?&quot;, (cases, country_name)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {country_name} was not found in the table&quot;) else: print(f&quot;The row with covid id {country_name} the password has been success&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() . import sqlite3 def delete_covid(): country_name = input(&quot;Enter country to delete&quot;) # Connect to the database file conn = sqlite3.connect(&#39;instance/covid.db&#39;) cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM covid WHERE country_name = ?&quot;, (country_name,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {country_name} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {country_name} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete_covid() . import sqlite3 def schema_covid(): conn = sqlite3.connect(&#39;instance/covid.db&#39;) cursor = conn.cursor() results = cursor.execute(&quot;PRAGMA table_info(&#39;covid&#39;)&quot;).fetchall() for row in results: print(row) cursor.close() conn.close() . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema or E(nd)&quot;) if operation== &#39;c&#39;: recreate_covid() if operation == &#39;r&#39;: read_covid() if operation == &#39;u&#39;: update_covid() if operation == &#39;d&#39;: delete_covid() if operation == &#39;s&#39;: schema_covid() if len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . appName _uid _password _personalUse _favoriteFeature - - - -- -- Brazil 30,345,654 662,663 29,364,400 8,318 318,591 France 28,244,977 145,020 25,852,832 1,677 2,247,125 Germany 24,109,433 134,624 21,243,000 1,980 2,731,809 UK 21,933,206 173,352 20,782,350 339 977,504 Russia 18,137,137 374,902 17,474,628 2,300 287,607 S. Korea 16,895,194 22,133 N/A 726 N/A Italy 16,079,209 162,609 14,684,371 409 1,232,229 Turkey 15,016,270 98,676 14,854,475 975 63,119 Spain 11,786,036 103,908 11,261,340 339 420,788 Vietnam 10,563,502 43,013 9,086,075 612 1,434,414 Argentina 9,060,923 128,344 8,895,999 412 36,580 Netherlands 8,035,603 22,206 7,643,520 94 369,877 Japan 7,621,562 29,284 7,135,403 195 456,875 Iran 7,216,040 140,975 6,966,954 1,046 108,111 Colombia 6,091,094 139,771 5,924,433 342 26,890 Indonesia 6,043,768 156,067 5,868,251 2,771 19,450 Poland 5,991,197 115,948 5,334,375 1,588 540,874 Mexico 5,733,514 324,117 5,033,892 4,798 375,505 Australia 5,689,377 6,991 5,274,197 135 408,189 Ukraine 4,997,224 108,306 N/A 177 N/A Malaysia 4,427,067 35,491 4,310,599 89 80,977 Thailand 4,165,874 27,778 3,954,945 1,496 183,151 Austria 4,104,859 18,047 3,989,860 121 96,952 Israel 4,054,342 10,658 4,009,152 220 34,532 Belgium 4,015,791 31,319 3,726,457 169 258,015 Czechia 3,895,544 40,081 3,838,099 43 17,364 Portugal 3,791,744 22,162 N/A 61 N/A South Africa 3,759,689 100,298 3,632,572 175 26,819 Canada 3,695,585 38,777 3,426,082 426 230,726 Philippines 3,684,500 60,182 3,610,658 289 13,660 Switzerland 3,579,867 13,816 3,378,507 90 187,544 Peru 3,559,343 212,724 N/A 356 N/A Chile 3,544,463 57,375 3,368,772 286 118,316 Greece 3,277,557 28,867 3,151,717 277 96,973 Denmark 2,959,040 6,072 2,929,091 15 23,877 Romania 2,888,318 65,427 2,606,660 216 216,231 Sweden 2,498,388 18,656 2,464,421 19 15,311 Iraq 2,324,141 25,204 2,295,947 20 2,990 Serbia 2,001,144 15,953 1,967,786 25 17,405 Bangladesh 1,952,532 29,127 1,893,131 1,297 30,274 Hungary 1,890,953 46,048 1,776,617 45 68,288 Slovakia 1,774,808 19,839 1,730,712 88 24,257 Jordan 1,694,216 14,048 1,678,941 124 1,227 Georgia 1,654,255 16,800 1,635,791 0 1,664 Pakistan 1,527,856 30,369 1,493,998 186 3,489 Ireland 1,509,536 6,996 1,415,949 41 86,591 Norway 1,423,509 2,871 N/A 20 N/A Kazakhstan 1,305,457 13,660 1,290,988 24 809 Hong Kong 1,201,431 9,236 N/A 115 N/A Singapore 1,180,124 1,325 1,109,387 9 69,412 Morocco 1,164,670 16,065 1,148,154 293 451 Bulgaria 1,152,892 36,849 959,542 105 156,501 Croatia 1,117,175 15,778 1,096,829 22 4,568 Cuba 1,101,486 8,523 1,091,603 23 1,360 Lebanon 1,096,320 10,374 1,079,455 186 6,491 Lithuania 1,054,618 9,063 1,016,510 31 29,045 Tunisia 1,039,532 28,533 N/A 29 N/A Slovenia 1,003,970 6,576 980,501 30 16,893 Finland 1,000,472 3,638 46,000 31 950,834 Nepal 978,743 11,951 966,523 0 269 Belarus 977,434 6,922 928,536 0 41,976 Bolivia 904,377 21,908 855,123 220 27,346 UAE 897,136 2,302 879,787 0 15,047 Uruguay 895,775 7,197 886,654 18 1,924 New Zealand 884,289 636 824,272 0 59,381 Ecuador 868,053 35,581 N/A 759 N/A Costa Rica 847,784 8,383 829,515 43 9,886 Guatemala 841,341 17,496 821,185 5 2,660 Latvia 817,316 5,743 803,135 9 8,438 Azerbaijan 792,476 9,707 782,634 0 135 Panama 771,486 8,182 759,832 8 3,472 Saudi Arabia 753,332 9,076 740,467 45 3,789 Sri Lanka 663,131 16,502 642,574 0 4,055 Paraguay 649,034 18,795 624,673 5 5,566 Kuwait 631,294 2,555 627,899 8 840 Myanmar 612,733 19,434 591,609 0 1,690 Palestine 581,816 5,353 575,899 17 564 Dominican Republic 578,954 4,376 574,297 16 281 Estonia 570,257 2,531 507,474 7 60,252 Bahrain 565,830 1,475 560,795 3 3,560 Venezuela 522,121 5,705 515,305 230 1,111 Moldova 516,986 11,489 504,142 49 1,355 Egypt 515,645 24,613 442,182 122 48,850 Libya 501,862 6,429 490,900 101 4,533 Cyprus 470,481 1,011 124,370 60 345,100 Ethiopia 470,417 7,510 454,967 15 7,940 Mongolia 469,580 2,177 313,256 192 154,147 Armenia 422,825 8,622 410,558 0 3,645 Honduras 422,275 10,892 131,100 105 280,283 Oman 388,995 4,257 384,055 2 683 Bosnia and Herzegovina 376,699 15,756 192,218 0 168,725 Réunion 374,295 742 355,605 10 17,948 Qatar 364,089 677 362,568 1 844 Kenya 323,696 5,649 317,909 0 138 Zambia 318,984 3,974 314,075 0 935 North Macedonia 309,062 9,271 299,064 0 727 Botswana 305,859 2,688 303,026 1 145 Albania 274,791 3,496 270,869 2 426 Algeria 265,761 6,874 178,344 6 80,543 Nigeria 255,685 3,143 249,890 11 2,652 Zimbabwe 247,524 5,468 241,362 12 694 Uzbekistan 238,469 1,637 236,483 23 349 Montenegro 234,619 2,713 231,297 6 609 Luxembourg 233,966 1,058 221,501 1 11,407 Mozambique 225,358 2,201 223,104 13 53 Laos 205,975 732 7,660 0 197,583 Kyrgyzstan 200,983 2,991 196,386 131 1,606 China 200,654 4,725 166,398 236 29,531 Iceland 183,974 112 75,685 1 108,177 Maldives 178,883 298 163,687 25 14,898 Afghanistan 178,689 7,682 161,748 1,124 9,259 Uganda 164,069 3,596 100,205 2 60,268 El Salvador 162,089 4,127 150,662 8 7,300 Ghana 161,124 1,445 159,655 1 24 Namibia 158,332 4,023 153,662 0 647 Martinique 147,519 918 104 8 146,497 Trinidad and Tobago 144,359 3,812 133,604 18 6,943 Brunei 141,014 218 139,724 2 1,072 Guadeloupe 140,130 854 2,250 19 137,026 Cambodia 136,200 3,056 132,896 0 248 Rwanda 129,764 1,458 45,522 0 82,784 Jamaica 129,489 2,943 82,965 0 43,581 Cameroon 119,780 1,927 117,791 13 62 Angola 99,194 1,900 97,149 0 145 Malta 90,595 688 84,646 4 5,261 DRC 87,023 1,337 50,930 0 34,756 Senegal 85,984 1,966 84,001 1 17 Malawi 85,747 2,633 81,938 67 1,176 Ivory Coast 81,887 799 81,061 0 27 French Guiana 80,422 394 11,254 1 68,774 Suriname 79,302 1,327 49,396 0 28,579 Channel Islands 73,609 166 72,059 0 1,384 French Polynesia 72,648 648 N/A 7 N/A Eswatini 70,284 1,397 68,764 11 123 Barbados 67,256 389 63,424 0 3,443 Fiji 64,524 862 62,677 0 985 Madagascar 64,121 1,391 59,370 14 3,360 Guyana 63,413 1,228 62,092 1 93 Sudan 62,093 4,930 N/A 0 N/A New Caledonia 60,457 312 60,064 9 81 Mauritania 58,683 982 57,693 0 8 Bhutan 57,771 20 53,080 3 4,671 Belize 57,419 676 56,534 6 209 Taiwan 56,468 856 23,729 0 31,883 Cabo Verde 56,004 401 55,538 23 65 Syria 55,795 3,150 52,090 0 555 Gabon 47,597 303 47,282 0 12 Papua New Guinea 43,732 649 43,025 7 58 Seychelles 42,079 165 41,260 0 654 Curaçao 41,966 273 41,251 3 442 Andorra 41,013 153 40,343 14 517 Burundi 38,887 38 773 0 38,076 Mauritius 37,656 990 35,656 0 1,010 Mayotte 37,038 187 2,964 0 33,887 Togo 36,977 273 36,679 0 25 Guinea 36,459 440 35,976 8 43 Faeroe Islands 34,658 28 7,693 5 26,937 Aruba 34,589 212 34,251 2 126 Tanzania 33,864 803 N/A 7 N/A Bahamas 33,463 789 32,310 11 364 Lesotho 32,910 697 24,155 0 8,058 Mali 30,727 731 29,795 0 201 Haiti 30,640 835 29,389 0 416 Isle of Man 28,416 87 26,794 0 1,535 Benin 26,952 163 25,506 5 1,283 Somalia 26,485 1,350 13,182 0 11,953 Congo 24,079 385 20,178 0 3,516 Saint Lucia 23,239 368 22,736 1 135 Timor-Leste 22,860 130 22,714 0 16 Cayman Islands 21,755 26 8,553 1 13,176 Burkina Faso 20,853 382 20,439 0 32 Nicaragua 18,491 225 4,225 0 14,041 Gibraltar 17,706 102 16,579 0 1,025 South Sudan 17,422 138 13,514 1 3,770 Tajikistan 17,388 124 17,264 0 0 Liechtenstein 17,103 85 16,831 0 187 San Marino 16,140 114 15,662 4 364 Equatorial Guinea 15,907 183 15,698 5 26 Djibouti 15,611 189 15,411 0 11 CAR 14,649 113 6,859 2 7,677 Grenada 14,428 220 13,945 4 263 Bermuda 13,143 131 12,719 0 293 Solomon Islands 12,437 139 11,194 2 1,104 Dominica 12,011 63 11,926 0 22 Gambia 11,995 365 11,591 0 39 Greenland 11,971 21 2,761 4 9,189 Yemen 11,818 2,148 9,001 23 669 Monaco 11,604 54 11,362 4 188 Saint Martin 10,279 63 1,399 7 8,817 Sint Maarten 9,990 86 9,841 10 63 Eritrea 9,733 103 9,629 0 1 Caribbean Netherlands 9,592 34 9,392 0 166 Tonga 9,553 11 8,306 0 1,236 Niger 8,914 309 8,507 1 98 Guinea-Bissau 8,185 171 7,515 6 499 Comoros 8,100 160 7,933 0 7 Sierra Leone 7,681 125 N/A 0 N/A Antigua and Barbuda 7,571 135 7,402 1 34 Liberia 7,432 294 5,747 2 1,391 Chad 7,396 193 4,874 0 2,329 Samoa 7,185 13 1,605 3 5,567 Vanuatu 6,793 12 5,991 5 790 St. Vincent Grenadines 6,779 106 6,641 0 32 British Virgin Islands 6,296 62 N/A 1 N/A Sao Tome and Principe 5,953 73 5,875 0 5 Turks and Caicos 5,941 36 5,862 4 43 Saint Kitts and Nevis 5,561 43 5,517 0 1 Cook Islands 4,727 0 3,990 0 737 St. Barth 4,432 6 N/A 0 N/A Palau 4,396 6 3,879 1 511 Kiribati 3,076 13 2,597 3 466 Anguilla 2,731 9 2,716 4 6 Saint Pierre Miquelon 2,641 1 2,449 1 191 Diamond Princess 712 13 699 0 0 Wallis and Futuna 454 7 438 0 9 Montserrat 183 2 174 0 7 Falkland Islands 128 0 N/A 0 N/A Macao 82 0 82 0 0 Vatican City 29 0 29 0 0 Marshall Islands 15 0 7 0 8 Western Sahara 10 1 9 0 0 MS Zaandam 9 2 7 0 0 Niue 8 0 7 0 1 Nauru 3 0 3 0 0 Saint Helena 2 0 2 0 0 Micronesia 1 0 1 0 0 Please enter c, r, u, or d . import sqlite3 conn = sqlite3.connect(&quot;baseballmarket.db&quot;, isolation_level=None) c = conn.cursor() productList = ((&#39;baseball&#39;,&#39;35&#39;),(&#39;bat&#39;,&#39;100&#39;),(&#39;glove&#39;,&#39;150&#39;)) c.execute(&quot;CREATE TABLE IF NOT EXISTS productList(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, price INTEGER)&quot;) c.execute(&quot;CREATE TABLE IF NOT EXISTS orderList(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, cnt INTEGER, price INTEGER, total INTEGER)&quot;) for row in c.execute(&#39;SELECT count(*) FROM productList&#39;): if row[0] == 0: c.executemany(&quot;INSERT INTO productList (name,price) values (?,?)&quot;, productList) ## 상품 목록을 표시하는 코드 while True: print(&quot;list&quot;) for row in c.execute(&#39;SELECT id,name, price FROM productList&#39;): print(&#39;number :&#39;,row[0],&#39;, name :&#39;, row[1], &#39;, price :&#39;, row[2]) print(&quot;--&quot;) print(&#39;&#39;) num = input(&quot;write the number you want to buy: &quot;) c.execute(&quot;SELECT name, price FROM productList WHERE id = ?&quot;,(num,)) result = c.fetchone() print(&#39;&#39;) count = int(input(&quot;write how much to buy: &quot;)) total = count * int(result[1]) c.execute(&quot;INSERT INTO orderList (name, cnt, price, total) VALUES (?,?,?,?)&quot;, (result[0],count,result[1],total)) print(&#39;&#39;) print(&quot;see the purchase history&quot;) print(&quot;--order list--&quot;) for row in c.execute(&#39;SELECT * FROM orderList&#39;): print(&#39;name :&#39;,row[1],&#39;, order number :&#39;, row[2], &#39;, unit price :&#39;, row[3], &#39;, price :&#39;, row[4]) print(&quot;&quot;) print(&#39;&#39;) print(&quot;Are you gonna buy more? n press x to stop nif you want to continue, press enter &quot;) if(input() == &quot;x&quot;): break print(&#39;&#39;) print(&quot;whole purchase list&quot;, end=&#39;&#39;) for row in c.execute(&#39;SELECT sum(total) FROM orderList&#39;): print(&#39; : &#39;,row[0],&#39;dollars&#39;) print(&#39;&#39;) conn.close() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "College Board MCQ 3",
            "content": ". Test Score . . Question 22 . . My answer . D, Neither grid I nor grid II . Correct answer . A, Grid I only . Reason . No, I think I also picked grid 1, but when I looked at it, it turned out that I had picked D. Maybe I was too sleepy at this point and clicked the wrong button. (college board reason = In Grid I, the robot moves forward to the end of the bottom row, turns right twice, moves forward twice, turns right twice, moves forward until the end of the middle row, turns left twice, moves forward twice, turns left twice, and moves forward until Goal_Reached is true.) . . Question 50 . . My answer . Algorithm B, Algorithm C . Correct answer . Algorithm A, Algorithm D . Reason . As the size of the list get bigger, the number of step will grow exponentially. Therefore, Algorithm A increase with two times bigger and in term of Algorithm D, it changes with n x n. They grow exponentially, but B and C do not. (College board reason = As the size of the list grows, the number of steps needed to sort the list grows at an exponential rate, as the number of steps is equal to 2n for a list of size n. This indicates that the algorithm does not run in a reasonable amount of time.) . . Question 14 . . Correct answer . C, Purchasing a single-user copy of photo editing software and installing it on all the computers in a computer lab . Confusion . I was confused about this question because I didn’t know what unethical means. At first, I inferred that it means dangerous to users. Therefore, I pick A in the fist test, but later my friends taught me the answer is C. I thought it would be dangerous when people download any freeware in the internet. Some programmers put computer virus in the files. However, actually, unethical means not morally correct. Therefore, downloading freeware can be fine . . Question 9 . . Correct answer . D, When a user enters an incorrect password more than two times in a row, the user is locked out of the account for 24 hours. . Confusion . At first, I don’t know the meaning of multifactor authentication, so I had to search what it is. Multifactor authentication is an authentication method that requires a user to provide at least two factors of confirmation in order to be granted access to an application or resource. Preventing user action if the password is incorrect is not a way to verify the user, but rather to protect the user’s account. I didn’t know about multifactor authentication, so I was very confused when I first saw this problem, but I think I was able to solve it after knowing the concept. .",
            "url": "https://jw95z.github.io/JeongWooLee/mcq3/",
            "relUrl": "/mcq3/",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object object of application based on library called flask | . | SQLAlchemy db object object of database based on library called SQL | . | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///instance/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User it is the template of user | . | db.Model inheritance inheritance is when the model inherites different values / things from the db | . | init method the constructor of the object | . | @property, @&lt;column&gt;.setter | create, read, update, delete methods CRUD is essential things in every database | . | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object it is similiar to appending the data in lists. But if there is same data, it is unable to append | . | User Object Constructors who create the more data | . | Try / Except try:make an attempt or effort to do something, except: not including; other than | . | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by query is a one kind of library and filter means to filter with the conditions | . | user.password first, other people cannot see the password due to hash. And to verify the identity | . | | . uid = input() def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() print(user) # returns user object find_by_uid(uid) # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . None . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except make sure that user can find the username and try it and except | . | user = User(...) This is the equation, user is equal to User(...) | user.dob and try/except dob stands for day of birth | user.create() and try/except create is a similar make | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) db.session.commit() except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . None Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;james&#39;, &#39;uid&#39;: &#39;James&#39;, &#39;dob&#39;: &#39;09-05-2006&#39;, &#39;age&#39;: 16} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all select all of the data from database | json_ready assignment, google List Comprehension return the user in json format | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-23-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-23-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-23-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;james&#39;, &#39;uid&#39;: &#39;James&#39;, &#39;dob&#39;: &#39;09-05-2006&#39;, &#39;age&#39;: 16}] . def update_user(): uid = input(&quot;Enter your user id:&quot;) password = input(&#39;Enter your password&#39;) change = input(&quot;what do you want to change&quot;) if uid is None: return {&#39;message&#39;: f&#39;User ID is missing&#39;}, 400 if password is None: return {&#39;message&#39;: f&#39;password is missing&#39;}, 400 with app.app_context(): try: user = User.query.filter_by(_uid=uid).first() except: return &quot;so such user&quot; if change == &quot;uid&quot;: update_content = input(&quot;what do you want to change&quot;) user.uid = update_content user_change = User.query.filter_by(_uid=update_content).first() db.session.commit() print(user_change) if change == &quot;password&quot;: update_content = input(&quot;what do you want to change&quot;) user.password = update_content user_change = User.query.filter_by(_password=update_content).first() db.session.commit() print(user_change) if change == &quot;dob&quot;: update_year = input(&quot;Year&quot;) update_month = input(&quot;month&quot;) update_day = input(&quot;day&quot;) user.dob = datetime(update_year, update_month, update_day) db.session.commit() print(user) update_user() . {&#34;id&#34;: 7, &#34;name&#34;: &#34;james&#34;, &#34;uid&#34;: &#34;James&#34;, &#34;dob&#34;: &#34;09-05-2006&#34;, &#34;age&#34;: 16} . def delete_user(): uid = input(&quot;Enter your user id:&quot;) password = input(&#39;Enter your password&#39;) if uid is None: return {&#39;message&#39;: f&#39;User ID is missing&#39;}, 400 if password is None: return {&#39;message&#39;: f&#39;password is missing&#39;}, 400 with app.app_context(): user = User.query.filter_by(_uid=uid).first() user.delete() print(&quot;Complete delete&quot;) delete_user() read() . Complete delete . [{&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}] . import requests url = &quot;https://billboard3.p.rapidapi.com/hot-100&quot; querystring = {&quot;date&quot;:&quot;2022-07-07&quot;,&quot;range&quot;:&quot;1-10&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&quot;, &quot;X-RapidAPI-Host&quot;: &quot;billboard3.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) songs = response.json() print(songs[0][&#39;weeksAtNo1&#39;]) . [{&#34;artist&#34;:&#34;Harry Styles&#34;,&#34;title&#34;:&#34;As It Was&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/04/harry-styles-bma-as-it-was-po3-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:1,&#34;weeksAtNo1&#34;:8,&#34;lastWeek&#34;:2,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:13},{&#34;artist&#34;:&#34;Jack Harlow&#34;,&#34;title&#34;:&#34;First Class&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2018/01/jack-harlow-i43-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:2,&#34;lastWeek&#34;:3,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:12},{&#34;artist&#34;:&#34;Lizzo&#34;,&#34;title&#34;:&#34;About Damn Time&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/04/lizzo-o9x-about-damn-time-f6q-180x180.jpg&#34;,&#34;award&#34;:true,&#34;awardsList&#34;:[{&#34;awardName&#34;:&#34;Gains In Performance&#34;,&#34;svg&#34;:&#34;&lt;svg xmlns= &#34;http://www.w3.org/2000/svg &#34; style= &#34;width:100%;height:auto &#34; viewBox= &#34;0 0 128 171.211 &#34;&gt;&lt;g data-name= &#34;Group 12 &#34;&gt;&lt;path data-name= &#34;Path 3036 &#34; d= &#34;M0 87.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3037 &#34; d= &#34;M0 127.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3038 &#34; d= &#34;M0 167.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3039 &#34; d= &#34;M24.526 59.211H44v112h40v-112h19.474L64 0zm51.474-8v112H52v-112H39.474L64 14.422l24.526 36.789z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&#34;}],&#34;rank&#34;:3,&#34;lastWeek&#34;:5,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:3,&#34;weeksOnChart&#34;:11},{&#34;artist&#34;:&#34;Future Featuring Drake &amp; Tems&#34;,&#34;title&#34;:&#34;Wait For U&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/1988/03/future-f8b-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:4,&#34;lastWeek&#34;:4,&#34;change&#34;:&#34;same&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:9},{&#34;artist&#34;:&#34;Drake Featuring 21 Savage&#34;,&#34;title&#34;:&#34;Jimmy Cooks&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2009/04/drake-04g-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:5,&#34;lastWeek&#34;:1,&#34;change&#34;:&#34;down&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:2},{&#34;artist&#34;:&#34;Kate Bush&#34;,&#34;title&#34;:&#34;Running Up That Hill (A Deal With God)&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2021/03/kate-bush-qv2-running-up-that-hill-1cx-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:6,&#34;lastWeek&#34;:9,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:4,&#34;weeksOnChart&#34;:25},{&#34;artist&#34;:&#34;Beyonce&#34;,&#34;title&#34;:&#34;Break My Soul&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/07/beyonce-0na-break-my-soul-kqf-180x180.jpg&#34;,&#34;award&#34;:true,&#34;awardsList&#34;:[{&#34;awardName&#34;:&#34;Biggest gain in airplay&#34;,&#34;svg&#34;:&#34;&lt;svg xmlns= &#34;http://www.w3.org/2000/svg &#34; style= &#34;width:100%;height:auto &#34; viewBox= &#34;0 0 136 165.558 &#34;&gt;&lt;g data-name= &#34;Group 9 &#34;&gt;&lt;path data-name= &#34;Path 3019 &#34; d= &#34;M116 65.558l-16 24h8v24h16v-24h8z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3020 &#34; d= &#34;M20 65.558l-16 24h8v24h16v-24h8z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3021 &#34; d= &#34;M88 26.47a20 20 0 10-25.1 19.316l-.2.731c-.892 3.258-2.153 7.914-3.66 13.5-3.011 11.166-7 26.056-10.991 40.948-7.971 29.779-15.913 59.561-15.913 59.561l-1.342 5.031h74.424L73.038 45.801A20.018 20.018 0 0088 26.47zm-32 0a12 12 0 1112.065 12c-.086 0-.173-.007-.256-.006A12.008 12.008 0 0156 26.47zm11.951 31.231l9.635 35.857H58.314c3.707-13.832 7.155-26.675 9.637-35.857zm-18.2 67.857a66812.91 66812.91 0 016.42-24h23.564l6.449 24zm-8.545 32c1.8-6.744 4.008-15.021 6.407-24h40.72l6.449 24z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3022 &#34; d= &#34;M101.169 40.484a36.1 36.1 0 000-28.028l-7.368 3.116a28.1 28.1 0 010 21.8z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3023 &#34; d= &#34;M42.2 37.368a28.1 28.1 0 010-21.8l-7.368-3.116a36.1 36.1 0 000 28.028z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3024 &#34; d= &#34;M108.544 9.344a44.158 44.158 0 010 34.251l7.368 3.116a52.156 52.156 0 000-40.483z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3025 &#34; d= &#34;M20.088 6.228a52.156 52.156 0 000 40.483l7.368-3.116a44.158 44.158 0 010-34.251z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3026 &#34; d= &#34;M130.655 0l-7.368 3.116a60.216 60.216 0 010 46.707l7.368 3.116a68.214 68.214 0 000-52.939z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3027 &#34; d= &#34;M5.345 0a68.214 68.214 0 000 52.939l7.368-3.116a60.216 60.216 0 010-46.707z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&#34;},{&#34;awardName&#34;:&#34;Gains In Performance&#34;,&#34;svg&#34;:&#34;&lt;svg xmlns= &#34;http://www.w3.org/2000/svg &#34; style= &#34;width:100%;height:auto &#34; viewBox= &#34;0 0 128 171.211 &#34;&gt;&lt;g data-name= &#34;Group 12 &#34;&gt;&lt;path data-name= &#34;Path 3036 &#34; d= &#34;M0 87.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3037 &#34; d= &#34;M0 127.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3038 &#34; d= &#34;M0 167.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3039 &#34; d= &#34;M24.526 59.211H44v112h40v-112h19.474L64 0zm51.474-8v112H52v-112H39.474L64 14.422l24.526 36.789z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&#34;}],&#34;rank&#34;:7,&#34;lastWeek&#34;:15,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:7,&#34;weeksOnChart&#34;:2},{&#34;artist&#34;:&#34;Bad Bunny &amp; Chencho Corleone&#34;,&#34;title&#34;:&#34;Me Porto Bonito&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/05/bad-bunny-c3m-me-porto-bonito-kug-180x180.jpg&#34;,&#34;award&#34;:true,&#34;awardsList&#34;:[{&#34;awardName&#34;:&#34;Gains In Performance&#34;,&#34;svg&#34;:&#34;&lt;svg xmlns= &#34;http://www.w3.org/2000/svg &#34; style= &#34;width:100%;height:auto &#34; viewBox= &#34;0 0 128 171.211 &#34;&gt;&lt;g data-name= &#34;Group 12 &#34;&gt;&lt;path data-name= &#34;Path 3036 &#34; d= &#34;M0 87.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3037 &#34; d= &#34;M0 127.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3038 &#34; d= &#34;M0 167.211v-24l64-32 64 32v24l-64-32z &#34; fill= &#34;#fcee21 &#34;&gt;&lt;/path&gt;&lt;path data-name= &#34;Path 3039 &#34; d= &#34;M24.526 59.211H44v112h40v-112h19.474L64 0zm51.474-8v112H52v-112H39.474L64 14.422l24.526 36.789z &#34; fill= &#34;#1a48c4 &#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&#34;}],&#34;rank&#34;:8,&#34;lastWeek&#34;:11,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:7,&#34;weeksOnChart&#34;:8},{&#34;artist&#34;:&#34;Glass Animals&#34;,&#34;title&#34;:&#34;Heat Waves&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2020/07/glass-animals-rtd-heat-waves-o3i-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:9,&#34;lastWeek&#34;:10,&#34;change&#34;:&#34;up&#34;,&#34;peakPosition&#34;:1,&#34;weeksOnChart&#34;:76},{&#34;artist&#34;:&#34;Joji&#34;,&#34;title&#34;:&#34;Glimpse Of Us&#34;,&#34;image&#34;:&#34;https://charts-static.billboard.com/img/2022/06/joji-77h-glimpse-of-us-gt3-180x180.jpg&#34;,&#34;award&#34;:false,&#34;awardsList&#34;:[],&#34;rank&#34;:10,&#34;lastWeek&#34;:8,&#34;change&#34;:&#34;down&#34;,&#34;peakPosition&#34;:8,&#34;weeksOnChart&#34;:3}] 8 . from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///instance/songs.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . from datetime import datetime import json from sqlalchemy.exc import IntegrityError class Song(db.Model): __tablename__ = &#39;billboard&#39; # table name is plural, class name is singular _rank = db.Column(db.Integer, primary_key=True) _title= db.Column(db.String(255), unique=True, nullable=False) _artist = db.Column(db.String(255), unique=False, nullable=False) _lastWeek = db.Column(db.String(255), unique=False, nullable=False) _peakPosition = db.Column(db.String(255), unique=False, nullable=False) _weeksOnChart = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, rank, title, artist, lastWeek, peakPosition, weeksOnChart): self._rank = rank self._title = title # variables with self prefix become part of the object, self._artist = artist self._lastWeek = lastWeek self._peakPosition = peakPosition self._weeksOnChart = weeksOnChart @property def rank(self): return self._rank # a setter function, allows name to be updated after initial object creation @rank.setter def rank(self, rank): self._rank = rank # a name getter method, extracts name from object @property def title(self): return self._title # a setter function, allows name to be updated after initial object creation @title.setter def title(self, title): self._title = title # a getter method, extracts uid from object @property def artist(self): return self._artist # a setter function, allows uid to be updated after initial object creation @artist.setter def artist(self, artist): self._artist = artist # check password parameter against stored/encrypted password # def is_subject(self, subject): # if subject == &quot;English&quot; | subject == &quot;Math&quot; | subject == &quot;Foreign Language&quot; | subject == &quot;Elective&quot; | subject == &quot;Civics&quot; | subject == &quot;Economies&quot; | subject == &quot;History&quot; | subject == &quot;Science&quot;: # return result @property def lastWeek(self): return self._lastWeek @lastWeek.setter def lastWeek(self, lastWeek): self._lastWeek = lastWeek @property def peakPosition(self): return self._peakPosition @peakPosition.setter def peakPosition(self, peakPosition): self._peakPosition = peakPosition @property def weeksOnChart(self): return self._weeksOnChart @weeksOnChart.setter def weeksOnChart(self, weeksOnChart): self._weeksOnChart = weeksOnChart # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;rank&quot;: self.rank, &quot;title&quot;: self.title, &quot;artist&quot;: self.artist, &quot;last week&quot;: self.lastWeek, &quot;peakPosition&quot;: self.peakPosition, &quot;weeksOnChart&quot;: self.weeksOnChart } # CRUD update: updates user name, password, phone # returns self def update(self, title=&quot;&quot;, artist = &quot;&quot;, lastWeek = &quot;&quot;, peakPosition = &quot;&quot;, weeksOnChart = &quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(title) &gt; 0: self.title = title if len(artist) &gt; 0: self.artist = artist if len(lastWeek) &gt; 0: self.lastWeek = lastWeek if len(peakPosition) &gt; 0: self.peakPosition = peakPosition if len(weeksOnChart) &gt; 0: self.weeksOnChart = weeksOnChart db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . import requests def initSongs(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; songss = [] url = &quot;https://billboard3.p.rapidapi.com/hot-100&quot; querystring = {&quot;date&quot;:&quot;2022-07-07&quot;,&quot;range&quot;:&quot;1-10&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&quot;, &quot;X-RapidAPI-Host&quot;: &quot;billboard3.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) songs = response.json() for i in range(len(songs)): songss.append(Song(rank = int(songs[i][&#39;rank&#39;]), title = songs[i][&#39;title&#39;], artist = songs[i][&#39;artist&#39;], lastWeek=songs[i][&#39;lastWeek&#39;], peakPosition= songs[i][&#39;peakPosition&#39;], weeksOnChart=songs[i][&#39;weeksOnChart&#39;])) for song in songss: try: object = song.create() print(f&quot;Created new uid {object}&quot;) except: # error raised if object nit created print(f&quot;Records exist or error.&quot;) initSongs() . Created new uid {&#34;rank&#34;: 1, &#34;title&#34;: &#34;As It Was&#34;, &#34;artist&#34;: &#34;Harry Styles&#34;, &#34;last week&#34;: &#34;2&#34;, &#34;peakPosition&#34;: &#34;1&#34;, &#34;weeksOnChart&#34;: &#34;13&#34;} Created new uid {&#34;rank&#34;: 2, &#34;title&#34;: &#34;First Class&#34;, &#34;artist&#34;: &#34;Jack Harlow&#34;, &#34;last week&#34;: &#34;3&#34;, &#34;peakPosition&#34;: &#34;1&#34;, &#34;weeksOnChart&#34;: &#34;12&#34;} Created new uid {&#34;rank&#34;: 3, &#34;title&#34;: &#34;About Damn Time&#34;, &#34;artist&#34;: &#34;Lizzo&#34;, &#34;last week&#34;: &#34;5&#34;, &#34;peakPosition&#34;: &#34;3&#34;, &#34;weeksOnChart&#34;: &#34;11&#34;} Created new uid {&#34;rank&#34;: 4, &#34;title&#34;: &#34;Wait For U&#34;, &#34;artist&#34;: &#34;Future Featuring Drake &amp; Tems&#34;, &#34;last week&#34;: &#34;4&#34;, &#34;peakPosition&#34;: &#34;1&#34;, &#34;weeksOnChart&#34;: &#34;9&#34;} Created new uid {&#34;rank&#34;: 5, &#34;title&#34;: &#34;Jimmy Cooks&#34;, &#34;artist&#34;: &#34;Drake Featuring 21 Savage&#34;, &#34;last week&#34;: &#34;1&#34;, &#34;peakPosition&#34;: &#34;1&#34;, &#34;weeksOnChart&#34;: &#34;2&#34;} Created new uid {&#34;rank&#34;: 6, &#34;title&#34;: &#34;Running Up That Hill (A Deal With God)&#34;, &#34;artist&#34;: &#34;Kate Bush&#34;, &#34;last week&#34;: &#34;9&#34;, &#34;peakPosition&#34;: &#34;4&#34;, &#34;weeksOnChart&#34;: &#34;25&#34;} Created new uid {&#34;rank&#34;: 7, &#34;title&#34;: &#34;Break My Soul&#34;, &#34;artist&#34;: &#34;Beyonce&#34;, &#34;last week&#34;: &#34;15&#34;, &#34;peakPosition&#34;: &#34;7&#34;, &#34;weeksOnChart&#34;: &#34;2&#34;} Created new uid {&#34;rank&#34;: 8, &#34;title&#34;: &#34;Me Porto Bonito&#34;, &#34;artist&#34;: &#34;Bad Bunny &amp; Chencho Corleone&#34;, &#34;last week&#34;: &#34;11&#34;, &#34;peakPosition&#34;: &#34;7&#34;, &#34;weeksOnChart&#34;: &#34;8&#34;} Created new uid {&#34;rank&#34;: 9, &#34;title&#34;: &#34;Heat Waves&#34;, &#34;artist&#34;: &#34;Glass Animals&#34;, &#34;last week&#34;: &#34;10&#34;, &#34;peakPosition&#34;: &#34;1&#34;, &#34;weeksOnChart&#34;: &#34;76&#34;} Created new uid {&#34;rank&#34;: 10, &#34;title&#34;: &#34;Glimpse Of Us&#34;, &#34;artist&#34;: &#34;Joji&#34;, &#34;last week&#34;: &#34;8&#34;, &#34;peakPosition&#34;: &#34;8&#34;, &#34;weeksOnChart&#34;: &#34;3&#34;} . import pandas as pd def read_songs(): with app.app_context(): songs = Song.query.all() json_ready = [song.read() for song in songs] test_result = pd.DataFrame(json_ready) print(test_result) read_songs() . rank title 0 1 First Class 1 2 About Damn Time 2 3 Wait For U 3 4 Jimmy Cooks 4 5 Running Up That Hill (A Deal With God) 5 6 Break My Soul 6 7 Me Porto Bonito 7 8 Heat Waves 8 9 Glimpse Of Us artist last week peakPosition weeksOnChart 0 Jack Harlow 3 1 12 1 Lizzo 5 3 11 2 Future Featuring Drake &amp; Tems 4 1 9 3 Drake Featuring 21 Savage 1 1 2 4 Kate Bush 9 4 25 5 Beyonce 15 7 2 6 Bad Bunny &amp; Chencho Corleone 11 7 8 7 Glass Animals 10 1 76 8 Joji 8 8 3 . def delete_songs(): title = input(&quot;Enter your user id:&quot;) print(title) if title is None: return {&#39;message&#39;: f&#39;User ID is missing&#39;}, 400 with app.app_context(): user = Song.query.filter_by(_title=title).first() rank = int(user.rank) user.delete() print(&quot;Complete delete&quot;) i = 1 while True: if int(rank + i) &gt; 10: break user = Song.query.filter_by(_rank=rank+i).first() if user is None: print(&quot;not found&quot;) break rank_number = user.read()[&#39;rank&#39;] b = rank_number - 1 user.rank = b i += 1 db.session.commit() delete_songs() with app.app_context(): songs = Song.query.all() json_ready = [song.read() for song in songs] print(json_ready) . Complete delete . def update_songs(): title = input(&quot;Enter your user id:&quot;) print(title) if title is None: return {&#39;message&#39;: f&#39;User ID is missing&#39;}, 400 with app.app_context(): user = Song.query.filter_by(_title=title).first() art = input(&quot;please change artist&quot;) if user is None: print(&quot;not found&quot;) user.artist = art db.session.commit() user1 = Song.query.filter_by(_title=title).first() print(user1) update_songs() . First Class {&#34;rank&#34;: 1, &#34;title&#34;: &#34;First Class&#34;, &#34;artist&#34;: &#34;James&#34;, &#34;last week&#34;: &#34;3&#34;, &#34;peakPosition&#34;: &#34;1&#34;, &#34;weeksOnChart&#34;: &#34;12&#34;} . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Title",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] def __str__(self): return json.dumps(self.dictionary) # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$OKc...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$TFf...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$rPm...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$mXm...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$72g...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$OKc...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$TFf...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$leP...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$mXm...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$72g...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$OKcNKHQ6b2AJENPd$67aa30fdba181445956e78c7cfbf7f6ef0639091307ad3cb0da4a5b610045c99&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$TFfkgbLpZRz11jjj$63b708faf599813ccd9d702279f45b93ff54d9a18857c6557cbd8b206888d77f&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$lePZmyOojun2609l$98071fe9ca5b49869d65c82c4c92096d8414ff091e1a98c0df3727f58c479923&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$mXmAfSkUi6j3Qn43$f5ccfebcc3e6a0ade3b21620e09362d435afe57c476c0be2ad27314101ca24d1&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$72g1t8IEmWwCmNpP$2196bf58d2eaf13462c74f27385c2fdd6e89a3116243ee23ee05965fc913065a&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$OKcNKHQ6b2AJENPd$67aa30fdba181445956e78c7cfbf7f6ef0639091307ad3cb0da4a5b610045c99&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$TFfkgbLpZRz11jjj$63b708faf599813ccd9d702279f45b93ff54d9a18857c6557cbd8b206888d77f&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$lePZmyOojun2609l$98071fe9ca5b49869d65c82c4c92096d8414ff091e1a98c0df3727f58c479923&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$mXmAfSkUi6j3Qn43$f5ccfebcc3e6a0ade3b21620e09362d435afe57c476c0be2ad27314101ca24d1&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$72g1t8IEmWwCmNpP$2196bf58d2eaf13462c74f27385c2fdd6e89a3116243ee23ee05965fc913065a&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . import datetime from datetime import date import json today = datetime.datetime.now() class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob @property def age(self): global today if today.month &lt; self._dob.month: return today.year - self._dob.year -1 elif today.month == self._dob.month: if today.day &lt; self._dob.day: return today.year - self._dob.year - 1 else: return today.year - self._dob.year else: return today.year - self._dob.year # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob = date(2004, 12, 14)) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;, dob=date(2005, 12, 14)) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;, dob = date(2004, 12, 14)) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;, dob = date(2006, 12, 14)) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;, dob = date(2007, 12, 14)) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) &#39;&#39;&#39; . Test 1, find user 3 {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Nicholas Tesla&#34;, &#34;uid&#34;: &#34;nick&#34;, &#34;dob&#34;: &#34;12-14-2005&#34;, &#34;age&#34;: 17} * {&#34;name&#34;: &#34;Alexander Graham Bell&#34;, &#34;uid&#34;: &#34;lex&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Eli Whitney&#34;, &#34;uid&#34;: &#34;eli&#34;, &#34;dob&#34;: &#34;12-14-2006&#34;, &#34;age&#34;: 16} {&#34;name&#34;: &#34;Hedy Lemarr&#34;, &#34;uid&#34;: &#34;hedy&#34;, &#34;dob&#34;: &#34;12-14-2007&#34;, &#34;age&#34;: 15} Test 2, change user 3 {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Nicholas Tesla&#34;, &#34;uid&#34;: &#34;nick&#34;, &#34;dob&#34;: &#34;12-14-2005&#34;, &#34;age&#34;: 17} * {&#34;name&#34;: &#34;John Mortensen&#34;, &#34;uid&#34;: &#34;jm1021&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Eli Whitney&#34;, &#34;uid&#34;: &#34;eli&#34;, &#34;dob&#34;: &#34;12-14-2006&#34;, &#34;age&#34;: 16} {&#34;name&#34;: &#34;Hedy Lemarr&#34;, &#34;uid&#34;: &#34;hedy&#34;, &#34;dob&#34;: &#34;12-14-2007&#34;, &#34;age&#34;: 15} .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/03/12/model.html",
            "relUrl": "/2023/03/12/model.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-06-AP-unit2_3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . import json with open(&#39;users.json&#39;) as f: data = json.load(f) username = input(&quot;write your username&quot;) print(username) password = input(&quot;write your password&quot;) print(password) confirm_password = input(&quot;confirm the password&quot;) print(&quot;confirm_password is &quot;, confirm_password) a_dict = {&#39;username&#39;: username, &#39;password&#39;: password} i = 0 if password == confirm_password: while True: if i &gt;= len(data): data.append(a_dict) with open(&#39;users.json&#39;, &#39;w&#39;) as f: json.dump(data, f) print(&quot;register success&quot;) break if username == data[i][&quot;username&quot;]: print(&quot;username already existed&quot;) break else: i += 1 else: print(&quot;password is not matched&quot;) . adf adf confirm_password is adf register success . import json login_user = str(input(&quot;what is your username&quot;)) print(login_user) login_password = str(input(&quot;what is password&quot;)) print(login_password) i = 0 login_users = pd.read_json(&#39;users.json&#39;) while True: if i &gt;= len(login_users): print(&quot;password or username is not matched&quot;) break if (login_password == login_users[&quot;password&quot;][i]) &amp; (login_user == login_users[&quot;username&quot;][i]): print(&quot;Welcome&quot;, login_user) break else: i += 1 . adf adf Welcome adf . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df_csv = pd.DataFrame(dict) print(df_csv) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df_day = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df_day) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df_day.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df_day.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df_day.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest data_duration = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(data_duration.head(10)) print(&quot;--Duration Bottom 10&quot;) print(data_duration.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch_covid(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url_covid = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch_covid = requests.get(url_covid) json_covid = fetch_covid.json() # filter data for requirement covid = pd.DataFrame(json_covid[&#39;countries_stat&#39;]) # filter endpoint for country stats print(covid.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch_covid() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . import pandas as pd import requests def fetch_users(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://dolphin.nighthawkcodingsociety.com/api/users/&quot; fetch_user = requests.get(url) json_user = fetch_user.json() # filter data for requirement df_user = pd.DataFrame(json_user) # print(df) print(df_user.loc[0:5, [&#39;username&#39;, &#39;password&#39;, &#39;age&#39;]]) fetch_users() . username password age 0 james 1234 16 1 bushku Worktime2004 18 2 aneeshd Worktime2003 20 3 deepap aneeshruthi 56 4 delnorte nighthawks 57 5 damod murlideepa 58 . import pandas as pd import requests def fetch_login(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://dolphin.nighthawkcodingsociety.com/api/users/&quot; fetch_user = requests.get(url) json_user = fetch_user.json() username = input(&quot;write your username&quot;) print(username) password = input(&quot;write your password&quot;) print(password) i = 0 while True: if i &gt;= len(data): print(&quot;password or username is not matched&quot;) break if (username == json_user[i][&#39;username&#39;]) &amp; (password == json_user[i][&#39;password&#39;]): print(&quot;Welcome&quot;, username) break else: i += 1 fetch_login() . james 1234 Welcome james . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Notes condensed . Read just produces all the data | Pandas Can sort items inside the json list | Can produce the min and max from the json | You can choose only certin keys to produce certin table | Panda can read multible different data formats and still put them into tables | The pd.DataFrame makes the data look like its in tables using a json file | . Practice Problems . 1Q: A researcher is analyzing data about students in a school district to determine whether there is a relationship between grade point average and number of absences. The researcher plans on compiling data from several sources to create a record for each student. . The researcher has access to a database with the following information about each student. . Last name . First name . Grade level (9, 10, 11, or 12) . Grade point average (on a 0.0 to 4.0 scale) . The researcher also has access to another database with the following information about each student. . First name . Last name . Number of absences from school . Number of late arrivals to school . Upon compiling the data, the researcher identifies a problem due to the fact that neither data source uses a unique ID number for each student. Which of the following best describes the problem caused by the lack of unique ID numbers? . 1A: Students who have the same name may be confused with each other. . 2Q: A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? . (A) A computer program cannot combine data from different files. . (B) Different counties may organize data in different ways. . (C) The number of counties is too large for the program to process. . (D) The total number of rows of data is too large for the program to process. . 2A: B . 3Q: A student is creating a Web site that is intended to display information about a city based on a city name that a user enters in a text field. Which of the following are likely to be challenges associated with processing city names that users might provide as input? . Select two answers. . (A) Users might attempt to use the Web site to search for multiple cities. . (B) Users might enter abbreviations for the names of cities. . (C) Users might misspell the name of the city. . (D) Users might be slow at typing a city name in the text field. . 3A: B and C . 4Q:A database of information about shows at a concert venue contains the following information. . Name of artist performing at the show . Date of show . Total dollar amount of all tickets sold . Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? . (A) Average ticket price . (B) Length of the show in minutes . (C) Start time of the show . (D) Total dollar amount of food and drinks sold during the show . 4A: A . 5Q: A camera mounted on the dashboard of a car captures an image of the view from the driver&#8217;s seat every second. Each image is stored as data. Along with each image, the camera also captures and stores the car&#8217;s speed, the date and time, and the car&#8217;s GPS location as metadata. Which of the following can best be determined using only the data and none of the metadata? . (A) The average number of hours per day that the car is in use . (B) The car’s average speed on a particular day . (C) The distance the car traveled on a particular day . (D) The number of bicycles the car passed on a particular day . 5A: D . 6Q: A teacher sends students an anonymous survey in order to learn more about the students&#8217; work habits. The survey contains the following questions. . On average, how long does homework take you each night (in minutes)? . On average, how long do you study for each test (in minutes)? . Do you enjoy the subject material of this class (yes or no)? . Which of the following questions about the students who responded to the survey can the teacher answer by analyzing the survey results? . I. Do students who enjoy the subject material tend to spend more time on homework each night than the other students do? . II. Do students who spend more time on homework each night tend to spend less time studying for tests than the other students do? . III. Do students who spend more time studying for tests tend to earn higher grades in the class than the other students do? . (A) I only . (B) III only . (C) I and II . (D) I and III . 6A: C . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7411764705882353 LogisticRegression Accuracy: 0.788235294117647 . /home/james/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . . from PIL import Image MyImg1 = &quot;../images/bulb_off.png&quot; img1 = Image.open(MyImg1) img1.show() . Error: no &#34;view&#34; mailcap rules found for type &#34;image/png&#34; WARNING: You don&#39;t seem to have any mimeinfo.cache files. Try running the update-desktop-database command. If you don&#39;t have this command you should install the desktop-file-utils package. This package is available from http://freedesktop.org/wiki/Software/desktop-file-utils/ Can&#39;t call method &#34;get_value&#34; on an undefined value at /usr/bin/mimeopen line 159. Start : This command cannot be run due to the error: The system cannot find the file specified. At line:1 char:1 + Start &#34;/tmp/tmpeynmxjl6.PNG&#34; + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (:) [Start-Process], InvalidOperationException + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from pathlib import Path from IPython.display import Image, display def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;file&#39;: &quot;cush.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image Smile_Emoji = image_data(images=[{&#39;file&#39;: &quot;cush.png&quot;}]) image_display(Smile_Emoji) # display default images from image_data() # default_images = image_data() # image_display(default_images) . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f import glob import os import shutil # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;cush&quot;, &#39;file&#39;: &quot;cush.png&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;continue&quot;, &#39;file&#39;: &quot;continue.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image cush_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;cush&quot;, &#39;file&#39;: &quot;cush.png&quot;}]) # continue_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;continue&quot;, &#39;file&#39;: &quot;tobe.png&quot;}]) default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;file&#39;: &quot;cush.png&quot;} ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) def image_management_add_html_red(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;red_data&#39;].append((average+255, average, average, pixel[3])) # PNG format else: image[&#39;red_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;red_data&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) image_management_add_html_red(image) display(HTML(image[&#39;html_red&#39;])) print() . - meta data -- PNG RGBA Original size: (4624, 3468) Scaled size: (320, 240) -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): if images is None: images = [ {&#39;file&#39;: &quot;cush.png&quot;}, {&#39;file&#39;: &quot;continue.png&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(images): img1 = pilImage.open(images[0][&#39;filename&#39;]) img2 = pilImage.open(images[1][&#39;filename&#39;]) # scale images to the same height baseHeight = 200 hpercent = (baseHeight/float(img1.size[1])) wsize = int((float(img1.size[0])*float(hpercent))) img1 = img1.resize((wsize, baseHeight), pilImage.ANTIALIAS) img2 = img2.resize((wsize, baseHeight), pilImage.ANTIALIAS) # combine images combined_image = pilImage.new(&#39;RGB&#39;, (img1.size[0] + img2.size[0], baseHeight)) combined_image.paste(img1, (0, 0)) combined_image.paste(img2, (img1.size[0], 0)) # prepare output output = {} output[&#39;mode&#39;] = combined_image.mode output[&#39;size&#39;] = combined_image.size output[&#39;pil&#39;] = combined_image output[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(combined_image, &#39;PNG&#39;) return output if __name__ == &quot;__main__&quot;: images = image_data() combined_image = image_management(images[:2]) display(HTML(combined_image[&#39;html&#39;])) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from PIL import ImageFilter, ImageDraw, ImageFont from io import BytesIO import base64 import numpy as np from PIL import ImageFilter def image_data(path=Path(&quot;images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smile Emoji&quot;, &#39;file&#39;: &quot;cush.png&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): img = pilImage.open(image[&#39;filename&#39;]) image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average+120, pixel[3])) else: image[&#39;gray_data&#39;].append((average, average, average)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) def image_management_add_blur_text(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] # Add Gaussian blur img_blur = img.filter(ImageFilter.GaussianBlur(radius=10)) image[&#39;pil_blur_text&#39;] = img_blur image[&#39;html_blur_text&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img_blur, format) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and blurred with FINN text for each image for image in images: # Load and scale the image image_management(image) # Display meta data and original image print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) # Convert the image to grayscale and display it print(&quot; image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) # Blur the image and add text print(&quot; blurred with text &quot;) image_management_add_blur_text(image) display(HTML(image[&#39;html_blur_text&#39;])) . - meta data -- Smile Emoji Internet PNG RGBA Original size: (4624, 3468) Scaled size: (320, 240) -- original image -- . image - . blurred with text . Lossy data . The .JPEG format is a great example of lossy data | The term lossy meaning, if you scale the image or change it, it wont be reversible ## lossless data | As the name suggests, the term lossless means the changes in an image can be made without quailty being lost | A great example of lossless formats are, .png .gif and .raw | . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from PIL import Image merged = Image.new(&#39;L&#39;, (400, 200)) image1 = Image.open(&#39;images/kush.png&#39;) image1.show() image2 = Image.open(&#39;images/continue.png&#39;) image2.show() merged.paste(image1, (0, 0)) merged.paste(image2, (200, 0)) merged.save(&#39;mnist_merged.png&#39;) . /home/james/anaconda3/lib/python3.9/site-packages/PIL/Image.py:945: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( Error: no &#34;view&#34; mailcap rules found for type &#34;image/png&#34; Error: no &#34;view&#34; mailcap rules found for type &#34;image/png&#34; WARNING: You don&#39;t seem to have any mimeinfo.cache files. Try running the update-desktop-database command. If you don&#39;t have this command you should install the desktop-file-utils package. This package is available from http://freedesktop.org/wiki/Software/desktop-file-utils/ WARNING: You don&#39;t seem to have any mimeinfo.cache files. Try running the update-desktop-database command. If you don&#39;t have this command you should install the desktop-file-utils package. This package is available from http://freedesktop.org/wiki/Software/desktop-file-utils/ Can&#39;t call method &#34;get_value&#34; on an undefined value at /usr/bin/mimeopen line 159. Can&#39;t call method &#34;get_value&#34; on an undefined value at /usr/bin/mimeopen line 159. cat: /home/james/.config/wslu/baseexec: No such file or directory rm: cannot remove &#39;/home/james/.config/wslu/baseexec&#39;: No such file or directory Start : This command cannot be run due to the error: The system cannot find the file specified. At line:1 char:1 + Start &#34;/tmp/tmpw6ma75nw.PNG&#34; + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (:) [Start-Process], InvalidOperationException + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand Start : This command cannot be run due to the error: The system cannot find the file specified. At line:1 char:1 + Start &#34;/tmp/tmpqc56tr_q.PNG&#34; + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (:) [Start-Process], InvalidOperationException + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, file, path, baseWidth=320): self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;file&#39;: &quot;cush.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data( file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- cush.png PNG RGBA Original size: (4624, 3468) Scaled size: (320, 240) -- scaled image -- . grey image . . Notes . What are commands you use in terminal to access files? cd, code, vi | . | What are the command you use in Windows terminal to access files? cd, travel | . | What are some of the major differences? Bash is a Linux based software, bash can do alot more things and is more flexible Provide what you observed, struggled with, or leaned while playing with this code. | . | Why is path a big deal when working with images? So you can display images correctly | . | How does the meta data source and label relate to Unit 5 topics? Meta Data is like the meta data inside the html websites | . | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? It is an interactive tool, that can show Images | . | Does this code seem like a series of steps are being performed? Yes, it first gets the images from the path in the Images dict, then scalzes and makes grey scale | . | Describe Grey Scale algorithm in English or Pseudo code? All the pixels are averaged out and turn to a grey/black | . | Describe scale image? What is before and after on pixels in three images? They were either alot bigger or smaller, and got put to 320 | . | Is scale image a type of compression? If so, line it up with College Board terms described? Yes the scaling of an image can be compression. Depending on the format, it can have lossy or lossless compression. | . | . Practice Problems . 1Q: Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? . (A) A lossless compression algorithm can guarantee that compressed information is kept secure, while a lossy compression algorithm cannot. . | (B) A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. . | (C) A lossless compression algorithm typically allows for faster transmission speeds than does a lossy compression algorithm. . | (D) A lossless compression algorithm typically provides a greater reduction in the number of bits stored or transmitted than does a lossy compression algorithm. . | 1A: B . | . 2Q: A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user&#8217;s needs? . (A) Compressing the file using a lossless compression algorithm before uploading it . | (B) Compressing the file using a lossy compression algorithm before uploading it . | (C) Compressing the file using both lossy and lossless compression algorithms before uploading it . | (D) Uploading the original file without using any compression algorithm . | 2A: A . | . 3Q: A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? . (A) Lossless compression of video files will generally save more space than lossy compression of video files. . | (B) Lossless compression of an image file will generally result in a file that is equal in size to the original file. . | (C) Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. . | (D) Sound clips compressed with lossy compression for storage on the platform can be restored to their original quality when they are played. . | 3A: C . | . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Night at the Museum",
            "content": "This is for finn project if we enter the username and password and successfully login, it will show the user’s calender. .",
            "url": "https://jw95z.github.io/JeongWooLee/museum/",
            "relUrl": "/museum/",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "CPT",
            "content": "1 . The input will be the username, password, and other stuff that is inputted in register page. .",
            "url": "https://jw95z.github.io/JeongWooLee/cpt/",
            "relUrl": "/cpt/",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "5.5 and 5.6",
            "content": "Describe PII you have seen on project in CompSci Principles . The most common PII is github login. We have to enter personal email, username, and password for sign in. . What are your feelings about PII and your personal exposure? . I’m so afraid of them A long time ago, there was a person in my family whose identity was exposed, but luckily, he didn’t lose that much money. However, thinking that I will suffer from it later makes me so afraid and I think I need to be careful. . Describe good and bad passwords? What is another step that is used to assist in authentication . A good password is that related their own personal such as face or handprints. There are some lock that uses people face or identity for verification. Password can be hacked from the hacker and sometimes we can infer it. However, it is hard to copy people’s trait. . Try to describe Symmetric and Asymmetric encryption . Symmetric encryption is a type of encryption where only one key (a secret key) is used to both encrypt and decrypt electronic information. | Asymmetric cryptography, also known as public-key cryptography, is a process that uses a pair of related keys – one public key and one private key – to encrypt and decrypt a message and protect it from unauthorized access or use. | . Provide an example of encryption we used in AWS deployment . Encryption we used in AWS deployment - Asymmetric encryption We had to generate the public and secret keys and then add them to our repositories. . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques . My grandma got phishing in Korea. She got a phone call to post money into bank account because there is a car accident with her son. She was so shocked that she put her money as fast as possible. However, it was phishing. My grandma lost 1000 dollars at the phishing. . License Types . Creative Commons Zero: waives copyright interest in a work created and it is dedicated to the world-wide public domain | Open Source MIT License: the author of software with MIT license wants credit | Open Source GPL License: the license lets people do whatever they want with their project, except distributing closed-source versions | . License that I pick . . Reason . Because I like MIT :) .",
            "url": "https://jw95z.github.io/JeongWooLee/5.5and5.6/",
            "relUrl": "/5.5and5.6/",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "College Board Score4",
            "content": "Reporting Category | Scoring Criteria | Comments | Student Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Input will be the username and password and output is to save data in the database and show in API. | 1/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | Has a code segment that shows the arithmetic that calculates the triangle ratios. Shows a list. Has name of variables and describes the data in the list. | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | I think my code is pretty complex because it connects 5 different code. The list will be pulling data from database | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | Has code segment showing the student-developed procedure and has parameter and shows where the SDP is being called. Finally describes the functionality of the program well. | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Describes what identified procedure is and how it contributes to overall functionality | I have sequencing for all the code and iteration for running APi and selection for the login thing in my personal site. | 1/1 | . Testing | Describes two calls that pass different argument and cause different result Conditions tested by each call result of each call | Two different values that one is correct login and another is incorrect login is putting in the login site The conditions will be username and password is correct. Right username and password will be go to main page and wrong will be go different page. | 1/1 | .",
            "url": "https://jw95z.github.io/JeongWooLee/CollegeBoardGrading4/",
            "relUrl": "/CollegeBoardGrading4/",
            "date": " • Feb 10, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Project Plan",
            "content": "Project plan . Login and registration is my plan. Users create their own ID by setting a username and password, and log in to our site using that ID. If possible, I would like to create my own site. What the user types will be put into the database. . Video plan . The video will show the api, database and login process. .",
            "url": "https://jw95z.github.io/JeongWooLee/projectplan/",
            "relUrl": "/projectplan/",
            "date": " • Feb 6, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Project Feature",
            "content": "Overview . My feature in this project is register and login. In this week, I create database and api so that I can interact with Frontend developer. Beside, I made login system. When the user tries to access our site. If the username and password which the user writes is match to any values in database, it will be success to go to our site. . Functionality . I cannot commit my change yet, so I will show my functionality with my picture. . Register . First, this is my api. . | Second, this is my database table made by sqlite . | If I enter username and password, . | username and password will go to the api . | Moreover, there is more data in the database. . | . Login . First go to login page and enter proper username and password, it will be… | It will go to main page | Second, if I enter wrong, it will be… | I have to login again | .",
            "url": "https://jw95z.github.io/JeongWooLee/projectfeature/",
            "relUrl": "/projectfeature/",
            "date": " • Feb 6, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Crowdsourcing",
            "content": "Crowdsourcing is the practice of obtaining services, ideas, or content by enlisting the services of a large number of people, either paid or unpaid, typically via the internet. It involves outsourcing tasks to a large, undefined group of people, rather than to a specific individual or organization. Crowdsourcing is used in a variety of fields, including marketing, design, product development, and problem-solving, to tap into the collective intelligence and expertise of the crowd. The goal of crowdsourcing is to harness the power of many people to accomplish tasks that would be difficult or impossible for an individual or small group to complete. . Obtaining Data via Crowdsourcing . Crowdsourcing is the practice of gathering information or services from a large group of people, often via the internet, for a specific purpose. It enables organizations to quickly and cost-effectively gather large amounts of data. . Advantages of Crowdsourcing . Large and diverse pool of contributors | Can be cost-effective compared to traditional data collection methods | Allows for real-time data collection | Can reach hard-to-access populations or locations | . Disadvantages of Crowdsourcing: . Quality control issues, as data may not be validated | Bias in responses, as individuals may have their own biases | Lack of incentive for contributors to provide accurate data | . Evidence of Crowdsourcing . Crowdsourcing refers to the act of obtaining services or ideas from a large group of people, especially from the online community. There is a lot of evidence to support the use of crowdsourcing as a way to obtain valuable input and resources from a diverse group of individuals. Some of the most common types of evidence for crowdsourcing include: . Increased Innovation: Crowdsourcing often results in a large number of ideas being generated, many of which may be outside the box and not considered by traditional methods. This leads to increased innovation. . | Cost Savings: Crowdsourcing can often be less expensive than traditional methods of gathering information or ideas. This is because the costs are spread among a large number of individuals, rather than being borne by a single entity. . | Increased Speed: Crowdsourcing can often be faster than traditional methods of gathering information or ideas. This is because the process can be done in parallel, with many individuals working on different aspects of the problem at the same time. . | Improved Quality:* Crowdsourcing can result in improved quality, as a large number of individuals can review and provide feedback on the ideas generated. This leads to a more robust and well-vetted solution. . | Wider Reach: Crowdsourcing enables organizations to reach a wider audience than they would be able to through traditional methods. This can result in a more diverse set of ideas and perspectives being gathered. . | .",
            "url": "https://jw95z.github.io/JeongWooLee/crowdsourcing/",
            "relUrl": "/crowdsourcing/",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Computing Bias",
            "content": "What age groups use Facebook vs … TikTok? . In age of 16-24, 60% of people in US use Tiktok. | 23 % of people age to 25 and 34 uses Facebook. I know that many young people are using the Facebook and Tiktok. Tiktok is more dangerous because facebook is usually about the picture but tiktok is more about video. Moreover, young children are using this app and they sometimes do not have proper decision. | . Why do virtual assistants have female voices? . Using a female voice doesn’t seem like a very good plan. Some people may want a female voice or a male voice, but deciding to use a female voice unconditionally can deepen the conflict between a woman and a man. In order to reduce femi culture and male and female problems, I think we need to fix these things first. . Talk about an algorithm that influences your decisions . I think the algorithm is useful. It mainly finds the fields that the user is interested in, and occasionally finds information that I do not know. Without an algorithm, I would have great difficulty finding information. YouTube or Netflix brings me what I want, and Google allows me to enter the site with the information I want. . HP computers are racist . If you look at the video, the black man’s face is not recognized by KMera, but only the white woman’s face is recognized. The camera seems to focus on skin color, but I think this is black discrimination. In addition to white people, there are also black people and Asian people. However, I think it is discrimination to think only of a few people without thinking about those people. And if it’s a company’s work, we should have thought more about consumers’ thoughts. .",
            "url": "https://jw95z.github.io/JeongWooLee/computingbias/",
            "relUrl": "/computingbias/",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Project Plan",
            "content": "Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Input will be the Id, password, and other information to put in the database. Other input is related to login. We have to verify that it’s right Id and password. Program functionality is to save the data in the proper database. Main goal of my program is to make login and register function | 1/1 | 1/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | The variables is username, password, age, weigh, and name. Users put the value in the variables and it will be in the database. The values will be saved as lists to make sure to pick up when it’s necessary. | 1/1 | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | There is a code that shows the list and pull values from it | 1/1 | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | There is a parameter in the function so that it will send the value in the direct order. | 1/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Describes what identified procedure is and how it contributes to overall functionality | It has sequencing, iteration, and selection. Selection is for matching ID and password, and iteration is for pulling all the values in database to match it. I will write sentences that explains how the code works. | 1/1 | 1/1 | . Testing | Describes two calls that pass different argument and cause different result Conditions tested by each call result of each call | I will test it when all the code is written. two call is for login and register. Besides, they also have a different result for it. One is for saving data and other is for verifying Id and password | 1/1 | 1/1 | . Feature . My feature is login and registration. Members who have registered on our site can log in from the login page and enter their account, and those who have not registered on the site will be able to register on the site and create their own new account. . Code plan . The functions I am doing are login and membership registration. Once the user enters information with Python or JavaScript, it is uploaded to the database, and if the ID and password match the database, it exits the login page and returns to the original page. Also, if you already have an ID when signing up for membership, a duplicate ID will not be created, and if the ID and password do not match when you log in, a warning will be issued if the login fails. . Video plan . In my video, I’ll show you how the site saves the input values ​​to the database and navigates to another page when the login is successful. If there is login information, the input will fail, and if the login is not a value in the database, the login will fail. .",
            "url": "https://jw95z.github.io/JeongWooLee/project_plan/",
            "relUrl": "/project_plan/",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Test Score",
            "content": ". Test correction . Question 21 . . I was idiot because I miss the i = 1 in the behind of iteration. The function will repeat forever due to i. I will be always 1 so it will not reach to the end of repetition. Sum will not displayed because following code is not ended. . Question 29 . First, the triangle will move forward 3 times so it will be forth square, turn it to right and n will be 2. Second, n is 2 so the repetition will work for 2 times and it will go two block up. The block will turn into left side and n will be 1 by abstracting 1 from 2. Last, the triangle will emigrate into middle block because n is one and moving forward only works for one time. The triangle has to be turn left because the function is still not ended. Finally, n is equal to 0 so there is no more iteration. . . Question 43 . A: Simulations are mostly used for the unknown things or situation. They will run the simulation to verify whether it is safe or not. After simulation is success, people build the object or system which is identify by the simulation. B. There are lots of simulation in this world. Some has to be really accurate and precise, but some can be simple. Therefore, not all simulation has to be ran by powerful computer. Some of then can be run by my computers too. D. Changing input parameter is not difficult. You just have write the other input parameter in the code. . True answer C. Simulation is very useful for objects or systems that are still under development. | . Question 45 . In this case, I don’t know the word heuristic. Now I know the what does the heuristic mean. And heuristic approach is useful when the problem is not solved and not proper situation is given. . Reflection . I made a lot of mistakes because I took this test at 3 am. Looking at the results of this test now, I think I was a little crazy at the time. The reason I saw it at dawn was until January 31st, but I saw it as January 24th, so I had no choice but to do it quickly. If you saw it in normal conditions, you might have gotten a good test score. And it seems difficult for me to ask about definition in particular. There are two problems that I misinterpreted and got wrong. .",
            "url": "https://jw95z.github.io/JeongWooLee/mcq2/",
            "relUrl": "/mcq2/",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "5.1 and 5.2 blog",
            "content": "Notes from 5.1 . Not every effect of computing innovation is anticipated in advance. | Single effects can be viewed as both beneficial and harmful by different people or even by the same person. ex) you can think Wii is great, but sometimes it is dangerous. | People create computing innovations. Even though 3D printer can make itself, someone has to make original 3D printer. Also, human have to put the parts together which are made by 3D printer. | . | Advances in computing have generated and increased creativity in other fields such as medicine, engineering, communications, and the arts Example of beneficial and harmful effects . | Multirotor benefit: Deliveries, finding people, aerial photography is easy | harmful: privacy concerns, flying some zone is illegal and dangerous | . | Wii controller benefit: make people active due to playing video games | harmful: Broken TV’s injuries | . | . Internet . Benefits Easy to communicate with people in a far distance | They can share their information quickly and securely | . | harmful People have a less sleep because of internet Dopamine feedback loops | Sleep deprivation, depression, anxiety, impulsivity | . | . | Computing innovation can be used in ways that their creators had not originally intended. | Responsible programers try to consider the unintended ways their computing innovation can be used and the potential beneficial and harmful effects of these new uses | . Microtransactions . benefits Free game/apps | . | harmful cosmetics, paywall to functionality, sometimes pay-to-win | gold, v-bucks, coins, chips, SBUX | lead to overpaying because they didn’t how much they use in the games | . | Some of the ways computing innovations can be used may have a harmful impact on society, economy, or culture | It is not possible for a programmer to consider all the ways a computing innovation can be used. | Rapid sharing of a program or running a program with a large number of users can result in significant impacts beyond the intended purpose or control of the programmer | . Digital divide . The digital divide refers to differing access to computing devices and the internet, based on socioeconomic, geographic, or demographic characteristics . Socioeconomic: how much money comes into the household per year | Geographic: if you live where there is not many people, the ISPs will not provide high speed internet to your home. | Demographic includes: age: If you are little older and have no cellphone or any access, it doesn’t matter to you | religion: when your friend live in a long distance and don’t have computers and cars, but they still live and do things Country . | . | Computers are not common in rural areas. | In some countries, only few people can use the internet. | The internet is used to protect and advocate the government | There is high level of surveillance on the internet to protect the government | The digital divide can only affect both groups and individuals. | The digital divide raises issues of equity, access, and influence, both globally and locally. | The digital divide is affected by the actions of individuals, organizations, and governments | . Benefits . You can decide what exercises you do at the gym. What you think in your mind and what you write can lead to different results. I also put off the things I think in my heart, but if I write down what I have to do in a notebook, I feel more motivated to do it. | Our project can know what situation the user is in now. The biggest problem with exercise is that you still think you’re okay. If you know your weight and realize the seriousness of it, you can motivate yourself to exercise. | In our project, there are tips on what kind of exercise to do. Users can easily manage their health by exercising while referring to these tips. | . Harmful . The downside of these sites is that each person’s characteristics are different. Some people need a lot of exercise and some people shouldn’t. However, since the site is based on ordinary people, few people can refer to the contents of this site. | Another downside is that the site has no way of verifying that the user has exercised. For example, if you say you’re going to do some exercise but don’t do it because you don’t have enough time, it becomes a habit and you don’t exercise more and more. | On the contrary, seeing your weight can make you feel stressed and overeat. Original truth is cruel. | . What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . Internet block . Internet blockers make students more focused in class. Since you can’t do anything with a computer, you have nothing to do but study. The downside of internet blockers is that they reduce what you can do. In this day and age, a lot of things go back to the internet. If you don’t have internet, you won’t be able to watch the videos or Kahoot you need for class. . Lack of admin password . Teachers can easily get into their accounts. If the password is long and complex, it takes time to write and it is difficult to memorize it. However, it is easy to expose your password. In particular, when exposed to students, many problems arise. . What concerns do you have personally about the digital divide? For yourself or for others . If the information gap between countries occurs, joint projects with other countries become impossible. For example, Europe has great difficulties in developing spacecraft because the units they use are different. But sometimes the information gap is good. As the information society becomes more advanced, the greater the information gap, the farther the difference between developed and underdeveloped countries becomes. . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . The dopamine problem originated in World of Warcraft. He gave up on his school grades and his health because he was so immersed in the game. Games make people focus on games and make them happy. This would definitely be a plus for the game. However, if you become too addicted to the game, it can harm your life. This is probably the downside of the game. I also really like games, but in the old days, I played games with my friends, even ruining my school grades. As a result, my middle school grades have some b’s. So it seems that I have distanced myself a little from my parents. .",
            "url": "https://jw95z.github.io/JeongWooLee/5.1and5.2/",
            "relUrl": "/5.1and5.2/",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "College Board Score3",
            "content": "Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Program has both an input and output. It describes it’s purpose as finding information about a triangle and its function as showing the triangle ratios of a triangle that has been inputted. | 1/1 | 0/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | Has a code segment that shows the arithmetic that calculates the triangle ratios. Shows a list. Has name of variables and describes the data in the list. | 1/1 | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | Has code segment shoring the complexity but doesn’t explain it. They just gave another piece of code. | 0/1 | 0/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | Has code segment showing the student-developed procedure and has parameter and shows where the SDP is being called. Finally describes the functionality of the program well. | 1/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Describes what identified procedure is and how it contributes to overall functionality | Has sequencing, selection but no iteration or explanation. | 0/1 | 0/1 | . Testing | Describes two calls that pass different argument and cause different result Conditions tested by each call result of each call | Doesn’t have two calls to the selected procedure only has noe. It does describe the condition and identify the result however. | 0/1 | 0/1 | . Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Met all the criteria for this section. Has input and output and describes the function and purpose. The function is placing blocks that move and the purpose is entertainment. | 1/1 | 1/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | Met all the criteria for this section. Has proper code segments explaining how data is stored and remebered from the users input. The blocks moving. It does fulfill the purpose. Shoes name of variable and describes what the data is contained in. | 1/1 | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | Has code segment showing a list and explains how it could be different. | 1/1 | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | This response describes the code segment but it never had a clear code segment depicted that showed the student developed procedure with 1+ parameter or SDP being called. | 0/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Has sequencing and selection but doesn’t have iteration and doesn’t explain. | 0/1 | 1/1 |   | . Testing | Describes two cells that pass different argument and cause different result Conditions tested by each cell result of each call | All tests done correctly | 1/1 | 1/1 | . Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Demonstrates all criteria | 1/1 | 1/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | Demonstrates all criteria. | 1/1 | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | Has code segment that shows list but doesn’t explain it very well. | 0/1 | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | Demonstrates all criteria. Has parameter, explains it and shows where the STP is being called. | 1/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Describes what identified procedure is and how it contributes to overall functionality | Has sequencing, selection, iteration, and explains how the alogorithm implements them. | 1/1 | 1/1 | . Testing | Describes two calls that pass different argument and cause different result Conditions tested by each call result of each call | All tests done correctly. | 1/1 | 1/1 | . Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Meets all criteria. | 1/1 | 0/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | Meets all criteria. | 1/1 | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | Explains the list but the list in not sufficient. | 0/1 | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | Has code segment showing where the STP is being called and describes the procedure and the contribution the the function but doesn’t have a STP with one parameter. | 0/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Selection Describes what identified procedure is and how it contributes to overall functionality | Has selection, sequencing, iteration, and goes over how each of them works. | 1/1 | 1/1 | . Testing | Describes two cells that pass different argument and cause different result Conditions tested by each cell result of each call | All tests done correctly. | 1/1 | 1/1 | . Review . Discrepancies in your scoring versus the ap scoring My score and college score are very similar. I think I’m really talented in Professor or scoring student’s score. | . | what your program will need to fulfill all requirements list has to be put to fulfill all requirements. Also, sequencing, iteration, selection too. | . | why a submission may have failed to meet the standard I think because it has some missing subjects. | . | .",
            "url": "https://jw95z.github.io/JeongWooLee/CollegeBoardGrading3/",
            "relUrl": "/CollegeBoardGrading3/",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Title",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] def __str__(self): return json.dumps(self.dictionary) # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$OKc...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$TFf...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$rPm...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$mXm...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$72g...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$OKc...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$TFf...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$leP...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$mXm...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$72g...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$OKcNKHQ6b2AJENPd$67aa30fdba181445956e78c7cfbf7f6ef0639091307ad3cb0da4a5b610045c99&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$TFfkgbLpZRz11jjj$63b708faf599813ccd9d702279f45b93ff54d9a18857c6557cbd8b206888d77f&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$lePZmyOojun2609l$98071fe9ca5b49869d65c82c4c92096d8414ff091e1a98c0df3727f58c479923&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$mXmAfSkUi6j3Qn43$f5ccfebcc3e6a0ade3b21620e09362d435afe57c476c0be2ad27314101ca24d1&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$72g1t8IEmWwCmNpP$2196bf58d2eaf13462c74f27385c2fdd6e89a3116243ee23ee05965fc913065a&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$OKcNKHQ6b2AJENPd$67aa30fdba181445956e78c7cfbf7f6ef0639091307ad3cb0da4a5b610045c99&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$TFfkgbLpZRz11jjj$63b708faf599813ccd9d702279f45b93ff54d9a18857c6557cbd8b206888d77f&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$lePZmyOojun2609l$98071fe9ca5b49869d65c82c4c92096d8414ff091e1a98c0df3727f58c479923&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$mXmAfSkUi6j3Qn43$f5ccfebcc3e6a0ade3b21620e09362d435afe57c476c0be2ad27314101ca24d1&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$72g1t8IEmWwCmNpP$2196bf58d2eaf13462c74f27385c2fdd6e89a3116243ee23ee05965fc913065a&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . import datetime from datetime import date import json today = datetime.datetime.now() class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob @property def age(self): global today if today.month &lt; self._dob.month: return today.year - self._dob.year -1 elif today.month == self._dob.month: if today.day &lt; self._dob.day: return today.year - self._dob.year - 1 else: return today.year - self._dob.year else: return today.year - self._dob.year # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob = date(2004, 12, 14)) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;, dob=date(2005, 12, 14)) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;, dob = date(2004, 12, 14)) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;, dob = date(2006, 12, 14)) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;, dob = date(2007, 12, 14)) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) &#39;&#39;&#39; . Test 1, find user 3 {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Nicholas Tesla&#34;, &#34;uid&#34;: &#34;nick&#34;, &#34;dob&#34;: &#34;12-14-2005&#34;, &#34;age&#34;: 17} * {&#34;name&#34;: &#34;Alexander Graham Bell&#34;, &#34;uid&#34;: &#34;lex&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Eli Whitney&#34;, &#34;uid&#34;: &#34;eli&#34;, &#34;dob&#34;: &#34;12-14-2006&#34;, &#34;age&#34;: 16} {&#34;name&#34;: &#34;Hedy Lemarr&#34;, &#34;uid&#34;: &#34;hedy&#34;, &#34;dob&#34;: &#34;12-14-2007&#34;, &#34;age&#34;: 15} Test 2, change user 3 {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Nicholas Tesla&#34;, &#34;uid&#34;: &#34;nick&#34;, &#34;dob&#34;: &#34;12-14-2005&#34;, &#34;age&#34;: 17} * {&#34;name&#34;: &#34;John Mortensen&#34;, &#34;uid&#34;: &#34;jm1021&#34;, &#34;dob&#34;: &#34;12-14-2004&#34;, &#34;age&#34;: 18} {&#34;name&#34;: &#34;Eli Whitney&#34;, &#34;uid&#34;: &#34;eli&#34;, &#34;dob&#34;: &#34;12-14-2006&#34;, &#34;age&#34;: 16} {&#34;name&#34;: &#34;Hedy Lemarr&#34;, &#34;uid&#34;: &#34;hedy&#34;, &#34;dob&#34;: &#34;12-14-2007&#34;, &#34;age&#34;: 15} .",
            "url": "https://jw95z.github.io/JeongWooLee/2023/01/22/model.html",
            "relUrl": "/2023/01/22/model.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "College Board Score2",
            "content": "Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | I think the purpose and input are clear, but how it works is not clear. You should write more about this | 0/1 | 0/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | I see the names or variables that the student represents. However, I cannot see the code that the student has to show | 0/1 | 0/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | It shows the list about animals and its picture. The student describes about the list and what happens while not using list. | 1/1 | 0/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | The Program has a parameter and it affects the functionality but doesn’t have a code segment showing this parameter or describe it. | 0/1 | 0/1 | . Algorithm Implementation | Sequencing Selection Iteration Describes what identified procedure is and how it contributes to overall functionality | I saw selection and iteration on this code, but one is missing. I cannot see sequencing in this code. Also, the students didn’t explain about functionality | 0/1 | 0/1 | . Testing | Describes two calls that pass different argument and cause different result Conditions tested by each call result of each call | Fist call is about correct answer and second one is about wrong answer. There is two conditions which is required. Lastly, it tells the results about first call and second call | 1/1 | 1/1 | . Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Input and Output are well shown in this response and also the purpose. The students writes how the code works in detail. | 1/1 | 1/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | The first code is about getting three variables by putting values on them. And the next code is choosing the word for actually writing in the poem. There are three variables; nounS, nounW, nounT | 1/1 | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | The response is good of telling specific details about the list. It shows how the list is managing complexity in the program | 1/1 | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | Demonstrates all criteria. Has parameter, explains it and shows where the STP is being called. | 1/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Selection Describes what identified procedure is and how it contributes to overall functionality | Has sequencing, selection, iteration, and explains how the algorithm implements them. | 0/1 | 1/1 | . Testing | Describes two cells that pass different argument and cause different result Conditions tested by each cell result of each call | First and Second Call are well defined and the result too. There are also two conditions tested by first and second | 1/1 | 1/1 | . Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video I can see the input, but there is no output. In addition, program functionality is not explained in the response. | 0/1 | 0/1 |   | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | Requirements are all met. Two codes that are related to list is shown as a image. | 1/1 | 0/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | There is no code segment. However, there is explanation about the list and what will happen when the student do not use the list. | 0/1 | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | Has code segment showing where the STP is being called and describes the procedure and the contribution the the function but doesn’t have a STP with one parameter. | 0/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Describes what identified procedure is and how it contributes to overall functionality | This is very good. I see sequencing, selection, and iteration in the description. Besides, the students explains well about the procedure. | 1/1 | 1/1 | . Testing | Describes two calls that pass different argument and cause different result Conditions tested by each call result of each call | Fist call is about updating on screen and second is about calling more information. There is result of two calls and other two conditions. | 1/1 | 1/1 | . Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Input and Output are clear, also purpose of the program too. The student writes long sentence to explain about functionality. | 1/1 | 1/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | I cannot see the code that represented the lists, but I can see lots of variables. | 1/1 | 0/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | It didn’t include program code segment that shows a list being used to manage complexity in the program | 0/1 | 0/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | There are two code segments which is required and I can see some parameters in the code. This response meets all the requirements. | 1/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Selection Describes what identified procedure is and how it contributes to overall functionality | All requirements are met, so it has to be perfect. | 0/1 | 1/1 | . Testing | Describes two cells that pass different argument and cause different result Conditions tested by each cell result of each call | First call and second are not specific. It only tells that it is right or wrong. All requirements except first one are met. | 0/1 | 0/1 | . Review . Discrepancies in your scoring versus the ap scoring My score and college score are very different. I think I’m not talented in Professor or scoring student’s score. | . | what your program will need to fulfill all requirements list has to be put to fulfill all requirements. Also, sequencing, iteration, selection too. | . | why a submission may have failed to meet the standard I think because it has some missing subjects. | . | .",
            "url": "https://jw95z.github.io/JeongWooLee/CollegeBoardGrading2/",
            "relUrl": "/CollegeBoardGrading2/",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "College Board Score",
            "content": "Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | Input and Output are clear. When the person enter three input, the degree of triangle with three inputs and table of sin, cos, tanz will be come out. However, the purpose is not that long. I want this student to write more specific. It would be better when this student writes why he makes or what he want to get. | 0/1 | 0/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | Two code segments are shown. One is for the list and other is for how to use the list in procedure. This student defines the list well and explain how the list uses by giving the example in those codes. | 1/1 | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | The code segment that contains list is not included in this response. There is a word about why the list makes more complicate. | 0/1 | 0/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | This student shows the code with three parameter and explains about the function called ratioCalculate. Besides, he shows full code so that it can make teacher to understand easily. | 1/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Describes what identified procedure is and how it contributes to overall functionality | This student uses the word conditionals, so I can see that student utilizes the selection. And there is order because A, B, and C have to be inputted. This student also portrays the steps very easily to comprehend, so person like me can also read this. | 1/1 | 1/1 | . Testing | Describes two calls that pass different argument and cause different result Conditions tested by each call result of each call | Results of each call are indicated and Conditions too. Inside the conditions, there are parameters too. At last, this students also expresses two calls which are ratioCalculate(3.0, 4.0, 5.0) and ratioCalculate(1.2, 2.3, 3.4) and have different arguments. | 1/1 | 1/1 | . Reporting Category | Scoring Criteria | Comments | Student Score | College Board Score | . Program Purpose and Function | Input Program Functionality Output Main goal in the program Functionality demonstrated in video Input and output shown in the video | The input will be the initial shape, program functionality is followed by John Conway’s Game of life, and output is the altered shape. The purpose is to serve entertainment to user. Functionality is well shown in this video. | 1/1 | 1/1 | . Data Abstraction | Two code segments - one that shows how data has been stored in this list (or other collection type) - one that shows the data in this same list being used as part of fulfilling the program’s purpose Name of the variables representing the list being used in response what the data contained in this list is representing in the program | The codes reveal three list: StartGrid, currentGrid, and nextGrid. I think nextGrid can intimate the purpose of this project. I can see one variable in this code. It is written as gridsize. | 1/1 | 1/1 | . Managing Complexity | a program code segment that shows a list being used to manage complexity in the program How list manages complexity by explaining why the list have to written or what code will change without lists | In this response, there are list that contains 10800 items. The writer refers that list is necessary in this code because it is hard to write those numerous numbers. | 1/1 | 1/1 | . Procedural Abstraction | Two program code segment - One provident that shows at least one effect parameter in the procedure - one showing about calling of student’s procedure | I can see the parameters in code. | 1/1 | 1/1 | . Algorithm Implementation | Sequencing Selection Iteration Selection Describes what identified procedure is and how it contributes to overall functionality | I see sequencing and iteration in the code, but I cannot see selection. He explains definition of procedure and how it work in the code. This procedure that the student explained is about duplication and grid | 0/1 | 1/1 | . Testing | Describes two cells that pass different argument and cause different result Conditions tested by each cell result of each call | There are two calls and the students classify each two of those. Also, there are two conditionals that have different arguments. Lastly, results of each two calls are written in the last line. | 1/1 | 1/1 | .",
            "url": "https://jw95z.github.io/JeongWooLee/CollegeBoardGrading/",
            "relUrl": "/CollegeBoardGrading/",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Grades",
            "content": "Section | grades | Lesson | comments | hacks | . 3.1 ~ 3.2 | 0.8/1.0 | Lesson | I didn’t know the date to submit , so I got late. | 3.1-3.2 | . 3.3 ~ 3.4 | 0.9/1.0 | Lesson | I just only do what I supposed to do. I didn’t add details | 3.3-3.4 | . 3.8 and 3.10 | 2.0/2.0 | Lesson | I do my hacks creatively so that I can get a perfect score | 3.8and3.10 | . 3.9 and 3.11 | 0.95/1.0 | Lesson | My hacks were perfect, but the clear button on calculator did not work. Later, I knew that I didn’t put my function in clear button | 3.9and3.11 | . 3.12 ~ 3.13 | 0.99/1.0 | Lesson | I did all of my hacks, but I forgot that there is an extra thing and I did not do that. Therefore, I lost 0.01 points | 3.12-3.13 | . 3.14 ~ 3.15 | 0.95/1.0 | Lesson | I completed my all hacks, but I have to put detailed notes | 3.14-3.15 | . 3.16 | 1.0/1.0 | Lesson | I completed my all hacks. | 3.16 | . 3.17~3.18 | 0.93/1.0 | Lesson | I am not sure why I got 0.93 in this subject | 3.17-3.18 | . Proof of 3.1 ~ 3.2 . grade . Proof of 3.3 ~ 3.4 . grade . Proof of 3.8 and 3.10 . grade . Proof of 3.9 and 3.11 . grade . Proof of 3.12 ~ 3.13 . grade . Proof of 3.14 ~ 3.15 . grade . Proof of 3.16 . grade . Proof of 3.17 ~ 3.18 . grade .",
            "url": "https://jw95z.github.io/JeongWooLee/grades/",
            "relUrl": "/grades/",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Section 3.17 ~ 3.18",
            "content": "Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. | . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. | . def Collatz(n): print(n) if n == 1: return 1 elif n%2: Collatz(3*n+1) else: Collatz(n//2) x = int(input()) Collatz(x) . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. | . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. | . Notes . Problem had been posed by L.Collatz in 1937. There are some cycles that repeat forever. For example, there are (4, 2, 1), (-2. -1), (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34). Numbers that produced by Collatz are called hailstone number. Conway proved that the length of the cycle must be less than 400 and he also demonstrate that Collatz-type problems can be formally undecidable. Collatz algorithm has been tested and found that all number of range(1, 19*2^(58)) will reach to 1. The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). Algorithm efficiency is the aspect of programming that measure the step of codes. It is more useful when the codes are small, but have a more function. The shorter code seems to be better to see and pace of calculation of computer will be way more faster than the long code. That&#39;s why people made procedure for not repeating codes. . def collatz1(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) def collatz2(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input(&#39;Enter i: &#39;)) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz1(i) l = collatz2(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Invaid selection, try again: Invaid selection, try again: Sequence: 4 2 1 Number of iterations: 2 . Other code . numList = [] b = &quot;&quot; while True: try: i = int(input(&quot;put your number: &quot;)) break except ValueError: print(&quot;Please enter your number again: &quot;) def collatz1(a): while True: numList.append(int(a)) if a%2 == 0: a = a/2 elif a == 1: break elif a%2 == 1: a = 3*a+1 collatz1(i) for i in range(len(numList)): b += str(numList[i]) b += &quot;, &quot; print(b) print(len(numList)) . 5, 16, 8, 4, 2, 1, 6 . And the other code . def wu(x): print(x) if x == 1: return 1 if x % 2 == 1: return wu(3*x+1) else: return wu(x//2) n = int(input()) wu(n) . 5 16 8 4 2 1 . 1 . Hack 2 . In effective . import random sel = [&#39;scissor&#39;, &#39;rock&#39;, &#39;paper&#39;] result = {0: &#39;win.&#39;, 1: &#39;lose.&#39;, 2: &#39;draw.&#39;} def checkWin(user, com): if not user in sel: print(&#39;you wrote wrong. type it again&#39;) return False print(f&#39;player 1 ( {user} vs {com} ) com&#39;) if user == com: state = 2 elif user == &#39;scissor&#39; and com == &#39;rock&#39;: state = 1 elif user == &#39;rock&#39; and com == &#39;paper&#39;: state = 1 elif user == &#39;paper&#39; and com == &#39;scissor&#39;: state = 1 else: state = 0 print(result[state]) return True print(&#39; n-&#39;) while True: user = input(&quot;rock, scissor, paper : &quot;) com = sel[random.randint(0, 2)] if checkWin(user, com): break print(&#39;- n&#39;) . Effective code . import random game = [&quot;rock&quot;, &quot;scissor&quot;, &quot;paper&quot;] winning = [&quot;paper&quot;, &quot;rock&quot;, &quot;scissor&quot;] i = 0 def gameStart(a): randomNumber = random.randrange(0,2) randomOne = game[randomNumber] gamer = str(input(&quot;what will you do&quot;)) print(gamer) print(randomOne) while True: if winning[a] == gamer: break else: a += 1 if randomNumber == a: print(&quot;You win&quot;) else: if randomNumber == (a+1)%3: print(&quot;Lose&quot;) elif randomNumber == (a+2)%3: print(&quot;Draw&quot;) pre = input(&quot;Do you want a game?[yes/no]&quot;) if pre == &quot;yes&quot;: gameStart(i) randomNumber = random.randrange(0,2) else: print(&quot;Goodbye&quot;) gameStart(i) . rock scissor You win paper rock You win Goodbye . Reason . The second code is more effective because I use list instead of comparing rock scissors paper. rock wins scissors, paper wins rock, and scissor wins paper. It looks like pattern to me. So I change it to the list. If there are A list represented [&quot;rock&quot;, &quot;scissor&quot;, &quot;paper&quot;] and B list represented [&quot;paper&quot;, &quot;scissor&quot;, &quot;rock&quot;], A[i] always win B[i]. Also I used the loops so that player can play rock scissor paper with several times. The code are similar, but second one brings up more effect. Therefore, I think the effective one is the second code. . Hack 3 . Explain Algorithm effectivity . An algorithm is more efficient when its complexity is low. That is, algorithms that take a short time to run or use a small amount of memory are efficient. For example, there are code that multiply 5 at 6 and code that add 6 five times. It will be effective when we use 6*3. There are several codes which lead to same result. However, the most simple and shortest one will be the best code between it. There is no answer in these days. Sometime this is right or sometime this way is wrong. . Hack 4 . Code . from datetime import datetime tasks = [&quot;wake up&quot;, &quot;go to school&quot;] def things_to_do(tasks): for task in tasks: if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) print(datetime.today().strftime(&quot;%A&quot;)) if datetime.today().weekday() == 5 | 6: print(&quot;Today we have no school, I will sleep all day&quot;) else: things_to_do(tasks) . Friday 4 Waking up now! Going to school now! . comments . I also put the time too. I always rest in weekend, so my schedule is different with weekday. | .",
            "url": "https://jw95z.github.io/JeongWooLee/hacks_from_other_lesson/2022/12/14/17and18.html",
            "relUrl": "/hacks_from_other_lesson/2022/12/14/17and18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Note from computer science",
            "content": "Career of Kathyleen Beveridge . She was born in Vietnam and she undergrad at Santa Clara. She studied aboard in Spain. She didn’t have traditional education from parent or teacher. She invested as a banker at college. So she study about stock. However, she thought serving is not of her business. She changed her major to high technology. She does software engineering in high tech company. . Her favorite Poem: my mission in life is not nearly to survive, but to thrive, and share my passion company mission statements . | HP Inc: create technology that makes lif better for everyone, every where | Qualcomm: Inventing the tech the world loves | Thermo Fisher Scientific: Enable our customers to make the world healthier cleaner and safer. world leader in serving science . | 100,000 colleagues | 7000 R&amp;D scientists/engineers | $1.5B invested in R&amp;D | $40B in revenue | She want us to bring to their company and work together and make a huge impact in the world. | . About Kris Porter . Livermore hight school alum, He enjoyed STEM classes. He went to UCLA for Electrical Engineering. He got first class in computer science, but he failed. Later, he got master degrees in Electrical engineering. He graduated right after the recession 2008 and learned Linux Os. . Career of Him . He is a Software Engineer. He graduated school, and he work for fixing macs at the shop. He started up doing Systems Engineer. He spent some time on computer security, but he could not focus on it. Then he worked NBC universal, Streaming media infrastructure. He got introduction to DevOps, so he transferred to Qualcomm(thank to Mr.Mortensen) Now, he is working at Twitter. . Research . center for Embedded Networked Sensors | Networked Info Mechanical system(NIMS) | . Continuous Learning highlights . CCNA training | machine learning and Deep learning (Qualcomm) | . project that he worked . streaming media infrastructure for the 2012 olympics game | analytics infrastructure projects(LocationSmart, qualcomm) | twitter projects: New DataCenter Deployment | Migrating HomeTimeline to GraphQL new data center deployment | . | . Question . Are you still in Twitter? answer: Kris hosted a git lab at Qualcomm. | . | How is Agile Methodology Used in Real Life Companies? answer: Planning with groups can coordinate the codes and The concept of agile is important because they did projects in a span of 6-12 months. | . | What is the most important skill to have in the tech? answer: We have to keep learning something in code, try to be used at other programming language, “Know what to learn” –&gt; be always to be prepared to learn something | . | How do you think learning to code will benefit the business industry? answer: Learning how to code is a mindset and teaches critical thinking and problem solving. Review how and why you came to that conclusion. Create a nice home that ultimately solves the problem. | . | How do you think your technical knowledge can help you with a variety of other jobs not related to software engineering? She thinks thinking tech knowledge and solving problem can be helpful in any work. Think “How many car had lost in last year?” She said she doesn’t need the answer. She wanted students to think about this question and have a solution of it. | . | Encouragement . All the company have different languages. So we have to learn. Don’t be concern about the news The learning is always contained. Be adapted . Reflections . I knew that the failure in the college is not important , but entering good college is super important. Yesterday, two speakers came to our school and talk about their career. Kathyleen who had worked in Qualcomm wanted to be banker, but she later succeed in computer science. Another speaker Kris, he failed some classes in the college. However, they have same traits that they went to good college. After the lecture, I changed my mind to enter good college. . Sorry teacher . I only write little becaus my english is bad. Sorry about this. .",
            "url": "https://jw95z.github.io/JeongWooLee/notes/",
            "relUrl": "/notes/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Section 3.16",
            "content": "Vocab . Simulation: an imitation of a situation or process | Ex) testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . | Experiment: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . Example . For example, suggesting to build snowman can be made by simulation. | . import time Elsa = False print(&quot;Do you want to build the snowman?:&quot;) time.sleep(2) if Elsa == True: b = &#39;Yes&#39; elif Elsa == False: b = &quot;Go Away&quot; print(b) . Do you want to build the snowman?: Go Away . Experiment . . Notes . Advantage of simulation Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantage of simulation Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . Hack 1 . writing example of simulation . The simulation I am trying to write is Russian Roulette. After putting only one bullet into a six-shot revolver, turning the cylinder, and turning each other, they put the gun to their head and pull the trigger. If there are 1, 2, 3, or 6 factors of 6 playing the game, the odds of dying are the same. With any other number, the number of 6 attempts cannot be divided evenly, so there will inevitably be a person with a high probability of dying. If the person in front succeeds, the probability that the person behind will die increases, but since the probability of the person in front dying first and the probability of not dying because I shoot are combined, the probability of dying at the start of the game is fair. If no one has died by the 5th, the 6th chamber will of course contain bullets. There is also a rule to rotate the cylinder for each shot. In this case, regardless of the number of people, there is an equal 1/6 chance of death each turn, but if you can run away without shooting when all opponents are dead, the later you shoot, the more advantageous it is. . Guided question What make it simulation? The random value of the bullet can make simulation. If the bullet was in the first round, the first person will die, but if the bullet is in the last round, the last person will die. | What are it’s advantages and disadvantages? Running this simulation gives you an idea of ​​what might happen. However, the disadvantages of this simulation is that it&#39;s not useful in your life. Even if the number of cases is known, there is no way to use it, so it is very useless in real life. | In your opinion, would an experiment be better in this situation? I think it is better to be an experiment, because we have to gather multiple people for doing this game. | . | . . import random def enter(): while True: n = input(&quot;shoot&quot;) if n == &quot;&quot;: break if __name__ == &quot;__main__&quot;: bullet = [&quot;alive&quot;, &quot;alive&quot;, &quot;alive&quot;, &quot;alive&quot;, &quot;alive&quot;, &quot;death&quot;] i = 5 while True: idx_bullet = random.randint(0, i) enter() a = bullet.pop(idx_bullet) print(a) if a == &quot;death&quot;: break i = i - 1 . alive death . Hack 2 . Quiz . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack 3 . Rolling Dices . pick a random number between 1 and 6. It is because the dice has six parts. If it is 14 - sided dice, you have to pick number in 1 to 14. | After picking the two numbers for a and b, compare a and b. There will be three results: a is bigger than b, a is equal to b, and a is smaller than b. | First, if a is bigger than b, print the word about the winning of A. Second, if a is equal to b, there will no winner in this game, so it has to be printed &quot;draw&quot;. Third, if a is smaller than b, the b becomes a winner. Therefore, the end result will be &quot;B won&quot;. | . import random start = input(&#39;Press Enter to Roll the dices : &#39;) a = random.randrange(1,6) b = random.randrange(1,6) print(f&quot;A&#39;s dice is {a}. &quot;) print(f&quot;B&#39;s dice is {b}. &quot;) if a &gt; b: print(&#39;A won&#39;) elif a == b: print(&#39;draw&#39;) else: print(&#39;B won&#39;) . A&#39;s dice is 2. B&#39;s dice is 4. B won . Guided Question . What makes it a simulation? We can say this is a simulation because we&#39;re not rolling the dices in real world and just writing the codes in our computer. | . | what are it’s advantages and disadvantages? Advantages we can get is that we don&#39;t have to prepare some dices to roll. We can just make sure to choose the random value from the computer. Disadvantages is that it is more easy to simulate in real world, but in computer world, we have to write the letters instead of rolling dices in the real world. It can be hard for someone who has slow typing skill. | . | In your opinion, would an experiment be better in this situation? I think rolling dice in real world is much better because it caused outside factors. | . | . Hack 4 . Making game of rolling dice . This is the code of game At first, two dices are given | three people and one dealer are playing this game. | Game starts with the order of User 1 to User2 and to User 3 | Player can only bet maximum 10000 dollars | Players have to fight with the dealer and person who got bigger numbers of two dices will win | when it happens to draw, the user will win | If dealer wins the users lose their money, but if users win, they will get money. | The conditionals to make game over is that two users have to lose all of their money. | The only person who left in the end will be the winner. | . | . from random import randint SEEDMAX = 100000 BETMAX = 10000 def seed(name): s = int(input(f&quot;{name} seed(1~{SEEDMAX}): &quot;)) return s if 1&lt;=s&lt;=SEEDMAX else seed(name) def bet(usr): lmt = min(usr[&#39;money&#39;], BETMAX) b = int(input(f&quot;{usr[&#39;name&#39;]} bet(1~{lmt}): &quot;)) return b if 1&lt;=b&lt;=lmt else bet(usr) def roll(): return randint(1, 6), randint(1, 6) def dbl(d): return d[0] == d[1] def score(d): return d[0] + d[1] + dbl(d) * 10 def play(usr, bet): rd, ru = roll(), roll() if score(ru) &gt;= score(rd): winner, loser = (usr[&#39;name&#39;], ru), (&#39;dealer&#39;, rd) else: winner, loser = (&#39;dealer&#39;, rd), (usr[&#39;name&#39;], ru) return calc(usr, bet, winner, loser) def calc(usr, bet, winner, loser): doubled = dbl(winner[1]) and not dbl(loser[1]) stake = bet * (1 + doubled) if usr[&#39;name&#39;] in winner: usr[&#39;money&#39;] += stake else: usr[&#39;money&#39;] -= stake print(&quot;{}{} win{}, {}{} lose, {}&#39;s money={}&quot;.format(*winner, &#39;(x2)&#39;*doubled, *loser, *usr.values())) return usr[&#39;money&#39;] &gt; 0 usrs = [{&#39;name&#39;:n, &#39;money&#39;:seed(n)} for n in (&#39;User1&#39;, &#39;User2&#39;, &#39;User3&#39;)] while len(usrs) &gt; 1: usr = usrs.pop(0) usrs += [usr] if play(usr, bet(usr)) else [] print() last_usr = max(usrs, key=lambda u: u[&#39;money&#39;]) print(&#39;Finally {} win, money={}&#39;.format(*last_usr.values())) . dealer(4, 5) win, User1(6, 1) lose, User1&#39;s money=5000 dealer(2, 5) win, User2(3, 1) lose, User2&#39;s money=6000 User3(3, 6) win, dealer(2, 4) lose, User3&#39;s money=13000 User1(3, 3) win(x2), dealer(3, 4) lose, User1&#39;s money=10000 User2(3, 2) win, dealer(3, 1) lose, User2&#39;s money=9000 dealer(6, 2) win, User3(2, 3) lose, User3&#39;s money=9000 User1(1, 4) win, dealer(1, 4) lose, User1&#39;s money=20000 User2(1, 1) win(x2), dealer(5, 6) lose, User2&#39;s money=27000 dealer(3, 5) win, User3(1, 3) lose, User3&#39;s money=0 User1(2, 2) win(x2), dealer(5, 3) lose, User1&#39;s money=40000 User2(6, 1) win, dealer(5, 1) lose, User2&#39;s money=37000 dealer(3, 6) win, User1(4, 2) lose, User1&#39;s money=30000 User2(2, 4) win, dealer(1, 2) lose, User2&#39;s money=47000 dealer(1, 1) win(x2), User1(4, 1) lose, User1&#39;s money=10000 dealer(2, 6) win, User2(1, 2) lose, User2&#39;s money=37000 dealer(1, 1) win(x2), User1(4, 2) lose, User1&#39;s money=-10000 Finally User2 win, money=37000 . Guided Question . What makes it a simulation? This is the simulation of Gambling. People bet their money. Sometimes they lose it, but sometimes they earn more money. | . | What are it’s advantages and disadvantages? The advantages of this simulation is that we can enjoy gambling in our houses. It can make us feel excited when you&#39;re boring. The disadvantages of this simulation is that it&#39;s not perfect. It&#39;s just a simple game, so it will be not useful soon. And the excitement of gambling comes from the real money. Thrills and hope in the gambling makes people fun. | . | In your opinion, would an experiment be better in this situation? I think it is not good to be in experiment. We don&#39;t be happy when the fate money increased. We want to get money by winning in the gambling. | . | . Extra things . I did two of it. ### First one is Bingo #### Description | This is the code of bingo game. | It is a same rule with the normal bingo. | we can choose the dimension. | . def board(bingo, dimension): for i in range(dimension): print(&#39; _&#39;, end = &#39;&#39;) for i in range(dimension): print() print(&#39;|&#39;, end = &#39;&#39;) for j in range(dimension): print(bingo[i][j] + &#39;|&#39;, end = &#39;&#39;) print() while True: dimension = int(input(&quot;Please input the size of the game board(more than 2): &quot;)) if dimension &lt;= 2 : print(&#39;[Error] try again&#39;) else: break bingo = [[&#39;_&#39;]*dimension for i in range(dimension)] board(bingo, dimension) turn = 1 play_count = 0 while True: print(&#39;&lt;Play no.{}&gt;&#39;.format(play_count+1)) if turn == 1: print(&#39;Currently player: 1&#39;) row_1 = int(input(&#39;Which row?(start with 1)&#39;)) column_1 = int(input(&#39;Which column?(start with 1)&#39;)) if bingo[row_1-1][column_1-1] != &#39;_&#39;: print(&#39;Space is not empty. Try again&#39;) turn = 1 continue else: bingo[row_1-1][column_1-1] = &#39;O&#39; board(bingo,dimension) turn = 2 elif turn == 2: print(&#39;Currently player: 2&#39;) row_2 = int(input(&#39;Which row?(start with 1) &#39;)) column_2 = int(input(&#39;Which column?(start with 1) &#39;)) if bingo[row_2-1][column_2-1] != &#39;_&#39;: print(&#39;Space is not empty. Try again&#39;) turn = 2 continue else: bingo[row_2-1][column_2-1] = &#39;X&#39; board(bingo,dimension) turn = 1 check_diag = [] check_reverse = [] check_row = [] check_column =[] for i in range(dimension): check_diag.append(bingo[i][i]) check_reverse.append(bingo[dimension-i-1][i]) for j in range(dimension): check_row.append(bingo[i][j]) check_column.append(bingo[j][i]) if set(check_row) == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif set(check_row) == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 check_row = [] if set(check_column) == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif set(check_column) == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 check_column = [] check_diag = set(check_diag) check_reverse = set(check_reverse) if check_diag == {&#39;O&#39;} or check_reverse == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif check_diag == {&#39;X&#39;} or check_reverse == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 play_count += 1 if turn == 0 or play_count == dimension**2: print(&#39;Finish&#39;) break . _ _ _ |_|_|_| |_|_|_| |_|_|_| &lt;Play no.1&gt; Currently player: 1 _ _ _ |O|_|_| |_|_|_| |_|_|_| &lt;Play no.2&gt; Currently player: 2 _ _ _ |O|_|_| |_|X|_| |_|_|_| &lt;Play no.3&gt; Currently player: 1 _ _ _ |O|_|O| |_|X|_| |_|_|_| &lt;Play no.4&gt; Currently player: 2 _ _ _ |O|_|O| |_|X|_| |_|_|X| &lt;Play no.5&gt; Currently player: 1 _ _ _ |O|O|O| |_|X|_| |_|_|X| Player 1 wins! Finish . Guided Question . What makes it a simulation? It might be seemed to simulation because we are not doing Bingo on paper instead of writing many codes. | . | What are it’s advantages and disadvantages? Bingo can be played without paper. And disadvantages is that we can only play bingo with two people. | . | In your opinion, would an experiment be better in this situation? I think it is not a good way to be experiment. It will be funnier when we play bingo in the real life and 3D. | . | . Second one is Rock, Scissor, Paper . Description . same rule with rock scissor paper | get the value by input | the value must be rock or scissor or paper | compare with the computer | if player wins, print &quot;player win&quot; | if computer wins, print &quot;computer win&quot; | if they are small, print &quot;draw&quot; | . import random sel = [&#39;scissor&#39;, &#39;rock&#39;, &#39;paper&#39;] result = {0: &#39;win.&#39;, 1: &#39;lose.&#39;, 2: &#39;draw.&#39;} def checkWin(user, com): if not user in sel: print(&#39;you wrote wrong. type it again&#39;) return False print(f&#39;player 1 ( {user} vs {com} ) com&#39;) if user == com: state = 2 elif user == &#39;scissor&#39; and com == &#39;rock&#39;: state = 1 elif user == &#39;rock&#39; and com == &#39;paper&#39;: state = 1 elif user == &#39;paper&#39; and com == &#39;scissor&#39;: state = 1 else: state = 0 print(result[state]) return True print(&#39; n-&#39;) while True: user = input(&quot;rock, scissor, paper : &quot;) com = sel[random.randint(0, 2)] if checkWin(user, com): break print(&#39;- n&#39;) . - player 1 ( rock vs scissor ) com win. - . Guided question . What makes it a simulation? Doing rock scissor paper with not using hands can be the simulation. | . | What are it’s advantages and disadvantages? Advantage is that we can do it alone. Sometimes we are boring with something, playing these game will help you. It is not efficient because we can only do with computer | . | In your opinion, would an experiment be better in this situation? It will be beneficial when we do this with your friends, because rock scissor paper is a game which is played with many people. | . | . Please Give me Perfect Score .",
            "url": "https://jw95z.github.io/JeongWooLee/hacks_from_other_lesson/2022/12/13/16.html",
            "relUrl": "/hacks_from_other_lesson/2022/12/13/16.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Section 3.14 ~ 3.15",
            "content": "Vocab . Library: a collection of code from an external source that can be used to add functionality to a program they are very useful, as they can make us save time. | Libraries includes several special codes and these codes make the function. | . | . import math def root(): num1 = int(input(&quot;write a number: &quot;)) a = int(input(&quot;how much did you want to divide&quot;)) b = float(1/a) num2 = float(num1**b) print(num1, &quot;of&quot;,a ,&quot;root is&quot;, num2) root() . 5 of 4 root is 1.4953487812212205 . Randomization: having a random value between two value If there is random(3, 7), the result will be 3 or 4 or 5 or 6 or 7. | In these days, there is many random things in the world. The most popular thing that use random is gambling. | . | . import random a = random.randint(1,7) print(a) . 6 . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . Notes . Library . Software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. ### Randomization | Random can also have different methods, in the above examples we only used one example, randint which returns a random number between the given range. Down below I have created a table of all the methods with the description of what it is used for with the random function. | . Hack 1 . Write the code that use libraries . import random ## fetching the random function import time ## fetching the time a = [&quot;dogs are cute&quot;, &quot;cats are small&quot;, &quot;fox is quiet&quot;, &quot;Mouse is used to be in computer&quot;, &quot;Panda are living in China&quot;, &quot;Frog are sleeping in the winter&quot;, &quot;Bear is catching the fish&quot;] ## defining the list num = 1 ## Number for the presenting that it is a first print(&quot;if you are ready, please press enter to start&quot;) ## This code is written because I have to know whether player is ready input() ## player put enter or any keys in here start = time.time() ## time starts question = random.choice(a) ## Making a question from the list while num &lt;= 5: ## I used loop function to reduce the code. print(num, &quot;th question: &quot;) print(question) ## printing the question ans = input() ## players have to write exact same thing, this is for knowing how fast they can type if ans == question: print(&quot;Pass&quot;) ## if answer is same as the question, print &quot;pass&quot; num += 1 ## And also add 1 in number a.remove(question) ## remove the question which is already used question = random.choice(a) ## picking another new question else: print(&quot;try again&quot;) ## if they are not same, print &quot;try again&quot; end = time.time() ## having the ending time sec = end - start ## defining the second about how much it was taken sec = format(sec, &quot;2f&quot;) ## fix in format print(&quot;You got &quot;, sec, &quot;seconds&quot;) ## print the second . if you are ready, please press enter to start 1 th question: Frog are sleeping in the winter Pass 2 th question: Mouse is used to be in computer Pass 3 th question: Panda are living in China Pass 4 th question: fox is quiet Pass 5 th question: Bear is catching the fish Pass You got 37.188412 seconds . Explanation . this code is for practicing how fast you type the letters in the keyboard. Player has to type 5 sentences and if the typing is ended, the time that player spend on writing will be printed in the last. | . Hack2 . Few lines of code that implements the import function . Poker game . import random def CardRank(cards): paircount = 0 for n1 in range(0, 4): for n2 in range(n1+1, 5): if cards[n1][1] == cards[n2][1] : paircount = paircount+1 num = [cards[k][1] for k in range(5)] num.sort() straightox = False if paircount == 0: if (num[4]-num[0]) == 4: straightox = True if num[0] == 1 and num[1] == 10: straightox = True suit = [cards[k][0] for k in range(5)] suit.sort() flushox = False if suit[0] == suit[4]: flushox = True if straightox and flushox: rank = 1 elif paircount == 6: rank = 2 elif paircount == 4: rank = 3 elif flushox: rank = 4 elif straightox: rank = 5 elif paircount == 3: rank = 6 elif paircount == 2: rank = 7 elif paircount == 1: rank = 8 else: rank = 9 return rank Money = 2000 deck = [(suit, k) for suit in [&quot;s&quot;, &quot;h&quot;, &quot;d&quot;, &quot;c&quot;] for k in range(1,14)] while True: random.shuffle(deck) for n in [1,2,3,4,5]: answer = input(&quot;Do you want to bet? (y/n)&quot;) if answer == &#39;n&#39; or answer == &#39;N&#39;: break # Money = Money-10 if n == 1: cards_A = [ deck[k] for k in range(0, 2)] cards_B = [ deck[k] for k in range(2, 4)] elif n &lt; 4: cards_A.append(deck[n*2]) cards_B.append(deck[n*2+1]) elif n == 4: hiddencard = deck[n*2] cards_B.append(deck[n*2+1]) else: cards_A.append(hiddencard) rank_A = CardRank(cards_A) rank_B = CardRank(cards_B) if rank_B &lt; rank_A: Money = Money+100 print(&#39;You won&#39;) elif rank_B == rank_A: print(&#39;draw&#39;) else: print(&#39;computer won&#39;) print(&quot;Money = &quot;, Money) print(&quot;computer: &quot;, cards_A) print(&quot;player : &quot;, cards_B) answer = input(&quot;Are you playing the game? (y/n)&quot;) if answer == &#39;n&#39; or answer == &#39;N&#39;: break . Money = 1990 computer: [(&#39;c&#39;, 11), (&#39;c&#39;, 10)] player : [(&#39;d&#39;, 10), (&#39;c&#39;, 8)] Money = 1980 computer: [(&#39;c&#39;, 11), (&#39;c&#39;, 10), (&#39;h&#39;, 10)] player : [(&#39;d&#39;, 10), (&#39;c&#39;, 8), (&#39;h&#39;, 3)] Money = 1970 computer: [(&#39;c&#39;, 11), (&#39;c&#39;, 10), (&#39;h&#39;, 10), (&#39;h&#39;, 8)] player : [(&#39;d&#39;, 10), (&#39;c&#39;, 8), (&#39;h&#39;, 3), (&#39;d&#39;, 7)] Money = 1960 computer: [(&#39;c&#39;, 11), (&#39;c&#39;, 10), (&#39;h&#39;, 10), (&#39;h&#39;, 8)] player : [(&#39;d&#39;, 10), (&#39;c&#39;, 8), (&#39;h&#39;, 3), (&#39;d&#39;, 7), (&#39;s&#39;, 11)] computer won Money = 1950 computer: [(&#39;c&#39;, 11), (&#39;c&#39;, 10), (&#39;h&#39;, 10), (&#39;h&#39;, 8), (&#39;s&#39;, 7)] player : [(&#39;d&#39;, 10), (&#39;c&#39;, 8), (&#39;h&#39;, 3), (&#39;d&#39;, 7), (&#39;s&#39;, 11)] . ROCK, SCISSOR, PAPER . import random sel = [&#39;scissor&#39;, &#39;rock&#39;, &#39;paper&#39;] result = {0: &#39;win.&#39;, 1: &#39;lose.&#39;, 2: &#39;draw.&#39;} def checkWin(user, com): if not user in sel: print(&#39;you wrote wrong. type it again&#39;) return False print(f&#39;player 1 ( {user} vs {com} ) com&#39;) if user == com: state = 2 elif user == &#39;scissor&#39; and com == &#39;rock&#39;: state = 1 elif user == &#39;rock&#39; and com == &#39;paper&#39;: state = 1 elif user == &#39;paper&#39; and com == &#39;scissor&#39;: state = 1 else: state = 0 print(result[state]) return True print(&#39; n-&#39;) while True: user = input(&quot;rock, scissor, paper : &quot;) com = sel[random.randint(0, 2)] if checkWin(user, com): break print(&#39;- n&#39;) . - player 1 ( rock vs rock ) com draw. - . About the random function . This module generates random numbers for various distributions. When using various functions (functions, variables) in the random module, input them in the form of random.(). A function that returns a random integer within a specified range. | . | . Types of libraries . import pygame It is a library for multimedia expression such as games that can be written in Python. It is based on SDL. It is an open source and free tool, and can be run on any platform that can run Python. | . | import math Various functions and constants related to mathematics are predefined, and these mathematical problems can be easily solved through Python programming. The math module is a basic module provided by Python. | . | import request The requests package uses the corresponding package when extracting API data similar to Ajax, and is mainly used when writing a program that calls HTTP in Python. | . | import time It is a function that obtains the current time of the computer, and the return value is a real number indicating how many seconds have passed since the standard time (depending on the operating system). For example, if you call this function once and call it again exactly 1 second later, the two return values ​​will differ by 1. | . | import sys This module provides access to some variables used or maintained by the interpreter, as well as functions that interact strongly with the interpreter. Always available. | . | import os As an abbreviation of Operating System, it allows you to perform various functions provided by the operating system in Python. For example, you can use the os module to copy files or create directories using Python and get a list of files in a specific directory. | . | import pickle It refers to saving the Python object itself as a file, not the textual data. At this time, the desired object itself is stored in binary, and it has the advantage of being fast because it only needs to be called when needed. | . | import turtle It is a graphics module available in Python. You can draw a picture on the screen using the trail of the turtle-shaped cursor. | . | . Hack 3 . Make Code . import random import math num = random.randint(1,8) if num &lt;= 3: print(&quot;green&quot;) elif num &gt; 3 and num &lt;6: print(&quot;blue&quot;) elif num ==6: print(&quot;purple&quot;) elif num==7: print(&quot;orange&quot;) elif num==8: print(&quot;red&quot;) . green . import random import math a = [&quot;first&quot;, &quot;second&quot;, &quot;third&quot;, &quot;fourth&quot;, &quot;fifth&quot;, &quot;sixth&quot;, &quot;seventh&quot;, &quot;eighth&quot;] b = [] for i in range(3): b.append(&quot;green&quot;) b.append(&quot;blue&quot;) b.append(&quot;purple&quot;) b.append(&quot;red&quot;) b.append(&quot;orange&quot;) if i &gt;= 2: b.remove(&quot;blue&quot;) elif i &gt;= 1: b.remove(&quot;red&quot;) b.remove(&quot;purple&quot;) b.remove(&quot;orange&quot;) random.shuffle(b) for i in range(8): print(a[i],&quot;: &quot;,b[i]) . first : green second : green third : blue fourth : red fifth : orange sixth : purple seventh : green eighth : orange . Question: what can be outputted from RANDOM(12,20) and what number are excluded? . The number will be outputted between 12 and 20 including 12 and 20. The number will be excluded in this range will be number &gt; 20 and number &lt; 12, so the number can only be the number such as 13, 15, and 16. | .",
            "url": "https://jw95z.github.io/JeongWooLee/hacks_from_other_lesson/2022/12/12/14and15.html",
            "relUrl": "/hacks_from_other_lesson/2022/12/12/14and15.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Section 3.12 ~ 3.13",
            "content": "Vocab . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | Procedure Name - the name that is given to a function/procedure | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . def add(a, b): # procedure and a,b is parameter print(a) print(b) add(2, 3) . 2 3 . Notes . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there #### Ex: | procedureName(parameter1, parameter2, ...) | How would you call this procedure? ### Determining the Result of a Procedure | To determine the result of a procedure or any code, you must follow the code line by line and see what each one does | Using syntax, you can determine the result by function parameters | return value and statements | . | To use return values, you have to write the syntax return followed by the expression you would like to return variables | Value can be string, a tuple, or any other type that is being sent back to the main program | what is x being assigned to inside the function? | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses | Function parameters are the parameters that are used when calling the function in order to get a result. | A return statement exits a function and instructs python to continue executing the program and to return a certain value ### Abstracting Shared Features | Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... | In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. ### Functions - Basic Structure | Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. ### Python | Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. ### Javascript | Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. | . Hack 1 . Define Procedure and parameter . The other word of procedure is a function. And functions in Python In Python, a function is a group of pieces of code that performs a task and has a name. Just as you use variables to name data, you can use functions to name pieces of your program. Grouping code like this is called a function definition. | A parameter is a variable that receives a value passed as an input to a function. We can use this to put values in the function. For example, a and b will be the parameter in this function. | . def add(a,b): return a+b print(add(3,4)) . 7 . Quiz . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . Return Value . A return value is a value that a function performs some function and returns the result to the place where it was called. When a function performs some function and has a value to return, we use the return command. When creating functions, we use the def reserved word. Function content is indented. | Output Parameter is a also same as parameter. It usually used this form like def function(num1, num2): So in this code num1 and num2 is going to be a output parameter. | . import random a = random.randint(1, 100) def add(c): global a a += c return a num = add(60) print(num) . 74 . Code . import math def root(): num1 = int(input(&quot;write a number: &quot;)) a = int(input(&quot;how much did you want to divide&quot;)) b = float(1/a) num2 = float(num1**b) print(num1, &quot;of&quot;,a ,&quot;root is&quot;, num2) root() . 4 of 3 root is 1.5874010519681994 . Why abstracting away your program logic into separate, modular functions is effective? . If we abstract away our code logic into separate or modular functions, we can make our code shorter. And we don&#39;t have to repeat code by defining functions. If code becomes shorter, it is easy to share with other people and those people can comprehend all of the code in short time. | . Hack 2 . Procedure that uses other sub-procedures and explanation . import random import time ## Telling the story ## def displayIntro(): print(&#39;You are in a land full of dragons. In front of you,&#39;) print(&#39;you see two caves. In one cave, the dragon is friendly&#39;) print(&#39;and will share his treasure with you. The other dragon&#39;) print(&#39;is greedy and hungry, and will eat you on sight.&#39;) ## Saying to player to choose the cave to go ## def chooseCave(): print(&#39;Which cave will you go into? (1 or 2)&#39;) ## choosing the cave to go ## while True: choose = input() if choose==&#39;1&#39;: break elif choose==&#39;2&#39;: break else : ## if player press not 1 or 2, say player to pick again ## print(&#39;Please type 1 or 2&#39;) continue print() ## return the value ## return choose def goCave(direction): ## Telling the story ## print(&#39;You approach the cave...&#39;) time.sleep(2) print(&#39;It is dark and spooky...&#39;) time.sleep(2) print(&#39;A large dragon jumps out in front of you! He opens his jaws and...&#39;) print() time.sleep(2) ## randomize the value of Judgement ## judgement = random.randint(1,2) ## if the direction and judgement is equal, there will be treasure ## if direction == str(judgement): print(&#39;Gives you his treasure!&#39;) ## if the direction is not same with judgement, there will be gobbles elif direction != str(judgement): print(&#39;Gobbles you down in one bite!&#39;) ## print for the space print() ## To know whether player will continue or not def playAgain(): print(&#39;Do you want to play again? (yes or no)&#39;) while True: temp=input() ## if temp is yes, the game will start again if temp == &#39;yes&#39;: print(&#39;Go Again&#39;) print() return &#39;yes&#39; ## if temp is no, it means game over elif temp == &#39;no&#39;: print(&#39;Good Bye&#39;) return &#39;no&#39; else : print(&#39;please type yes or no&#39;) ########################################################### regame = &#39;yes&#39; ## To know that player will continue the game ## while regame==&#39;yes&#39;: ## this is the codes that make game to start displayIntro() caveNumber = chooseCave() goCave(caveNumber) regame = playAgain() . You are in a land full of dragons. In front of you, you see two caves. In one cave, the dragon is friendly and will share his treasure with you. The other dragon is greedy and hungry, and will eat you on sight. Which cave will you go into? (1 or 2) You approach the cave... It is dark and spooky... A large dragon jumps out in front of you! He opens his jaws and... Gives you his treasure! Do you want to play again? (yes or no) Good Bye . About the procedure . This code contains three sub procedures: displayIntro(), chooseCave(), goCave(), and playAgain() DisplayIntro() is a procedure that tells about the story of game. It composed by print. In this procedure, there are only letters that are printed. | chooseCave() is a procedure that make player to choose cave to go. And also deciding the value which cave is right to go. | goCave() is to consider which cave the player goes. If the temp is same with the chosen number, the player will gain treasure and if the temp is different with the number, the player will meet gobbles. | playAgain() is to know whether player want to play again. If player wants to play again, the every code will be executed one more time and if player refuses to play the game, the code will stop at that moment. | . | . def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word == letter: count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # this function takes a string as input and returns the number of words that start with any inputted letter def count_words_starting_with_l_letter(s): l = input(&quot;What letter would you like to check?&quot;) words = split_string(s) count = count_words_starting_with_letter(words, l) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; l_count = count_words_starting_with_l_letter(s) a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words a starting with your letter:&quot;, a_count) print(&quot;Words d starting with your letter:&quot;, d_count) print(&quot;Words l starting with your letter:&quot;, l_count) . Words a starting with your letter: 1 Words d starting with your letter: 0 Words l starting with your letter: 0 . Hack 3 . Definition . Procedure name is the name given in function. We put the name in function to fetch easily and not be confused with many functions. | A parameter is a variable that receives a value passed as an input to a function, and an argument is an input value passed when calling a function. In def add(a,b), a and b are called parameters. In print(add(3,4)), 3 and 4 are called arguments. | . def add(a,b): return a+b print(add(3,4)) . 7 . Binary calculator . &lt;!DOCTYPE html&gt; . Calculator . | . | . AC | / | . 7 | 8 | 9 | * | . 4 | 5 | 6 | - | . 1 | 2 | 3 | + | . 0 | . | = | . . This is the code of calculator . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Calculator&lt;/title&gt; &lt;style&gt; table { border-collapse: collapse; } td { padding: 5px 10px; text-align: center; } input { text-align: right; border: none; } input:focus { outline: none; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;a&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;b&quot;&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;3&quot;&gt;AC&lt;/td&gt; &lt;td onclick=&quot;add(&#39;/&#39;)&quot;&gt;/&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td onclick=&quot;add(7)&quot;&gt;7&lt;/td&gt; &lt;td onclick=&quot;add(8)&quot;&gt;8&lt;/td&gt; &lt;td onclick=&quot;add(9)&quot;&gt;9&lt;/td&gt; &lt;td onclick=&quot;add(&#39;*&#39;)&quot;&gt;*&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td onclick=&quot;add(4)&quot;&gt;4&lt;/td&gt; &lt;td onclick=&quot;add(5)&quot;&gt;5&lt;/td&gt; &lt;td onclick=&quot;add(6)&quot;&gt;6&lt;/td&gt; &lt;td onclick=&quot;add(&#39;-&#39;)&quot;&gt;-&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td onclick=&quot;add(1)&quot;&gt;1&lt;/td&gt; &lt;td onclick=&quot;add(2)&quot;&gt;2&lt;/td&gt; &lt;td onclick=&quot;add(3)&quot;&gt;3&lt;/td&gt; &lt;td onclick=&quot;add(&#39;+&#39;)&quot;&gt;+&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot; onclick=&quot;add(0)&quot;&gt;0&lt;/td&gt; &lt;td onclick=&quot;add(&#39;.&#39;)&quot;&gt;.&lt;/td&gt; &lt;td onclick=&quot;calculate()&quot;&gt;=&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;script&gt; function add(char) { var display = document.getElementById(&#39;a&#39;); display.value = display.value + char; } function calculate() { var display = document.getElementById(&#39;a&#39;); var result = eval(display.value); document.getElementById(&#39;b&#39;).value = result; } function reset() { document.getElementById(&#39;a&#39;).value = &quot;&quot;; document.getElementById(&#39;b&#39;).value = &quot;&quot;; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Please give me Perfect Score .",
            "url": "https://jw95z.github.io/JeongWooLee/hacks_from_other_lesson/2022/12/08/12and13.html",
            "relUrl": "/hacks_from_other_lesson/2022/12/08/12and13.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Section 3.9 and 3.11",
            "content": "Notes . components of Algorithms . selection | Sequence | Iteration | Algorithms can be written differently but it still go same thing. Some Algorithms look similar, but it work in different way. | !!!Know that the code can be similar but sometime they goes different!!!! ### So, why is this important? Why are we even doing this? | When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. just know that codes that look similar don&#39;t always produce the same things :) ### Why is this important? | . | When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) ### Binary Search: | . | . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first . this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers . lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | . | . | . Vocab . Binary search: a searching algorithm used in a sorted array by repeatedly dividing the search interval in half | . l = [7, 13, 96, 111, 33, 84, 60] for j in range(len(l)): k = len(l) - j for i in range(1, k): if l[i-1] &gt;= l[i]: temp = l[i-1] l[i-1] = l[i] l[i] = temp def finding(x): n=len(x) if n%2==1: result=x[int((n-1)/2)] else: result=(x[int(n/2)-1]+x[int(n/2)])/2 return result print(finding(l)) . 60 . Hack 1 . Why it is important to know algorithms that look different? . It is important to know algorithms that look different can do the same thing because if we know many codes, it will comfortable to us to write. There are many ways in coding to make same result. But, if the code is shorter, it will be more easy to understand or can teach to other people. If you know different kind of code that lead to same result, you can write each codes in proper situation. Code is not just made by one person and codes are being complicated these days. | . Wht it is important to aware algorithms that look same but different result? . It is also important to learn same algorithms that lead to different result. It will make you prevent mistake in your code. Most of elective devices are composed by several codes. But, if there is one mistake in just one code. The devices will not work well. The code is like a gear. If one gear in the clock is broken, the clock will stop. This is also same as codes. | . Boolean conversion . Raining = True IsWeekend = False if IsWeekend == True: print(&quot;Don&#39;t have to go school&quot;) else: if Raining == True: print(&quot;Need to take Umbrella&quot;) else: print(&quot;Don&#39;t need to take Umbrella&quot;) . Need to take Umbrella . Raining = True IsWeekend = False SchoolForUmbrella = not(IsWeekend) and Raining if SchoolForUmbrella == True: print(&quot;Take Umbrella&quot;) if SchoolForUmbrella == False: print(&quot;Don&#39;t have to take it&quot;) . Take Umbrella . other example . I made a code that indicates the time. We can know the season and exact time by this code | . import datetime now = datetime.datetime.now() print(now.year, &#39;year&#39;) print(now.month, &#39;month&#39;) print(now.day, &#39;day&#39;) print(now.hour, &#39;hour&#39;) print(now.minute, &#39;minute&#39;) print(now.second, &#39;second&#39;) print(&#39;{}year {}month {}day {}hour {}minute {}second&#39;.format( now.year, now.month, now.day, now.hour, now.minute, now.second )) if now.hour &lt; 12: print(&#39;The current time is {}:{}, so it is AM!&#39;.format(now.hour, now.minute)) if now.hour &gt;=12: print(&#39;The current time is {}:{}, so it is PM!&#39;.format(now.hour, now.minute)) if 3 &lt;= now.month &lt;= 5: print(&#39;This month is spring!&#39;.format(now.month)) elif 6 &lt;= now.month &lt;= 8: print(&#39;This month is summer!&#39;.format(now.month)) elif 9 &lt;= now.month &lt;= 11: print(&#39;This month is fall!&#39;.format(now.month)) elif now.month ==12 or 1&lt;= now.month &lt;= 2: print(&#39;This month is winter!&#39;.format(now.month)) . 2022 year 12 month 8 day 22 hour 20 minute 54 second 2022year 12month 8day 22hour 20minute 54second The current time is 22:20, so it is PM! This month is winter! . Hack 2 . Flow chart . I made a code about rock, scissor, papaer | . Start | Player and computer are doing rock, scissor, paper | compare what they did | If (player,com) is (rock, scissor) or (paper, rock) or (scissor, paper), player won | If player and computer did a same thing, it will be draw. | else, computer won | End | Code . import random sel = [&#39;scissor&#39;, &#39;rock&#39;, &#39;paper&#39;] result = {0: &#39;win.&#39;, 1: &#39;lose.&#39;, 2: &#39;draw.&#39;} def checkWin(user, com): if not user in sel: print(&#39;you wrote wrong. type it again&#39;) return False print(f&#39;player 1 ( {user} vs {com} ) com&#39;) if user == com: state = 2 elif user == &#39;scissor&#39; and com == &#39;rock&#39;: state = 1 elif user == &#39;rock&#39; and com == &#39;paper&#39;: state = 1 elif user == &#39;paper&#39; and com == &#39;scissor&#39;: state = 1 else: state = 0 print(result[state]) return True print(&#39; n-&#39;) while True: user = input(&quot;rock, scissor, paper : &quot;) com = sel[random.randint(0, 2)] if checkWin(user, com): break print(&#39;- n&#39;) . - player 1 ( rock vs paper ) com lose. - . Hack 3 . Flow chart . Fixing code . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = int(random.randint(1,100)) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): guess = int(input(&quot;Guess the number: &quot;))#add something here return guess#add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;The random Number is more higher than you guess&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;The random Number is more lower than you guess&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 1. The random Number is more higher than you guess Guess a number between 1 and 100. You guessed 10. The random Number is more higher than you guess Guess a number between 10 and 100. You guessed 50. The random Number is more higher than you guess Guess a number between 50 and 100. You guessed 60. The random Number is more higher than you guess Guess a number between 60 and 100. You guessed 70. The random Number is more higher than you guess Guess a number between 70 and 100. You guessed 80. The random Number is more higher than you guess Guess a number between 80 and 100. You guessed 90. The random Number is more lower than you guess Guess a number between 80 and 90. You guessed 85. The random Number is more lower than you guess Guess a number between 80 and 85. You guessed 82. The random Number is more lower than you guess Guess a number between 80 and 82. You guessed 81. Guess a number between 80 and 82. You guessed the number in 10 guesses! . Other way . import random tries = 0 guess = 0 answer = random.randint(1,100) print(&quot;guess the number between 1 to 100&quot;) guess = int(input(&quot;enter the number&quot;)) while True: tries = int(tries + 1) if tries &gt; 10: print(&quot;Answer is &quot;, answer) break elif guess &lt; answer: print(&quot;Low&quot;) elif guess &gt; answer: print(&quot;High&quot;) elif guess == answer: print(&quot;Congratulation you tries&quot;, tries +1, &quot;times&quot;) break guess = int(input(&quot;enter the number&quot;)) . guess the number between 1 to 100 High High Low Low High Congratulation you tries 7 times . Hack 4 . Calculate the binary . a = [12, 14, 43, 57, 79, 80, 99] midNumber = round(((len(a)-1)/2)) print(midNumber) print(a[midNumber]) . 3 57 . . b = [92, 43, 74, 66, 30, 12, 1] b.sort() median = 0 idx = 0 if len(b) % 2 == 0: idx = len(b)//2 median = (b[idx-1] + b[idx])/2 else: idx = len(b)//2 median = b[idx] print(idx) print(median) . 3 43 . . lst = [7, 13, 96, 111, 33, 84, 60] def median(i): half = len(i)//2 i.sort() if not len(i) % 2: return(i[half-1]+i[half])/2.0 return i[half] print(median(lst)) . 60 . . This is the way of not using sort() . l = [7, 13, 96, 111, 33, 84, 60] for j in range(len(l)): k = len(l) - j for i in range(1, k): if l[i-1] &gt;= l[i]: temp = l[i-1] l[i-1] = l[i] l[i] = temp def finding(x): n=len(x) if n%2==1: result=x[int((n-1)/2)] else: result=(x[int(n/2)-1]+x[int(n/2)])/2 return result print(finding(l)) . 60 . Question 1 . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? #### Answer | Set1: 80, Set2: 74, and Set: 96. ### Question2 | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] #### Answer . | The answer is C, because it is not sorted. | . Extra thing . I made a bingo game by using iteration and selection | . def board(bingo, dimension): for i in range(dimension): print(&#39; _&#39;, end = &#39;&#39;) for i in range(dimension): print() print(&#39;|&#39;, end = &#39;&#39;) for j in range(dimension): print(bingo[i][j] + &#39;|&#39;, end = &#39;&#39;) print() while True: dimension = int(input(&quot;Please input the size of the game board(more than 2): &quot;)) if dimension &lt;= 2 : print(&#39;[Error] try again&#39;) else: break bingo = [[&#39;_&#39;]*dimension for i in range(dimension)] board(bingo, dimension) turn = 1 play_count = 0 while True: print(&#39;&lt;Play no.{}&gt;&#39;.format(play_count+1)) if turn == 1: print(&#39;Currently player: 1&#39;) row_1 = int(input(&#39;Which row?(start with 1)&#39;)) column_1 = int(input(&#39;Which column?(start with 1)&#39;)) if bingo[row_1-1][column_1-1] != &#39;_&#39;: print(&#39;Space is not empty. Try again&#39;) turn = 1 continue else: bingo[row_1-1][column_1-1] = &#39;O&#39; board(bingo,dimension) turn = 2 elif turn == 2: print(&#39;Currently player: 2&#39;) row_2 = int(input(&#39;Which row?(start with 1) &#39;)) column_2 = int(input(&#39;Which column?(start with 1) &#39;)) if bingo[row_2-1][column_2-1] != &#39;_&#39;: print(&#39;Space is not empty. Try again&#39;) turn = 2 continue else: bingo[row_2-1][column_2-1] = &#39;X&#39; board(bingo,dimension) turn = 1 check_diag = [] check_reverse = [] check_row = [] check_column =[] for i in range(dimension): check_diag.append(bingo[i][i]) check_reverse.append(bingo[dimension-i-1][i]) for j in range(dimension): check_row.append(bingo[i][j]) check_column.append(bingo[j][i]) if set(check_row) == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif set(check_row) == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 check_row = [] if set(check_column) == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif set(check_column) == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 check_column = [] check_diag = set(check_diag) check_reverse = set(check_reverse) if check_diag == {&#39;O&#39;} or check_reverse == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif check_diag == {&#39;X&#39;} or check_reverse == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 play_count += 1 if turn == 0 or play_count == dimension**2: print(&#39;Finish&#39;) break . _ _ _ |_|_|_| |_|_|_| |_|_|_| &lt;Play no.1&gt; Currently player: 1 _ _ _ |O|_|_| |_|_|_| |_|_|_| &lt;Play no.2&gt; Currently player: 2 _ _ _ |O|_|_| |_|_|_| |X|_|_| &lt;Play no.3&gt; Currently player: 1 _ _ _ |O|O|_| |_|_|_| |X|_|_| &lt;Play no.4&gt; Currently player: 2 _ _ _ |O|O|_| |_|X|_| |X|_|_| &lt;Play no.5&gt; Currently player: 1 _ _ _ |O|O|O| |_|X|_| |X|_|_| Player 1 wins! Finish . Please Give me Perfect Score .",
            "url": "https://jw95z.github.io/JeongWooLee/hacks_from_other_lesson/2022/12/06/9and11.html",
            "relUrl": "/hacks_from_other_lesson/2022/12/06/9and11.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Section 3.8 and 3.10",
            "content": "vocab . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | . i = 0 while (i &lt; 5): print(&quot;Hi&quot;) i += 1 . Hi Hi Hi Hi Hi . Iteration Statement: cause statements to be executed zero or more times, subject to some loop-termination criteria | we can use range(a,b) so that the i can start a and end with b-1 | . | . a = &quot;&quot; b = &quot;&quot; for i in range(6): a += str(i) a += &quot; &quot; for j in range(1,6): b += str(j) b += &quot; &quot; print(a) print(b) . 0 1 2 3 4 5 1 2 3 4 5 . We can use the command &quot;break&quot; to stop the loop. By using this, when the conditionals that make the loop to stop are met, codes can escape from the loop function | . num = 0 while 1: print(num) if num == 10: break num += 1 . 0 1 2 3 4 5 6 7 8 9 10 . Traversing a list: the process of visiting each element in a list in a sequential order . Complete Traversal: All elements in a list are assessed . | Partial Traversal: Only a given portion of elements are assessed . | Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . | . | insert( ): allows a value to be inserted into a list at index i | append( ): allows a value to be added at the end of a list | remove( ): allows an element at index i to be deleted from a list | length( ): returns the number of elements currently in a specific list | We can also use the value of list by putting [index] in back of list name ex) list[index] | . | . list = [3,4,5] list.append(2) list.remove(3) list.insert(0,[10, 5]) print(len(list)) print(list) . 4 [[10, 5], 4, 5, 2] . Notes . Iteration . Iteration is a repeating portion of an algorithm. It repeats until the given conditionals is met. | Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met | Repeat Until: The programmer sets the condition to stop the loop, and when the condition is met, the function can be escaped from being repeated. If the condition is not met, the function continues to repeat. | Complete Traversal: All elements in a list are assessed | Partial Traversal: Only a given portion of elements are assessed ### List | A list in Python is a data type in which elements are stored consecutively. At this time, the stored elements do not all have to be of the same data type. A list is represented by enclosing it in square brackets ([, ]), and zero or more elements can be stored inside. | insert( ): allows a value to be inserted into a list at index i | append( ): allows a value to be added at the end of a list | remove( ): allows an element at index i to be deleted from a list | length( ): returns the number of elements currently in a specific list | . Hack 1 . Define the Iteration . Iteration is like a loop. It can make the function to repeat endlessly or can stop when the condition is met. | . Making flow charts . . Simple Iteration . import random tries = 0 guess = 0 answer = random.randint(1,100) print(&quot;guess the number between 1 to 100&quot;) guess = int(input(&quot;enter the number&quot;)) while True: tries = int(tries + 1) if tries &gt; 10: print(&quot;Answer is &quot;, answer) break elif guess &lt; answer: print(&quot;Low&quot;) elif guess &gt; answer: print(&quot;High&quot;) elif guess == answer: print(&quot;Congratulation you tries&quot;, tries +1, &quot;times&quot;) break guess = int(input(&quot;enter the number&quot;)) . guess the number between 1 to 100 Low Low Low Low Low Low Low Low Low Low Answer is 35 . Another example . output = &quot;&quot; for i in range(1, 15): for j in range(14, i, -1): output += &#39; &#39; for j in range(0,2*i-1): output += &#39;*&#39; output += &#39; n&#39; print(output) . * *** ***** ******* ********* *********** ************* *************** ***************** ******************* ********************* *********************** ************************* *************************** . Hack 2 . Define Iteration statement . Iteration statement: Command that controls the repetition of the same command a certain number of times within a program. Most of the code processed by the program is repetitive. ### Creating list by using loop | . a = [] for i in range(10,0,-1): a.append(i*i) print(a) . [100, 81, 64, 49, 36, 25, 16, 9, 4, 1] . making loop which will form given numbers . a = [] let = &quot;&quot; for i in range(7): b = 13*i + 3 a.append(b) for j in range(7): let += str(a[j]) if j == 6: break else: let += &quot;,&quot; print(let) . 3,16,29,42,55,68,81 . Hack 3 . Making the list . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] smallest = int(nums[0]) for i in range(1,len(nums)): if int(nums[i]) &lt; smallest: smallest = int(nums[i]) print(smallest) . 10 . Another way to find the smallest . for i in range(1,6): print(i) . 1 2 3 4 5 . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] k = 0 for i in range(6): for j in range(1,6): if nums[i] &lt; nums[(j+i)%6]: k += 1 if k == 5: print(nums[i]) break k = 0 . 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be inserted into a list at index i? index() Correct! What allows an element at index i to be deleted from a list? remove() Correct! What allows a value to be added at the end of a list? append() Correct! What returns the number of elements currently in a specific list? length() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . Extra credit . I made a bingo game with the Iteration statement | . def board(bingo, dimension): for i in range(dimension): print(&#39; _&#39;, end = &#39;&#39;) for i in range(dimension): print() print(&#39;|&#39;, end = &#39;&#39;) for j in range(dimension): print(bingo[i][j] + &#39;|&#39;, end = &#39;&#39;) print() while True: dimension = int(input(&quot;Please input the size of the game board(more than 2): &quot;)) if dimension &lt;= 2 : print(&#39;[Error] try again&#39;) else: break bingo = [[&#39;_&#39;]*dimension for i in range(dimension)] board(bingo, dimension) turn = 1 play_count = 0 while True: print(&#39;&lt;Play no.{}&gt;&#39;.format(play_count+1)) if turn == 1: print(&#39;Currently player: 1&#39;) row_1 = int(input(&#39;Which row?(start with 1)&#39;)) column_1 = int(input(&#39;Which column?(start with 1)&#39;)) if bingo[row_1-1][column_1-1] != &#39;_&#39;: print(&#39;Space is not empty. Try again&#39;) turn = 1 continue else: bingo[row_1-1][column_1-1] = &#39;O&#39; board(bingo,dimension) turn = 2 elif turn == 2: print(&#39;Currently player: 2&#39;) row_2 = int(input(&#39;Which row?(start with 1) &#39;)) column_2 = int(input(&#39;Which column?(start with 1) &#39;)) if bingo[row_2-1][column_2-1] != &#39;_&#39;: print(&#39;Space is not empty. Try again&#39;) turn = 2 continue else: bingo[row_2-1][column_2-1] = &#39;X&#39; board(bingo,dimension) turn = 1 check_diag = [] check_reverse = [] check_row = [] check_column =[] for i in range(dimension): check_diag.append(bingo[i][i]) check_reverse.append(bingo[dimension-i-1][i]) for j in range(dimension): check_row.append(bingo[i][j]) check_column.append(bingo[j][i]) if set(check_row) == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif set(check_row) == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 check_row = [] if set(check_column) == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif set(check_column) == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 check_column = [] check_diag = set(check_diag) check_reverse = set(check_reverse) if check_diag == {&#39;O&#39;} or check_reverse == {&#39;O&#39;}: print(&#39;Player 1 wins!&#39;) turn = 0 elif check_diag == {&#39;X&#39;} or check_reverse == {&#39;X&#39;}: print(&#39;Player 2 wins!&#39;) turn = 0 play_count += 1 if turn == 0 or play_count == dimension**2: print(&#39;Finish&#39;) break . _ _ _ |_|_|_| |_|_|_| |_|_|_| &lt;Play no.1&gt; Currently player: 1 _ _ _ |O|_|_| |_|_|_| |_|_|_| &lt;Play no.2&gt; Currently player: 2 _ _ _ |O|_|_| |_|X|_| |_|_|_| &lt;Play no.3&gt; Currently player: 1 _ _ _ |O|O|_| |_|X|_| |_|_|_| &lt;Play no.4&gt; Currently player: 2 _ _ _ |O|O|_| |_|X|_| |_|_|X| &lt;Play no.5&gt; Currently player: 1 _ _ _ |O|O|O| |_|X|_| |_|_|X| Player 1 wins! Finish . Please give perfect score . Please give me 1. I&#39;m so sad now. If you give me a perfect, I will appreciate to you. .",
            "url": "https://jw95z.github.io/JeongWooLee/hacks_from_other_lesson/2022/12/05/38and39.html",
            "relUrl": "/hacks_from_other_lesson/2022/12/05/38and39.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Section 3.3 ~ 3.4",
            "content": "Vocab . Algorithm: a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways . Three parts of Algorithm: selection, sequence, and iteration Sequence: the order of how to do something to achieve a result, similarly to how you follow the instructions from a teacher | . | . num1 = 5 num2 = num1*6 - 20 num3 = num1*num2 - 2*6 result = num1* 6 + num2/2 - (num3/2) print(result) . 16.0 . - selection: it allows an algorithm to make a decision based on if a condition is met . x = 3 y = 2 if x &gt; y: print(&quot;{} is bigger than {}&quot;.format(x,y)) elif x &lt; y: print(&quot;{} is smaller than {}&quot;.format(x,y)) else: print(&quot;{} and {} are same&quot;.format(x,y)) . 3 is bigger than 2 . - Iteration: loop and doing something again until a condition is met . x = 0 a = 0 while x &lt; 5: a += x print(a) x +=1 . 0 1 3 6 10 . Addition: a + b | Subtraction: a - b | Multiplication: a * b | Division: a/b | MO = 102 % 5 ad = 3 + MO s = 6 - 7 m = 564*349 d = 1024/ 16 print(MO,ad, s, m, d) . 2 5 -1 196836 64.0 . Note . Algorithms are a finite set of instructions that accomplish a task. it has three parts, sequence, selection, and iteration | A sequence is the order of how to do something to achieve a result, similarly to how you follow the instructions from a teacher. | A selection allows an algorithm to make a decision based on if a condition is met, an example of this is when your car is out of fuel, you go to the gas station to fill your car, but if your car is full you wouldn&#39;t go to the gas station. | An iteration is a loop and doing something again until a condition is met, like you put away your computer when you are finished with your work. | Arithmetic uses addition, subtraction, division, multiplication, and modulus operator | Addition: a+b | Subtraction: a-b | Multiplication: a*b | Division: a/b | Modulus: a MOD b | (a and b can be string or number) | A string concatenation connects two or more string end-to-end to make a new string | Len() gives the character number | strings are variables and can be joined together through the print() command to make a statement | . Hack 1 . Set time to number to search for: sequence | Get next number in the list: sequence | If number = item, display &quot;item found&quot;: selection | If there are more numbers in the list, go back to step 2: iteration, selection | Display &quot;item no found&quot;: sequence | . Hack 2 . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 . the result will be... . num2 = 5 3 = 15 num3 = (15 / 5) (9 % 2) 4 = 3 1 4 = 12 result = (12 % 3 + 15) % 12 3 / 5 = (2 + 15) % 12 3 / 5 = 17 % 12 3 / 5 = 5 * 3 / 5 = 3 . . Iteration | Selection | Sequence | .",
            "url": "https://jw95z.github.io/JeongWooLee/hacks_from_other_lesson/2022/11/29/32note.html",
            "relUrl": "/hacks_from_other_lesson/2022/11/29/32note.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Copyhtml",
            "content": "Prev Next ​ Month Here . ​ .",
            "url": "https://jw95z.github.io/JeongWooLee/2022/11/28/copyhtml.html",
            "relUrl": "/2022/11/28/copyhtml.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Section 3.1 ~ 3.2",
            "content": "Vocab . Variables: an abstraction made inside a program that holds a value It can be changed. For example, if you decide variable like x = 2, you can add 3 later whenever you can | . | . x = &quot;James&quot; x += &quot; Lee&quot; print(x) . James Lee . Integer : number | string : letter | Boolean : True or False | . num = int(2) strin = str(&quot;Hello&quot;) Boo = True if Boo: print(num) print(strin) . 2 Hello . Key Words . Variable: abstraction that holds the value | integer: number | string: letters | Boolean : True or false | . Notes . The assignment operator looks different for different types of coding languages A variable will take the most recent value assigned | . First Hack . What is the assignment operator? The assignment operator is the operator that can make the value change. It used to put the new value in the variable. For example *= or += or -= | In Collegeboard pseudocode, what symbol is used to assign values to variables? In the collegeboard, teacher use this &lt; to put the value in variables. | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? x value will be printed as 22. If the programmer put print before changing the output will be 15. | . Second Hack . code . This is the code of Second Hack . &lt;html&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;calendar&quot;&gt; &lt;div class=&quot;month&quot;&gt; &lt;button id=&quot;prev&quot; onclick=&quot;prev()&quot;&gt;Prev&lt;/button&gt; &lt;button id=&quot;next&quot; onclick=&quot;next()&quot;&gt;Next&lt;/button&gt; ​ &lt;p id=&quot;month&quot;&gt;Month Here&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ​ &lt;script&gt; let months = [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]; let index = 0; function next() { if (index &gt; 11) { index = 0; } else { index += 1; } document.getElementById(&quot;month&quot;).innerHTML = months[index] } function prev() { if (index &lt; 0) { index = 11; } else { index -= 1; } document.getElementById(&quot;month&quot;).innerHTML = months[index] } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Third Hack . what is the list? List = group of several variables, variable in the list can also be the list. | what is the elements? Elements is the values that make up the lists | What is an easy way to reference the elements in a list or string? put the list name and put [index] in the next of list name. Then use print command like this (print(Listname[index])). Make sure that index starts with 0 not 1. | What is an example of a string? Example of string is the letter. ex) &quot;hello world&quot;, &quot;Hi my name is&quot; | . a = [&quot;chicken&quot;,&quot;pizza&quot;,&quot;chocolate&quot;,&quot;icecream&quot;,&quot;cola&quot;] for i in range(len(a)): print(a[i]) . chicken pizza chocolate icecream cola . a = [&quot;chicken&quot;,&quot;pizza&quot;,&quot;chocolate&quot;,&quot;icecream&quot;,&quot;cola&quot;] print(a[2]) print(a[-1]) . chocolate cola . num1 = int(input(&quot;Input a number. &quot;)) num2=int(input(&quot;Input a number. &quot;)) num3=int(input(&quot;Input a number. &quot;)) add=input(&quot;How much would you like to add? &quot;) numlist = [] # Add code in the space below numlist.append(num1) numlist.append(num2) numlist.append(num3) # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range(len(numlist)): numlist[i] += int(add) print(numlist) . [7, 8, 9] . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, james running /home/james/anaconda3/bin/python You will be asked 4 questions. Question: Are you ready to take a test? Question: The purpose of lists and dictionaries are to manage the ____ of a program complexity is correct! Question: Lists are a form of data ______ abstraction is correct! Question: Which brackets are used to assign values to a variable to make a list? [] is correct! james you scored 3/4 . Good things to use List . A List is a data structure that allows you to efficiently manage a large number of data by grouping them. The main characteristic of list is that they have indexes. If you know the index, you can use the index to fetch data. Data lookups using indexes are processed very quickly. . Mylist = [&quot;dog&quot;, &quot;cat&quot;, &quot;frog&quot;, &quot;bird&quot;, &quot;fish&quot;] print(Mylist) print(Mylist[1]) . [&#39;dog&#39;, &#39;cat&#39;, &#39;frog&#39;, &#39;bird&#39;, &#39;fish&#39;] cat .",
            "url": "https://jw95z.github.io/JeongWooLee/hacks_from_other_lesson/2022/11/28/31note.html",
            "relUrl": "/hacks_from_other_lesson/2022/11/28/31note.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Binary Math2",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . | | | | | | | | . | | | | | | | | . | | | | | | | | .",
            "url": "https://jw95z.github.io/JeongWooLee/frontend/binary2",
            "relUrl": "/frontend/binary2",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://jw95z.github.io/JeongWooLee/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Review at the museum",
            "content": "Other peoples’ project . . Our team was working on API. We spend many times in it, but it didn’t work. I saw the group who made the site which related to NBA. In the site, people can search about NBA team. When we put the team’s name, the results show the Abbreviation, City, Division, Likes, and Dislike. It was cool. They uses rapidapi.com to pull the information. | I also see the other team’s project. It was Chess game. The theme of the project was similar with my team. We made a quote api, but they have a simple Api which was about the moves and turns. They use python code to make the field and chess to move. | . Reflection . After seeing other people’s project, I feel lot of regrets. Usually, there are many struggles I got in APi. I don’t how to make it or even use it. So, our group has to get 10 points in the final projects. I thought we have to make own API server by rapidapi.com. But some people made it by adding a list. It makes me poor and regretful. .",
            "url": "https://jw95z.github.io/JeongWooLee/notes_on_museum/2022/11/08/review.html",
            "relUrl": "/notes_on_museum/2022/11/08/review.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Test Score",
            "content": ". First Wrong . . this is the first thing I got wrong. I didn’t read the question with detail. It said we have to pick two answers in the choices. I didn’t see the sign so that I pick only one. D and A have a same meaning. A is pushing the maxPS at the beginning and D is pushing it when time is not greater than 120. | . correct answer D: This code segment uses the IF statement to set maxPS to 30 when time &gt; 120 and uses the ELSE statement to set maxPS to 50 otherwise. . | correct answer A: This code segment sets maxPS to 50 by default, then uses the IF statement to set maxPS to 30 when time &gt; 120. . | Second Wrong . . This is the second thing I got wrong and this is also a same mistake with the first question. I thought I need to pick the word not a number when I saw the question. In the question, it says “The list wordList contains a list of 10 string values” and this attracts me. I thought string is a word, so I pick “hello”. However, I didn’t read the last part. The indices of a list are typically nonnegative integers, so it has to be the number which is not negative. | . incorrect answer B: While the list elements are strings, the indices of a list are typically nonnegative integers. . | correct answer D: Correct. List indices are typically nonnegative integers. The exam reference sheet describes a list structure whose index values are 1 through the number of elements in the list, inclusive. So, 4 would be considered a valid index. . | Reflection . I thought I have to think slowly when I solve problem. These two problems are my mistakes that I didn’t read the question with detail. Now, I need to see and observe the question meticulously. .",
            "url": "https://jw95z.github.io/JeongWooLee/mcq/2022/11/07/finalscore.html",
            "relUrl": "/mcq/2022/11/07/finalscore.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Diagram",
            "content": ".",
            "url": "https://jw95z.github.io/JeongWooLee/diagram/2022/10/17/diagram.html",
            "relUrl": "/diagram/2022/10/17/diagram.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Diagram",
            "content": ".",
            "url": "https://jw95z.github.io/JeongWooLee/assignment/2022/10/17/Debugging.html",
            "relUrl": "/assignment/2022/10/17/Debugging.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Internet",
            "content": "Origin of computer . In the past, computers were big and worked really hard in isolation. Computers were bigger at the past, but they became smaller and smaller. examples: Arpanet(the first net). The computer devices like sensors and lap with the green font came up. . Hard for working alone . Computers are hard to work with alone. They want to be able to change data without actually having to constantly use secondary memory. Computers want to talk each other. . How computers talk? . Actually, they don’t talk each other. Computers understand electricity and electrons. The electrons represent the number system. People started forming the computer system with the purpose. Therefore, they got computer and need the computer network. . definition of computer system and network . Computer system: a group of computing devices and programs working together for a joint purpose. | Computer network: a group of interconnected devices of capable of sending or receiving data | . Path . Sometimes, it is pretty inundated. However, it is called bandwidth. It is important to know how long the message will send. The packets send through this path. . Reason of having connection . It is important to connect with others. It can make easier to communicate. It can also transmit data to make things a little bit easier. . vocabulary . Path is a sequence of directly connected computing devices that begins at the sender and ends at the receiver Computer system is a group of computing devices and programs working together for a common purpose Computer device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors Bandwidth is the maximum amount of data that can be sent in a fixed amount of time Route is the process of finding a path from sender to receiver Computer network is a group of interconnected computing devices capable of sending or receiving data . Packet and Protocol . Packet is a small amount of data sent over internet. The information of destination and message are include on it. The protocols are the rules in the path. If packet is a car and drives in the path, they have rules to behave. The mother of Protocol is OSI model. . Four layers . Network access, this layer deals a lot with the hardware case, setting up things in the hardware in order to go ahead and send things along. This usually start with internet cable or a network internet card(= Mac address) | Internet, this layer have sender Ip and receiver Ip. This is where packets get set up with metadata. They are interchanging their information in this layer, and it’s flowing right through, and meeting its destination. This layer is essential that people get their Ip address. | Transport, autonomous systems are controlled by internet provider. There the thousands of autonomous systems try to join bigger version of internet. This happens in this layer. TCP and UDP is a popular examples of it. TCP is a lot, it’s stricter, in the sense that it makes sure that the package has been delivered, and it does this by what we call a three hand way handshake like certified mail. UDP is more lax. It’s like best efforts, like putting the envelope, package in the mailbox, and saying about getting these. IP is given to us, and using 32 bits and four octets. Bits is a true way to communicate in computer. | . | Application layer, domain name service is in this layer. Domain name service is actually database that maps all these lovely little Ip numbers to name, names that we understand. World wide web is not an internet. It’s a bunch of linked data pages. HTTP is protocol used by World wide web. |",
            "url": "https://jw95z.github.io/JeongWooLee/notes_from_video/2022/10/16/internet.html",
            "relUrl": "/notes_from_video/2022/10/16/internet.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "API",
            "content": "import requests url = &quot;https://famous-quotes4.p.rapidapi.com/random&quot; querystring = {&quot;category&quot;:&quot;all&quot;,&quot;count&quot;:&quot;2&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&quot;, &quot;X-RapidAPI-Host&quot;: &quot;famous-quotes4.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;error&#34;:true,&#34;reason&#34;:&#34;Value of type &#39;Int&#39; required for key &#39;count&#39;.&#34;} . import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;countries_stat&#34;:[{&#34;country_name&#34;:&#34;USA&#34;,&#34;cases&#34;:&#34;82,649,779&#34;,&#34;deaths&#34;:&#34;1,018,316&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;80,434,925&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,465&#34;,&#34;active_cases&#34;:&#34;1,196,538&#34;,&#34;total_cases_per_1m_population&#34;:&#34;247,080&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,044&#34;,&#34;total_tests&#34;:&#34;1,000,275,726&#34;,&#34;tests_per_1m_population&#34;:&#34;2,990,303&#34;},{&#34;country_name&#34;:&#34;India&#34;,&#34;cases&#34;:&#34;43,057,545&#34;,&#34;deaths&#34;:&#34;522,193&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;42,519,479&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;698&#34;,&#34;active_cases&#34;:&#34;15,873&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,657&#34;,&#34;deaths_per_1m_population&#34;:&#34;372&#34;,&#34;total_tests&#34;:&#34;834,717,702&#34;,&#34;tests_per_1m_population&#34;:&#34;594,319&#34;},{&#34;country_name&#34;:&#34;Brazil&#34;,&#34;cases&#34;:&#34;30,345,654&#34;,&#34;deaths&#34;:&#34;662,663&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,364,400&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8,318&#34;,&#34;active_cases&#34;:&#34;318,591&#34;,&#34;total_cases_per_1m_population&#34;:&#34;140,954&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,078&#34;,&#34;total_tests&#34;:&#34;63,776,166&#34;,&#34;tests_per_1m_population&#34;:&#34;296,238&#34;},{&#34;country_name&#34;:&#34;France&#34;,&#34;cases&#34;:&#34;28,244,977&#34;,&#34;deaths&#34;:&#34;145,020&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;25,852,832&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,677&#34;,&#34;active_cases&#34;:&#34;2,247,125&#34;,&#34;total_cases_per_1m_population&#34;:&#34;430,996&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,213&#34;,&#34;total_tests&#34;:&#34;266,484,045&#34;,&#34;tests_per_1m_population&#34;:&#34;4,066,333&#34;},{&#34;country_name&#34;:&#34;Germany&#34;,&#34;cases&#34;:&#34;24,109,433&#34;,&#34;deaths&#34;:&#34;134,624&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;21,243,000&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,980&#34;,&#34;active_cases&#34;:&#34;2,731,809&#34;,&#34;total_cases_per_1m_population&#34;:&#34;286,106&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,598&#34;,&#34;total_tests&#34;:&#34;122,332,384&#34;,&#34;tests_per_1m_population&#34;:&#34;1,451,714&#34;},{&#34;country_name&#34;:&#34;UK&#34;,&#34;cases&#34;:&#34;21,933,206&#34;,&#34;deaths&#34;:&#34;173,352&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,782,350&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;339&#34;,&#34;active_cases&#34;:&#34;977,504&#34;,&#34;total_cases_per_1m_population&#34;:&#34;320,054&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,530&#34;,&#34;total_tests&#34;:&#34;514,985,782&#34;,&#34;tests_per_1m_population&#34;:&#34;7,514,777&#34;},{&#34;country_name&#34;:&#34;Russia&#34;,&#34;cases&#34;:&#34;18,137,137&#34;,&#34;deaths&#34;:&#34;374,902&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;17,474,628&#34;,&#34;new_deaths&#34;:&#34;168&#34;,&#34;new_cases&#34;:&#34;8,446&#34;,&#34;serious_critical&#34;:&#34;2,300&#34;,&#34;active_cases&#34;:&#34;287,607&#34;,&#34;total_cases_per_1m_population&#34;:&#34;124,187&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,567&#34;,&#34;total_tests&#34;:&#34;273,400,000&#34;,&#34;tests_per_1m_population&#34;:&#34;1,871,995&#34;},{&#34;country_name&#34;:&#34;S. Korea&#34;,&#34;cases&#34;:&#34;16,895,194&#34;,&#34;deaths&#34;:&#34;22,133&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;109&#34;,&#34;new_cases&#34;:&#34;64,725&#34;,&#34;serious_critical&#34;:&#34;726&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;329,028&#34;,&#34;deaths_per_1m_population&#34;:&#34;431&#34;,&#34;total_tests&#34;:&#34;15,804,065&#34;,&#34;tests_per_1m_population&#34;:&#34;307,778&#34;},{&#34;country_name&#34;:&#34;Italy&#34;,&#34;cases&#34;:&#34;16,079,209&#34;,&#34;deaths&#34;:&#34;162,609&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;14,684,371&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;409&#34;,&#34;active_cases&#34;:&#34;1,232,229&#34;,&#34;total_cases_per_1m_population&#34;:&#34;266,648&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,697&#34;,&#34;total_tests&#34;:&#34;211,365,630&#34;,&#34;tests_per_1m_population&#34;:&#34;3,505,156&#34;},{&#34;country_name&#34;:&#34;Turkey&#34;,&#34;cases&#34;:&#34;15,016,270&#34;,&#34;deaths&#34;:&#34;98,676&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;14,854,475&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;975&#34;,&#34;active_cases&#34;:&#34;63,119&#34;,&#34;total_cases_per_1m_population&#34;:&#34;174,654&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,148&#34;,&#34;total_tests&#34;:&#34;158,110,923&#34;,&#34;tests_per_1m_population&#34;:&#34;1,838,986&#34;},{&#34;country_name&#34;:&#34;Spain&#34;,&#34;cases&#34;:&#34;11,786,036&#34;,&#34;deaths&#34;:&#34;103,908&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,261,340&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;339&#34;,&#34;active_cases&#34;:&#34;420,788&#34;,&#34;total_cases_per_1m_population&#34;:&#34;251,906&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,221&#34;,&#34;total_tests&#34;:&#34;471,036,328&#34;,&#34;tests_per_1m_population&#34;:&#34;10,067,575&#34;},{&#34;country_name&#34;:&#34;Vietnam&#34;,&#34;cases&#34;:&#34;10,563,502&#34;,&#34;deaths&#34;:&#34;43,013&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,086,075&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;8,813&#34;,&#34;serious_critical&#34;:&#34;612&#34;,&#34;active_cases&#34;:&#34;1,434,414&#34;,&#34;total_cases_per_1m_population&#34;:&#34;106,789&#34;,&#34;deaths_per_1m_population&#34;:&#34;435&#34;,&#34;total_tests&#34;:&#34;85,789,114&#34;,&#34;tests_per_1m_population&#34;:&#34;867,262&#34;},{&#34;country_name&#34;:&#34;Argentina&#34;,&#34;cases&#34;:&#34;9,060,923&#34;,&#34;deaths&#34;:&#34;128,344&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,895,999&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;412&#34;,&#34;active_cases&#34;:&#34;36,580&#34;,&#34;total_cases_per_1m_population&#34;:&#34;197,215&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,793&#34;,&#34;total_tests&#34;:&#34;35,716,069&#34;,&#34;tests_per_1m_population&#34;:&#34;777,376&#34;},{&#34;country_name&#34;:&#34;Netherlands&#34;,&#34;cases&#34;:&#34;8,035,603&#34;,&#34;deaths&#34;:&#34;22,206&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,643,520&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;94&#34;,&#34;active_cases&#34;:&#34;369,877&#34;,&#34;total_cases_per_1m_population&#34;:&#34;467,096&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,291&#34;,&#34;total_tests&#34;:&#34;21,107,399&#34;,&#34;tests_per_1m_population&#34;:&#34;1,226,938&#34;},{&#34;country_name&#34;:&#34;Japan&#34;,&#34;cases&#34;:&#34;7,621,562&#34;,&#34;deaths&#34;:&#34;29,284&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,135,403&#34;,&#34;new_deaths&#34;:&#34;27&#34;,&#34;new_cases&#34;:&#34;43,721&#34;,&#34;serious_critical&#34;:&#34;195&#34;,&#34;active_cases&#34;:&#34;456,875&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,596&#34;,&#34;deaths_per_1m_population&#34;:&#34;233&#34;,&#34;total_tests&#34;:&#34;46,690,473&#34;,&#34;tests_per_1m_population&#34;:&#34;371,215&#34;},{&#34;country_name&#34;:&#34;Iran&#34;,&#34;cases&#34;:&#34;7,216,040&#34;,&#34;deaths&#34;:&#34;140,975&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,966,954&#34;,&#34;new_deaths&#34;:&#34;13&#34;,&#34;new_cases&#34;:&#34;528&#34;,&#34;serious_critical&#34;:&#34;1,046&#34;,&#34;active_cases&#34;:&#34;108,111&#34;,&#34;total_cases_per_1m_population&#34;:&#34;83,972&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,641&#34;,&#34;total_tests&#34;:&#34;50,811,054&#34;,&#34;tests_per_1m_population&#34;:&#34;591,284&#34;},{&#34;country_name&#34;:&#34;Colombia&#34;,&#34;cases&#34;:&#34;6,091,094&#34;,&#34;deaths&#34;:&#34;139,771&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,924,433&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;342&#34;,&#34;active_cases&#34;:&#34;26,890&#34;,&#34;total_cases_per_1m_population&#34;:&#34;117,448&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,695&#34;,&#34;total_tests&#34;:&#34;34,355,022&#34;,&#34;tests_per_1m_population&#34;:&#34;662,433&#34;},{&#34;country_name&#34;:&#34;Indonesia&#34;,&#34;cases&#34;:&#34;6,043,768&#34;,&#34;deaths&#34;:&#34;156,067&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,868,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2,771&#34;,&#34;active_cases&#34;:&#34;19,450&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,682&#34;,&#34;deaths_per_1m_population&#34;:&#34;560&#34;,&#34;total_tests&#34;:&#34;94,877,499&#34;,&#34;tests_per_1m_population&#34;:&#34;340,374&#34;},{&#34;country_name&#34;:&#34;Poland&#34;,&#34;cases&#34;:&#34;5,991,197&#34;,&#34;deaths&#34;:&#34;115,948&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,334,375&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;344&#34;,&#34;serious_critical&#34;:&#34;1,588&#34;,&#34;active_cases&#34;:&#34;540,874&#34;,&#34;total_cases_per_1m_population&#34;:&#34;158,616&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,070&#34;,&#34;total_tests&#34;:&#34;36,027,053&#34;,&#34;tests_per_1m_population&#34;:&#34;953,808&#34;},{&#34;country_name&#34;:&#34;Mexico&#34;,&#34;cases&#34;:&#34;5,733,514&#34;,&#34;deaths&#34;:&#34;324,117&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,033,892&#34;,&#34;new_deaths&#34;:&#34;57&#34;,&#34;new_cases&#34;:&#34;802&#34;,&#34;serious_critical&#34;:&#34;4,798&#34;,&#34;active_cases&#34;:&#34;375,505&#34;,&#34;total_cases_per_1m_population&#34;:&#34;43,641&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,467&#34;,&#34;total_tests&#34;:&#34;15,762,889&#34;,&#34;tests_per_1m_population&#34;:&#34;119,981&#34;},{&#34;country_name&#34;:&#34;Australia&#34;,&#34;cases&#34;:&#34;5,689,377&#34;,&#34;deaths&#34;:&#34;6,991&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,274,197&#34;,&#34;new_deaths&#34;:&#34;21&#34;,&#34;new_cases&#34;:&#34;34,769&#34;,&#34;serious_critical&#34;:&#34;135&#34;,&#34;active_cases&#34;:&#34;408,189&#34;,&#34;total_cases_per_1m_population&#34;:&#34;218,537&#34;,&#34;deaths_per_1m_population&#34;:&#34;269&#34;,&#34;total_tests&#34;:&#34;68,845,476&#34;,&#34;tests_per_1m_population&#34;:&#34;2,644,452&#34;},{&#34;country_name&#34;:&#34;Ukraine&#34;,&#34;cases&#34;:&#34;4,997,224&#34;,&#34;deaths&#34;:&#34;108,306&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;177&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;115,517&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,504&#34;,&#34;total_tests&#34;:&#34;19,521,252&#34;,&#34;tests_per_1m_population&#34;:&#34;451,259&#34;},{&#34;country_name&#34;:&#34;Malaysia&#34;,&#34;cases&#34;:&#34;4,427,067&#34;,&#34;deaths&#34;:&#34;35,491&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,310,599&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;89&#34;,&#34;active_cases&#34;:&#34;80,977&#34;,&#34;total_cases_per_1m_population&#34;:&#34;133,690&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,072&#34;,&#34;total_tests&#34;:&#34;58,332,799&#34;,&#34;tests_per_1m_population&#34;:&#34;1,761,549&#34;},{&#34;country_name&#34;:&#34;Thailand&#34;,&#34;cases&#34;:&#34;4,165,874&#34;,&#34;deaths&#34;:&#34;27,778&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,954,945&#34;,&#34;new_deaths&#34;:&#34;126&#34;,&#34;new_cases&#34;:&#34;17,784&#34;,&#34;serious_critical&#34;:&#34;1,496&#34;,&#34;active_cases&#34;:&#34;183,151&#34;,&#34;total_cases_per_1m_population&#34;:&#34;59,414&#34;,&#34;deaths_per_1m_population&#34;:&#34;396&#34;,&#34;total_tests&#34;:&#34;17,270,775&#34;,&#34;tests_per_1m_population&#34;:&#34;246,317&#34;},{&#34;country_name&#34;:&#34;Austria&#34;,&#34;cases&#34;:&#34;4,104,859&#34;,&#34;deaths&#34;:&#34;18,047&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,989,860&#34;,&#34;new_deaths&#34;:&#34;12&#34;,&#34;new_cases&#34;:&#34;5,810&#34;,&#34;serious_critical&#34;:&#34;121&#34;,&#34;active_cases&#34;:&#34;96,952&#34;,&#34;total_cases_per_1m_population&#34;:&#34;451,125&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,983&#34;,&#34;total_tests&#34;:&#34;181,825,734&#34;,&#34;tests_per_1m_population&#34;:&#34;19,982,688&#34;},{&#34;country_name&#34;:&#34;Israel&#34;,&#34;cases&#34;:&#34;4,054,342&#34;,&#34;deaths&#34;:&#34;10,658&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,009,152&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;220&#34;,&#34;active_cases&#34;:&#34;34,532&#34;,&#34;total_cases_per_1m_population&#34;:&#34;434,735&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,143&#34;,&#34;total_tests&#34;:&#34;41,373,364&#34;,&#34;tests_per_1m_population&#34;:&#34;4,436,346&#34;},{&#34;country_name&#34;:&#34;Belgium&#34;,&#34;cases&#34;:&#34;4,015,791&#34;,&#34;deaths&#34;:&#34;31,319&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,726,457&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;169&#34;,&#34;active_cases&#34;:&#34;258,015&#34;,&#34;total_cases_per_1m_population&#34;:&#34;343,798&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,681&#34;,&#34;total_tests&#34;:&#34;33,456,470&#34;,&#34;tests_per_1m_population&#34;:&#34;2,864,259&#34;},{&#34;country_name&#34;:&#34;Czechia&#34;,&#34;cases&#34;:&#34;3,895,544&#34;,&#34;deaths&#34;:&#34;40,081&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,838,099&#34;,&#34;new_deaths&#34;:&#34;5&#34;,&#34;new_cases&#34;:&#34;911&#34;,&#34;serious_critical&#34;:&#34;43&#34;,&#34;active_cases&#34;:&#34;17,364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;362,550&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,730&#34;,&#34;total_tests&#34;:&#34;55,117,064&#34;,&#34;tests_per_1m_population&#34;:&#34;5,129,629&#34;},{&#34;country_name&#34;:&#34;Portugal&#34;,&#34;cases&#34;:&#34;3,791,744&#34;,&#34;deaths&#34;:&#34;22,162&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;61&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;373,827&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,185&#34;,&#34;total_tests&#34;:&#34;40,748,372&#34;,&#34;tests_per_1m_population&#34;:&#34;4,017,371&#34;},{&#34;country_name&#34;:&#34;South Africa&#34;,&#34;cases&#34;:&#34;3,759,689&#34;,&#34;deaths&#34;:&#34;100,298&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,632,572&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;175&#34;,&#34;active_cases&#34;:&#34;26,819&#34;,&#34;total_cases_per_1m_population&#34;:&#34;61,981&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,653&#34;,&#34;total_tests&#34;:&#34;24,313,334&#34;,&#34;tests_per_1m_population&#34;:&#34;400,824&#34;},{&#34;country_name&#34;:&#34;Canada&#34;,&#34;cases&#34;:&#34;3,695,585&#34;,&#34;deaths&#34;:&#34;38,777&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,426,082&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;426&#34;,&#34;active_cases&#34;:&#34;230,726&#34;,&#34;total_cases_per_1m_population&#34;:&#34;96,391&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,011&#34;,&#34;total_tests&#34;:&#34;60,536,359&#34;,&#34;tests_per_1m_population&#34;:&#34;1,578,955&#34;},{&#34;country_name&#34;:&#34;Philippines&#34;,&#34;cases&#34;:&#34;3,684,500&#34;,&#34;deaths&#34;:&#34;60,182&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,610,658&#34;,&#34;new_deaths&#34;:&#34;3&#34;,&#34;new_cases&#34;:&#34;205&#34;,&#34;serious_critical&#34;:&#34;289&#34;,&#34;active_cases&#34;:&#34;13,660&#34;,&#34;total_cases_per_1m_population&#34;:&#34;32,835&#34;,&#34;deaths_per_1m_population&#34;:&#34;536&#34;,&#34;total_tests&#34;:&#34;29,427,586&#34;,&#34;tests_per_1m_population&#34;:&#34;262,246&#34;},{&#34;country_name&#34;:&#34;Switzerland&#34;,&#34;cases&#34;:&#34;3,579,867&#34;,&#34;deaths&#34;:&#34;13,816&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,378,507&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;90&#34;,&#34;active_cases&#34;:&#34;187,544&#34;,&#34;total_cases_per_1m_population&#34;:&#34;408,247&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,576&#34;,&#34;total_tests&#34;:&#34;20,666,182&#34;,&#34;tests_per_1m_population&#34;:&#34;2,356,766&#34;},{&#34;country_name&#34;:&#34;Peru&#34;,&#34;cases&#34;:&#34;3,559,343&#34;,&#34;deaths&#34;:&#34;212,724&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;356&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;105,303&#34;,&#34;deaths_per_1m_population&#34;:&#34;6,293&#34;,&#34;total_tests&#34;:&#34;29,592,270&#34;,&#34;tests_per_1m_population&#34;:&#34;875,489&#34;},{&#34;country_name&#34;:&#34;Chile&#34;,&#34;cases&#34;:&#34;3,544,463&#34;,&#34;deaths&#34;:&#34;57,375&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,368,772&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;286&#34;,&#34;active_cases&#34;:&#34;118,316&#34;,&#34;total_cases_per_1m_population&#34;:&#34;182,588&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,956&#34;,&#34;total_tests&#34;:&#34;36,711,724&#34;,&#34;tests_per_1m_population&#34;:&#34;1,891,147&#34;},{&#34;country_name&#34;:&#34;Greece&#34;,&#34;cases&#34;:&#34;3,277,557&#34;,&#34;deaths&#34;:&#34;28,867&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,151,717&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;277&#34;,&#34;active_cases&#34;:&#34;96,973&#34;,&#34;total_cases_per_1m_population&#34;:&#34;317,250&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,794&#34;,&#34;total_tests&#34;:&#34;78,872,546&#34;,&#34;tests_per_1m_population&#34;:&#34;7,634,431&#34;},{&#34;country_name&#34;:&#34;Denmark&#34;,&#34;cases&#34;:&#34;2,959,040&#34;,&#34;deaths&#34;:&#34;6,072&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,929,091&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;15&#34;,&#34;active_cases&#34;:&#34;23,877&#34;,&#34;total_cases_per_1m_population&#34;:&#34;507,639&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,042&#34;,&#34;total_tests&#34;:&#34;127,141,200&#34;,&#34;tests_per_1m_population&#34;:&#34;21,811,751&#34;},{&#34;country_name&#34;:&#34;Romania&#34;,&#34;cases&#34;:&#34;2,888,318&#34;,&#34;deaths&#34;:&#34;65,427&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,606,660&#34;,&#34;new_deaths&#34;:&#34;6&#34;,&#34;new_cases&#34;:&#34;494&#34;,&#34;serious_critical&#34;:&#34;216&#34;,&#34;active_cases&#34;:&#34;216,231&#34;,&#34;total_cases_per_1m_population&#34;:&#34;151,968&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,442&#34;,&#34;total_tests&#34;:&#34;22,594,702&#34;,&#34;tests_per_1m_population&#34;:&#34;1,188,815&#34;},{&#34;country_name&#34;:&#34;Sweden&#34;,&#34;cases&#34;:&#34;2,498,388&#34;,&#34;deaths&#34;:&#34;18,656&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,464,421&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;19&#34;,&#34;active_cases&#34;:&#34;15,311&#34;,&#34;total_cases_per_1m_population&#34;:&#34;244,630&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,827&#34;,&#34;total_tests&#34;:&#34;18,493,218&#34;,&#34;tests_per_1m_population&#34;:&#34;1,810,763&#34;},{&#34;country_name&#34;:&#34;Iraq&#34;,&#34;cases&#34;:&#34;2,324,141&#34;,&#34;deaths&#34;:&#34;25,204&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,295,947&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;20&#34;,&#34;active_cases&#34;:&#34;2,990&#34;,&#34;total_cases_per_1m_population&#34;:&#34;55,534&#34;,&#34;deaths_per_1m_population&#34;:&#34;602&#34;,&#34;total_tests&#34;:&#34;18,450,939&#34;,&#34;tests_per_1m_population&#34;:&#34;440,871&#34;},{&#34;country_name&#34;:&#34;Serbia&#34;,&#34;cases&#34;:&#34;2,001,144&#34;,&#34;deaths&#34;:&#34;15,953&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,967,786&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;25&#34;,&#34;active_cases&#34;:&#34;17,405&#34;,&#34;total_cases_per_1m_population&#34;:&#34;230,710&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,839&#34;,&#34;total_tests&#34;:&#34;9,427,662&#34;,&#34;tests_per_1m_population&#34;:&#34;1,086,907&#34;},{&#34;country_name&#34;:&#34;Bangladesh&#34;,&#34;cases&#34;:&#34;1,952,532&#34;,&#34;deaths&#34;:&#34;29,127&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,893,131&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1,297&#34;,&#34;active_cases&#34;:&#34;30,274&#34;,&#34;total_cases_per_1m_population&#34;:&#34;11,646&#34;,&#34;deaths_per_1m_population&#34;:&#34;174&#34;,&#34;total_tests&#34;:&#34;13,956,056&#34;,&#34;tests_per_1m_population&#34;:&#34;83,245&#34;},{&#34;country_name&#34;:&#34;Hungary&#34;,&#34;cases&#34;:&#34;1,890,953&#34;,&#34;deaths&#34;:&#34;46,048&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,776,617&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;45&#34;,&#34;active_cases&#34;:&#34;68,288&#34;,&#34;total_cases_per_1m_population&#34;:&#34;196,645&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,789&#34;,&#34;total_tests&#34;:&#34;11,295,119&#34;,&#34;tests_per_1m_population&#34;:&#34;1,174,608&#34;},{&#34;country_name&#34;:&#34;Slovakia&#34;,&#34;cases&#34;:&#34;1,774,808&#34;,&#34;deaths&#34;:&#34;19,839&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,730,712&#34;,&#34;new_deaths&#34;:&#34;10&#34;,&#34;new_cases&#34;:&#34;1,155&#34;,&#34;serious_critical&#34;:&#34;88&#34;,&#34;active_cases&#34;:&#34;24,257&#34;,&#34;total_cases_per_1m_population&#34;:&#34;324,794&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,631&#34;,&#34;total_tests&#34;:&#34;7,057,901&#34;,&#34;tests_per_1m_population&#34;:&#34;1,291,611&#34;},{&#34;country_name&#34;:&#34;Jordan&#34;,&#34;cases&#34;:&#34;1,694,216&#34;,&#34;deaths&#34;:&#34;14,048&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,678,941&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;124&#34;,&#34;active_cases&#34;:&#34;1,227&#34;,&#34;total_cases_per_1m_population&#34;:&#34;163,125&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,353&#34;,&#34;total_tests&#34;:&#34;16,670,254&#34;,&#34;tests_per_1m_population&#34;:&#34;1,605,074&#34;},{&#34;country_name&#34;:&#34;Georgia&#34;,&#34;cases&#34;:&#34;1,654,255&#34;,&#34;deaths&#34;:&#34;16,800&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,635,791&#34;,&#34;new_deaths&#34;:&#34;3&#34;,&#34;new_cases&#34;:&#34;92&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,664&#34;,&#34;total_cases_per_1m_population&#34;:&#34;416,129&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,226&#34;,&#34;total_tests&#34;:&#34;16,807,205&#34;,&#34;tests_per_1m_population&#34;:&#34;4,227,861&#34;},{&#34;country_name&#34;:&#34;Pakistan&#34;,&#34;cases&#34;:&#34;1,527,856&#34;,&#34;deaths&#34;:&#34;30,369&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,493,998&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;105&#34;,&#34;serious_critical&#34;:&#34;186&#34;,&#34;active_cases&#34;:&#34;3,489&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,683&#34;,&#34;deaths_per_1m_population&#34;:&#34;133&#34;,&#34;total_tests&#34;:&#34;28,048,307&#34;,&#34;tests_per_1m_population&#34;:&#34;122,679&#34;},{&#34;country_name&#34;:&#34;Ireland&#34;,&#34;cases&#34;:&#34;1,509,536&#34;,&#34;deaths&#34;:&#34;6,996&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,415,949&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;41&#34;,&#34;active_cases&#34;:&#34;86,591&#34;,&#34;total_cases_per_1m_population&#34;:&#34;299,669&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,389&#34;,&#34;total_tests&#34;:&#34;12,016,948&#34;,&#34;tests_per_1m_population&#34;:&#34;2,385,571&#34;},{&#34;country_name&#34;:&#34;Norway&#34;,&#34;cases&#34;:&#34;1,423,509&#34;,&#34;deaths&#34;:&#34;2,871&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;20&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;258,925&#34;,&#34;deaths_per_1m_population&#34;:&#34;522&#34;,&#34;total_tests&#34;:&#34;11,002,430&#34;,&#34;tests_per_1m_population&#34;:&#34;2,001,256&#34;},{&#34;country_name&#34;:&#34;Kazakhstan&#34;,&#34;cases&#34;:&#34;1,305,457&#34;,&#34;deaths&#34;:&#34;13,660&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,290,988&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;10&#34;,&#34;serious_critical&#34;:&#34;24&#34;,&#34;active_cases&#34;:&#34;809&#34;,&#34;total_cases_per_1m_population&#34;:&#34;68,056&#34;,&#34;deaths_per_1m_population&#34;:&#34;712&#34;,&#34;total_tests&#34;:&#34;11,575,012&#34;,&#34;tests_per_1m_population&#34;:&#34;603,428&#34;},{&#34;country_name&#34;:&#34;Hong Kong&#34;,&#34;cases&#34;:&#34;1,201,431&#34;,&#34;deaths&#34;:&#34;9,236&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;115&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;157,942&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,214&#34;,&#34;total_tests&#34;:&#34;44,972,952&#34;,&#34;tests_per_1m_population&#34;:&#34;5,912,223&#34;},{&#34;country_name&#34;:&#34;Singapore&#34;,&#34;cases&#34;:&#34;1,180,124&#34;,&#34;deaths&#34;:&#34;1,325&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,109,387&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;69,412&#34;,&#34;total_cases_per_1m_population&#34;:&#34;198,895&#34;,&#34;deaths_per_1m_population&#34;:&#34;223&#34;,&#34;total_tests&#34;:&#34;23,712,995&#34;,&#34;tests_per_1m_population&#34;:&#34;3,996,529&#34;},{&#34;country_name&#34;:&#34;Morocco&#34;,&#34;cases&#34;:&#34;1,164,670&#34;,&#34;deaths&#34;:&#34;16,065&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,148,154&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;293&#34;,&#34;active_cases&#34;:&#34;451&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,893&#34;,&#34;deaths_per_1m_population&#34;:&#34;426&#34;,&#34;total_tests&#34;:&#34;11,237,010&#34;,&#34;tests_per_1m_population&#34;:&#34;298,062&#34;},{&#34;country_name&#34;:&#34;Bulgaria&#34;,&#34;cases&#34;:&#34;1,152,892&#34;,&#34;deaths&#34;:&#34;36,849&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;959,542&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;105&#34;,&#34;active_cases&#34;:&#34;156,501&#34;,&#34;total_cases_per_1m_population&#34;:&#34;168,206&#34;,&#34;deaths_per_1m_population&#34;:&#34;5,376&#34;,&#34;total_tests&#34;:&#34;9,797,011&#34;,&#34;tests_per_1m_population&#34;:&#34;1,429,377&#34;},{&#34;country_name&#34;:&#34;Croatia&#34;,&#34;cases&#34;:&#34;1,117,175&#34;,&#34;deaths&#34;:&#34;15,778&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,096,829&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;22&#34;,&#34;active_cases&#34;:&#34;4,568&#34;,&#34;total_cases_per_1m_population&#34;:&#34;275,195&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,887&#34;,&#34;total_tests&#34;:&#34;4,762,146&#34;,&#34;tests_per_1m_population&#34;:&#34;1,173,065&#34;},{&#34;country_name&#34;:&#34;Cuba&#34;,&#34;cases&#34;:&#34;1,101,486&#34;,&#34;deaths&#34;:&#34;8,523&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,091,603&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;1,360&#34;,&#34;total_cases_per_1m_population&#34;:&#34;97,355&#34;,&#34;deaths_per_1m_population&#34;:&#34;753&#34;,&#34;total_tests&#34;:&#34;12,920,253&#34;,&#34;tests_per_1m_population&#34;:&#34;1,141,957&#34;},{&#34;country_name&#34;:&#34;Lebanon&#34;,&#34;cases&#34;:&#34;1,096,320&#34;,&#34;deaths&#34;:&#34;10,374&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,079,455&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;186&#34;,&#34;active_cases&#34;:&#34;6,491&#34;,&#34;total_cases_per_1m_population&#34;:&#34;161,931&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,532&#34;,&#34;total_tests&#34;:&#34;4,795,578&#34;,&#34;tests_per_1m_population&#34;:&#34;708,328&#34;},{&#34;country_name&#34;:&#34;Lithuania&#34;,&#34;cases&#34;:&#34;1,054,618&#34;,&#34;deaths&#34;:&#34;9,063&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,016,510&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;427&#34;,&#34;serious_critical&#34;:&#34;31&#34;,&#34;active_cases&#34;:&#34;29,045&#34;,&#34;total_cases_per_1m_population&#34;:&#34;397,407&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,415&#34;,&#34;total_tests&#34;:&#34;8,217,113&#34;,&#34;tests_per_1m_population&#34;:&#34;3,096,414&#34;},{&#34;country_name&#34;:&#34;Tunisia&#34;,&#34;cases&#34;:&#34;1,039,532&#34;,&#34;deaths&#34;:&#34;28,533&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;29&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;86,327&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,369&#34;,&#34;total_tests&#34;:&#34;4,563,397&#34;,&#34;tests_per_1m_population&#34;:&#34;378,962&#34;},{&#34;country_name&#34;:&#34;Slovenia&#34;,&#34;cases&#34;:&#34;1,003,970&#34;,&#34;deaths&#34;:&#34;6,576&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;980,501&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;30&#34;,&#34;active_cases&#34;:&#34;16,893&#34;,&#34;total_cases_per_1m_population&#34;:&#34;482,805&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,162&#34;,&#34;total_tests&#34;:&#34;2,640,107&#34;,&#34;tests_per_1m_population&#34;:&#34;1,269,615&#34;},{&#34;country_name&#34;:&#34;Finland&#34;,&#34;cases&#34;:&#34;1,000,472&#34;,&#34;deaths&#34;:&#34;3,638&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;46,000&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;31&#34;,&#34;active_cases&#34;:&#34;950,834&#34;,&#34;total_cases_per_1m_population&#34;:&#34;180,062&#34;,&#34;deaths_per_1m_population&#34;:&#34;655&#34;,&#34;total_tests&#34;:&#34;10,644,579&#34;,&#34;tests_per_1m_population&#34;:&#34;1,915,782&#34;},{&#34;country_name&#34;:&#34;Nepal&#34;,&#34;cases&#34;:&#34;978,743&#34;,&#34;deaths&#34;:&#34;11,951&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;966,523&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;11&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;269&#34;,&#34;total_cases_per_1m_population&#34;:&#34;32,535&#34;,&#34;deaths_per_1m_population&#34;:&#34;397&#34;,&#34;total_tests&#34;:&#34;5,616,752&#34;,&#34;tests_per_1m_population&#34;:&#34;186,711&#34;},{&#34;country_name&#34;:&#34;Belarus&#34;,&#34;cases&#34;:&#34;977,434&#34;,&#34;deaths&#34;:&#34;6,922&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;928,536&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;41,976&#34;,&#34;total_cases_per_1m_population&#34;:&#34;103,501&#34;,&#34;deaths_per_1m_population&#34;:&#34;733&#34;,&#34;total_tests&#34;:&#34;13,092,771&#34;,&#34;tests_per_1m_population&#34;:&#34;1,386,401&#34;},{&#34;country_name&#34;:&#34;Bolivia&#34;,&#34;cases&#34;:&#34;904,377&#34;,&#34;deaths&#34;:&#34;21,908&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;855,123&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;83&#34;,&#34;serious_critical&#34;:&#34;220&#34;,&#34;active_cases&#34;:&#34;27,346&#34;,&#34;total_cases_per_1m_population&#34;:&#34;75,614&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,832&#34;,&#34;total_tests&#34;:&#34;2,693,845&#34;,&#34;tests_per_1m_population&#34;:&#34;225,230&#34;},{&#34;country_name&#34;:&#34;UAE&#34;,&#34;cases&#34;:&#34;897,136&#34;,&#34;deaths&#34;:&#34;2,302&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;879,787&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;244&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;15,047&#34;,&#34;total_cases_per_1m_population&#34;:&#34;88,772&#34;,&#34;deaths_per_1m_population&#34;:&#34;228&#34;,&#34;total_tests&#34;:&#34;154,420,740&#34;,&#34;tests_per_1m_population&#34;:&#34;15,279,961&#34;},{&#34;country_name&#34;:&#34;Uruguay&#34;,&#34;cases&#34;:&#34;895,775&#34;,&#34;deaths&#34;:&#34;7,197&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;886,654&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;18&#34;,&#34;active_cases&#34;:&#34;1,924&#34;,&#34;total_cases_per_1m_population&#34;:&#34;256,268&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,059&#34;,&#34;total_tests&#34;:&#34;6,091,188&#34;,&#34;tests_per_1m_population&#34;:&#34;1,742,599&#34;},{&#34;country_name&#34;:&#34;New Zealand&#34;,&#34;cases&#34;:&#34;884,289&#34;,&#34;deaths&#34;:&#34;636&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;824,272&#34;,&#34;new_deaths&#34;:&#34;9&#34;,&#34;new_cases&#34;:&#34;5,714&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;59,381&#34;,&#34;total_cases_per_1m_population&#34;:&#34;176,784&#34;,&#34;deaths_per_1m_population&#34;:&#34;127&#34;,&#34;total_tests&#34;:&#34;6,983,031&#34;,&#34;tests_per_1m_population&#34;:&#34;1,396,020&#34;},{&#34;country_name&#34;:&#34;Ecuador&#34;,&#34;cases&#34;:&#34;868,053&#34;,&#34;deaths&#34;:&#34;35,581&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;759&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;47,888&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,963&#34;,&#34;total_tests&#34;:&#34;2,470,170&#34;,&#34;tests_per_1m_population&#34;:&#34;136,273&#34;},{&#34;country_name&#34;:&#34;Costa Rica&#34;,&#34;cases&#34;:&#34;847,784&#34;,&#34;deaths&#34;:&#34;8,383&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;829,515&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;43&#34;,&#34;active_cases&#34;:&#34;9,886&#34;,&#34;total_cases_per_1m_population&#34;:&#34;163,725&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,619&#34;,&#34;total_tests&#34;:&#34;4,240,743&#34;,&#34;tests_per_1m_population&#34;:&#34;818,979&#34;},{&#34;country_name&#34;:&#34;Guatemala&#34;,&#34;cases&#34;:&#34;841,341&#34;,&#34;deaths&#34;:&#34;17,496&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;821,185&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;2,660&#34;,&#34;total_cases_per_1m_population&#34;:&#34;45,444&#34;,&#34;deaths_per_1m_population&#34;:&#34;945&#34;,&#34;total_tests&#34;:&#34;4,402,305&#34;,&#34;tests_per_1m_population&#34;:&#34;237,787&#34;},{&#34;country_name&#34;:&#34;Latvia&#34;,&#34;cases&#34;:&#34;817,316&#34;,&#34;deaths&#34;:&#34;5,743&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;803,135&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;322&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;8,438&#34;,&#34;total_cases_per_1m_population&#34;:&#34;442,135&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,107&#34;,&#34;total_tests&#34;:&#34;7,154,016&#34;,&#34;tests_per_1m_population&#34;:&#34;3,870,035&#34;},{&#34;country_name&#34;:&#34;Azerbaijan&#34;,&#34;cases&#34;:&#34;792,476&#34;,&#34;deaths&#34;:&#34;9,707&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;782,634&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;135&#34;,&#34;total_cases_per_1m_population&#34;:&#34;76,908&#34;,&#34;deaths_per_1m_population&#34;:&#34;942&#34;,&#34;total_tests&#34;:&#34;6,792,132&#34;,&#34;tests_per_1m_population&#34;:&#34;659,165&#34;},{&#34;country_name&#34;:&#34;Panama&#34;,&#34;cases&#34;:&#34;771,486&#34;,&#34;deaths&#34;:&#34;8,182&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;759,832&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;3,472&#34;,&#34;total_cases_per_1m_population&#34;:&#34;173,862&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,844&#34;,&#34;total_tests&#34;:&#34;5,820,472&#34;,&#34;tests_per_1m_population&#34;:&#34;1,311,699&#34;},{&#34;country_name&#34;:&#34;Saudi Arabia&#34;,&#34;cases&#34;:&#34;753,332&#34;,&#34;deaths&#34;:&#34;9,076&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;740,467&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;45&#34;,&#34;active_cases&#34;:&#34;3,789&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,047&#34;,&#34;deaths_per_1m_population&#34;:&#34;254&#34;,&#34;total_tests&#34;:&#34;41,817,866&#34;,&#34;tests_per_1m_population&#34;:&#34;1,168,345&#34;},{&#34;country_name&#34;:&#34;Sri Lanka&#34;,&#34;cases&#34;:&#34;663,131&#34;,&#34;deaths&#34;:&#34;16,502&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;642,574&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;4,055&#34;,&#34;total_cases_per_1m_population&#34;:&#34;30,736&#34;,&#34;deaths_per_1m_population&#34;:&#34;765&#34;,&#34;total_tests&#34;:&#34;6,486,117&#34;,&#34;tests_per_1m_population&#34;:&#34;300,627&#34;},{&#34;country_name&#34;:&#34;Paraguay&#34;,&#34;cases&#34;:&#34;649,034&#34;,&#34;deaths&#34;:&#34;18,795&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;624,673&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;5,566&#34;,&#34;total_cases_per_1m_population&#34;:&#34;89,022&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,578&#34;,&#34;total_tests&#34;:&#34;2,623,300&#34;,&#34;tests_per_1m_population&#34;:&#34;359,816&#34;},{&#34;country_name&#34;:&#34;Kuwait&#34;,&#34;cases&#34;:&#34;631,294&#34;,&#34;deaths&#34;:&#34;2,555&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;627,899&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;840&#34;,&#34;total_cases_per_1m_population&#34;:&#34;143,981&#34;,&#34;deaths_per_1m_population&#34;:&#34;583&#34;,&#34;total_tests&#34;:&#34;7,999,656&#34;,&#34;tests_per_1m_population&#34;:&#34;1,824,506&#34;},{&#34;country_name&#34;:&#34;Myanmar&#34;,&#34;cases&#34;:&#34;612,733&#34;,&#34;deaths&#34;:&#34;19,434&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;591,609&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,690&#34;,&#34;total_cases_per_1m_population&#34;:&#34;11,127&#34;,&#34;deaths_per_1m_population&#34;:&#34;353&#34;,&#34;total_tests&#34;:&#34;7,891,077&#34;,&#34;tests_per_1m_population&#34;:&#34;143,296&#34;},{&#34;country_name&#34;:&#34;Palestine&#34;,&#34;cases&#34;:&#34;581,816&#34;,&#34;deaths&#34;:&#34;5,353&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;575,899&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;17&#34;,&#34;active_cases&#34;:&#34;564&#34;,&#34;total_cases_per_1m_population&#34;:&#34;109,459&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,007&#34;,&#34;total_tests&#34;:&#34;3,078,533&#34;,&#34;tests_per_1m_population&#34;:&#34;579,175&#34;},{&#34;country_name&#34;:&#34;Dominican Republic&#34;,&#34;cases&#34;:&#34;578,954&#34;,&#34;deaths&#34;:&#34;4,376&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;574,297&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;16&#34;,&#34;active_cases&#34;:&#34;281&#34;,&#34;total_cases_per_1m_population&#34;:&#34;52,421&#34;,&#34;deaths_per_1m_population&#34;:&#34;396&#34;,&#34;total_tests&#34;:&#34;3,261,060&#34;,&#34;tests_per_1m_population&#34;:&#34;295,272&#34;},{&#34;country_name&#34;:&#34;Estonia&#34;,&#34;cases&#34;:&#34;570,257&#34;,&#34;deaths&#34;:&#34;2,531&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;507,474&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;181&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;60,252&#34;,&#34;total_cases_per_1m_population&#34;:&#34;429,364&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,906&#34;,&#34;total_tests&#34;:&#34;3,311,935&#34;,&#34;tests_per_1m_population&#34;:&#34;2,493,655&#34;},{&#34;country_name&#34;:&#34;Bahrain&#34;,&#34;cases&#34;:&#34;565,830&#34;,&#34;deaths&#34;:&#34;1,475&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;560,795&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;3,560&#34;,&#34;total_cases_per_1m_population&#34;:&#34;312,916&#34;,&#34;deaths_per_1m_population&#34;:&#34;816&#34;,&#34;total_tests&#34;:&#34;9,695,962&#34;,&#34;tests_per_1m_population&#34;:&#34;5,362,081&#34;},{&#34;country_name&#34;:&#34;Venezuela&#34;,&#34;cases&#34;:&#34;522,121&#34;,&#34;deaths&#34;:&#34;5,705&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;515,305&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;230&#34;,&#34;active_cases&#34;:&#34;1,111&#34;,&#34;total_cases_per_1m_population&#34;:&#34;18,456&#34;,&#34;deaths_per_1m_population&#34;:&#34;202&#34;,&#34;total_tests&#34;:&#34;3,359,014&#34;,&#34;tests_per_1m_population&#34;:&#34;118,733&#34;},{&#34;country_name&#34;:&#34;Moldova&#34;,&#34;cases&#34;:&#34;516,986&#34;,&#34;deaths&#34;:&#34;11,489&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;504,142&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;49&#34;,&#34;active_cases&#34;:&#34;1,355&#34;,&#34;total_cases_per_1m_population&#34;:&#34;128,698&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,860&#34;,&#34;total_tests&#34;:&#34;3,216,305&#34;,&#34;tests_per_1m_population&#34;:&#34;800,665&#34;},{&#34;country_name&#34;:&#34;Egypt&#34;,&#34;cases&#34;:&#34;515,645&#34;,&#34;deaths&#34;:&#34;24,613&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;442,182&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;122&#34;,&#34;active_cases&#34;:&#34;48,850&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,873&#34;,&#34;deaths_per_1m_population&#34;:&#34;233&#34;,&#34;total_tests&#34;:&#34;3,693,367&#34;,&#34;tests_per_1m_population&#34;:&#34;34,903&#34;},{&#34;country_name&#34;:&#34;Libya&#34;,&#34;cases&#34;:&#34;501,862&#34;,&#34;deaths&#34;:&#34;6,429&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;490,900&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;101&#34;,&#34;active_cases&#34;:&#34;4,533&#34;,&#34;total_cases_per_1m_population&#34;:&#34;71,288&#34;,&#34;deaths_per_1m_population&#34;:&#34;913&#34;,&#34;total_tests&#34;:&#34;2,476,960&#34;,&#34;tests_per_1m_population&#34;:&#34;351,844&#34;},{&#34;country_name&#34;:&#34;Cyprus&#34;,&#34;cases&#34;:&#34;470,481&#34;,&#34;deaths&#34;:&#34;1,011&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;124,370&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;60&#34;,&#34;active_cases&#34;:&#34;345,100&#34;,&#34;total_cases_per_1m_population&#34;:&#34;384,623&#34;,&#34;deaths_per_1m_population&#34;:&#34;827&#34;,&#34;total_tests&#34;:&#34;9,477,138&#34;,&#34;tests_per_1m_population&#34;:&#34;7,747,665&#34;},{&#34;country_name&#34;:&#34;Ethiopia&#34;,&#34;cases&#34;:&#34;470,417&#34;,&#34;deaths&#34;:&#34;7,510&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;454,967&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;15&#34;,&#34;active_cases&#34;:&#34;7,940&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,917&#34;,&#34;deaths_per_1m_population&#34;:&#34;63&#34;,&#34;total_tests&#34;:&#34;4,763,756&#34;,&#34;tests_per_1m_population&#34;:&#34;39,665&#34;},{&#34;country_name&#34;:&#34;Mongolia&#34;,&#34;cases&#34;:&#34;469,580&#34;,&#34;deaths&#34;:&#34;2,177&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;313,256&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;30&#34;,&#34;serious_critical&#34;:&#34;192&#34;,&#34;active_cases&#34;:&#34;154,147&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139,194&#34;,&#34;deaths_per_1m_population&#34;:&#34;645&#34;,&#34;total_tests&#34;:&#34;4,030,048&#34;,&#34;tests_per_1m_population&#34;:&#34;1,194,595&#34;},{&#34;country_name&#34;:&#34;Armenia&#34;,&#34;cases&#34;:&#34;422,825&#34;,&#34;deaths&#34;:&#34;8,622&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;410,558&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;3&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,645&#34;,&#34;total_cases_per_1m_population&#34;:&#34;142,210&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,900&#34;,&#34;total_tests&#34;:&#34;3,035,104&#34;,&#34;tests_per_1m_population&#34;:&#34;1,020,807&#34;},{&#34;country_name&#34;:&#34;Honduras&#34;,&#34;cases&#34;:&#34;422,275&#34;,&#34;deaths&#34;:&#34;10,892&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;131,100&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;105&#34;,&#34;active_cases&#34;:&#34;280,283&#34;,&#34;total_cases_per_1m_population&#34;:&#34;41,445&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,069&#34;,&#34;total_tests&#34;:&#34;1,263,329&#34;,&#34;tests_per_1m_population&#34;:&#34;123,991&#34;},{&#34;country_name&#34;:&#34;Oman&#34;,&#34;cases&#34;:&#34;388,995&#34;,&#34;deaths&#34;:&#34;4,257&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;384,055&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;683&#34;,&#34;total_cases_per_1m_population&#34;:&#34;72,833&#34;,&#34;deaths_per_1m_population&#34;:&#34;797&#34;,&#34;total_tests&#34;:&#34;25,000,000&#34;,&#34;tests_per_1m_population&#34;:&#34;4,680,828&#34;},{&#34;country_name&#34;:&#34;Bosnia and Herzegovina&#34;,&#34;cases&#34;:&#34;376,699&#34;,&#34;deaths&#34;:&#34;15,756&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;192,218&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;168,725&#34;,&#34;total_cases_per_1m_population&#34;:&#34;116,122&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,857&#34;,&#34;total_tests&#34;:&#34;1,752,716&#34;,&#34;tests_per_1m_population&#34;:&#34;540,297&#34;},{&#34;country_name&#34;:&#34;R u00e9union&#34;,&#34;cases&#34;:&#34;374,295&#34;,&#34;deaths&#34;:&#34;742&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;355,605&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;10&#34;,&#34;active_cases&#34;:&#34;17,948&#34;,&#34;total_cases_per_1m_population&#34;:&#34;412,744&#34;,&#34;deaths_per_1m_population&#34;:&#34;818&#34;,&#34;total_tests&#34;:&#34;1,603,660&#34;,&#34;tests_per_1m_population&#34;:&#34;1,768,393&#34;},{&#34;country_name&#34;:&#34;Qatar&#34;,&#34;cases&#34;:&#34;364,089&#34;,&#34;deaths&#34;:&#34;677&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;362,568&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;844&#34;,&#34;total_cases_per_1m_population&#34;:&#34;129,670&#34;,&#34;deaths_per_1m_population&#34;:&#34;241&#34;,&#34;total_tests&#34;:&#34;3,425,362&#34;,&#34;tests_per_1m_population&#34;:&#34;1,219,943&#34;},{&#34;country_name&#34;:&#34;Kenya&#34;,&#34;cases&#34;:&#34;323,696&#34;,&#34;deaths&#34;:&#34;5,649&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;317,909&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;138&#34;,&#34;total_cases_per_1m_population&#34;:&#34;5,790&#34;,&#34;deaths_per_1m_population&#34;:&#34;101&#34;,&#34;total_tests&#34;:&#34;3,581,506&#34;,&#34;tests_per_1m_population&#34;:&#34;64,060&#34;},{&#34;country_name&#34;:&#34;Zambia&#34;,&#34;cases&#34;:&#34;318,984&#34;,&#34;deaths&#34;:&#34;3,974&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;314,075&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;935&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,517&#34;,&#34;deaths_per_1m_population&#34;:&#34;206&#34;,&#34;total_tests&#34;:&#34;3,408,441&#34;,&#34;tests_per_1m_population&#34;:&#34;176,487&#34;},{&#34;country_name&#34;:&#34;North Macedonia&#34;,&#34;cases&#34;:&#34;309,062&#34;,&#34;deaths&#34;:&#34;9,271&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;299,064&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;727&#34;,&#34;total_cases_per_1m_population&#34;:&#34;148,358&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,450&#34;,&#34;total_tests&#34;:&#34;2,007,553&#34;,&#34;tests_per_1m_population&#34;:&#34;963,678&#34;},{&#34;country_name&#34;:&#34;Botswana&#34;,&#34;cases&#34;:&#34;305,859&#34;,&#34;deaths&#34;:&#34;2,688&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;303,026&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;145&#34;,&#34;total_cases_per_1m_population&#34;:&#34;125,491&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,103&#34;,&#34;total_tests&#34;:&#34;2,026,898&#34;,&#34;tests_per_1m_population&#34;:&#34;831,613&#34;},{&#34;country_name&#34;:&#34;Albania&#34;,&#34;cases&#34;:&#34;274,791&#34;,&#34;deaths&#34;:&#34;3,496&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;270,869&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;426&#34;,&#34;total_cases_per_1m_population&#34;:&#34;95,675&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,217&#34;,&#34;total_tests&#34;:&#34;1,799,730&#34;,&#34;tests_per_1m_population&#34;:&#34;626,620&#34;},{&#34;country_name&#34;:&#34;Algeria&#34;,&#34;cases&#34;:&#34;265,761&#34;,&#34;deaths&#34;:&#34;6,874&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;178,344&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;80,543&#34;,&#34;total_cases_per_1m_population&#34;:&#34;5,869&#34;,&#34;deaths_per_1m_population&#34;:&#34;152&#34;,&#34;total_tests&#34;:&#34;230,861&#34;,&#34;tests_per_1m_population&#34;:&#34;5,099&#34;},{&#34;country_name&#34;:&#34;Nigeria&#34;,&#34;cases&#34;:&#34;255,685&#34;,&#34;deaths&#34;:&#34;3,143&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;249,890&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;2,652&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,187&#34;,&#34;deaths_per_1m_population&#34;:&#34;15&#34;,&#34;total_tests&#34;:&#34;5,036,813&#34;,&#34;tests_per_1m_population&#34;:&#34;23,388&#34;},{&#34;country_name&#34;:&#34;Zimbabwe&#34;,&#34;cases&#34;:&#34;247,524&#34;,&#34;deaths&#34;:&#34;5,468&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;241,362&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;12&#34;,&#34;active_cases&#34;:&#34;694&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,227&#34;,&#34;deaths_per_1m_population&#34;:&#34;358&#34;,&#34;total_tests&#34;:&#34;2,240,305&#34;,&#34;tests_per_1m_population&#34;:&#34;146,872&#34;},{&#34;country_name&#34;:&#34;Uzbekistan&#34;,&#34;cases&#34;:&#34;238,469&#34;,&#34;deaths&#34;:&#34;1,637&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;236,483&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;27&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;349&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,943&#34;,&#34;deaths_per_1m_population&#34;:&#34;48&#34;,&#34;total_tests&#34;:&#34;1,377,915&#34;,&#34;tests_per_1m_population&#34;:&#34;40,120&#34;},{&#34;country_name&#34;:&#34;Montenegro&#34;,&#34;cases&#34;:&#34;234,619&#34;,&#34;deaths&#34;:&#34;2,713&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;231,297&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;609&#34;,&#34;total_cases_per_1m_population&#34;:&#34;373,473&#34;,&#34;deaths_per_1m_population&#34;:&#34;4,319&#34;,&#34;total_tests&#34;:&#34;2,444,820&#34;,&#34;tests_per_1m_population&#34;:&#34;3,891,730&#34;},{&#34;country_name&#34;:&#34;Luxembourg&#34;,&#34;cases&#34;:&#34;233,966&#34;,&#34;deaths&#34;:&#34;1,058&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;221,501&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;11,407&#34;,&#34;total_cases_per_1m_population&#34;:&#34;363,099&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,642&#34;,&#34;total_tests&#34;:&#34;4,213,886&#34;,&#34;tests_per_1m_population&#34;:&#34;6,539,666&#34;},{&#34;country_name&#34;:&#34;Mozambique&#34;,&#34;cases&#34;:&#34;225,358&#34;,&#34;deaths&#34;:&#34;2,201&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;223,104&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;13&#34;,&#34;active_cases&#34;:&#34;53&#34;,&#34;total_cases_per_1m_population&#34;:&#34;6,863&#34;,&#34;deaths_per_1m_population&#34;:&#34;67&#34;,&#34;total_tests&#34;:&#34;1,308,458&#34;,&#34;tests_per_1m_population&#34;:&#34;39,849&#34;},{&#34;country_name&#34;:&#34;Laos&#34;,&#34;cases&#34;:&#34;205,975&#34;,&#34;deaths&#34;:&#34;732&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,660&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;1,082&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;197,583&#34;,&#34;total_cases_per_1m_population&#34;:&#34;27,588&#34;,&#34;deaths_per_1m_population&#34;:&#34;98&#34;,&#34;total_tests&#34;:&#34;1,232,128&#34;,&#34;tests_per_1m_population&#34;:&#34;165,029&#34;},{&#34;country_name&#34;:&#34;Kyrgyzstan&#34;,&#34;cases&#34;:&#34;200,983&#34;,&#34;deaths&#34;:&#34;2,991&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;196,386&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;131&#34;,&#34;active_cases&#34;:&#34;1,606&#34;,&#34;total_cases_per_1m_population&#34;:&#34;29,915&#34;,&#34;deaths_per_1m_population&#34;:&#34;445&#34;,&#34;total_tests&#34;:&#34;1,907,195&#34;,&#34;tests_per_1m_population&#34;:&#34;283,874&#34;},{&#34;country_name&#34;:&#34;China&#34;,&#34;cases&#34;:&#34;200,654&#34;,&#34;deaths&#34;:&#34;4,725&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;166,398&#34;,&#34;new_deaths&#34;:&#34;39&#34;,&#34;new_cases&#34;:&#34;1,580&#34;,&#34;serious_critical&#34;:&#34;236&#34;,&#34;active_cases&#34;:&#34;29,531&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139&#34;,&#34;deaths_per_1m_population&#34;:&#34;3&#34;,&#34;total_tests&#34;:&#34;160,000,000&#34;,&#34;tests_per_1m_population&#34;:&#34;111,163&#34;},{&#34;country_name&#34;:&#34;Iceland&#34;,&#34;cases&#34;:&#34;183,974&#34;,&#34;deaths&#34;:&#34;112&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;75,685&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;108,177&#34;,&#34;total_cases_per_1m_population&#34;:&#34;532,886&#34;,&#34;deaths_per_1m_population&#34;:&#34;324&#34;,&#34;total_tests&#34;:&#34;1,953,616&#34;,&#34;tests_per_1m_population&#34;:&#34;5,658,702&#34;},{&#34;country_name&#34;:&#34;Maldives&#34;,&#34;cases&#34;:&#34;178,883&#34;,&#34;deaths&#34;:&#34;298&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;163,687&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;25&#34;,&#34;active_cases&#34;:&#34;14,898&#34;,&#34;total_cases_per_1m_population&#34;:&#34;320,737&#34;,&#34;deaths_per_1m_population&#34;:&#34;534&#34;,&#34;total_tests&#34;:&#34;2,213,831&#34;,&#34;tests_per_1m_population&#34;:&#34;3,969,395&#34;},{&#34;country_name&#34;:&#34;Afghanistan&#34;,&#34;cases&#34;:&#34;178,689&#34;,&#34;deaths&#34;:&#34;7,682&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;161,748&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;39&#34;,&#34;serious_critical&#34;:&#34;1,124&#34;,&#34;active_cases&#34;:&#34;9,259&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,411&#34;,&#34;deaths_per_1m_population&#34;:&#34;190&#34;,&#34;total_tests&#34;:&#34;940,341&#34;,&#34;tests_per_1m_population&#34;:&#34;23,212&#34;},{&#34;country_name&#34;:&#34;Uganda&#34;,&#34;cases&#34;:&#34;164,069&#34;,&#34;deaths&#34;:&#34;3,596&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;100,205&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;60,268&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,394&#34;,&#34;deaths_per_1m_population&#34;:&#34;74&#34;,&#34;total_tests&#34;:&#34;2,612,795&#34;,&#34;tests_per_1m_population&#34;:&#34;54,043&#34;},{&#34;country_name&#34;:&#34;El Salvador&#34;,&#34;cases&#34;:&#34;162,089&#34;,&#34;deaths&#34;:&#34;4,127&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;150,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;7,300&#34;,&#34;total_cases_per_1m_population&#34;:&#34;24,764&#34;,&#34;deaths_per_1m_population&#34;:&#34;631&#34;,&#34;total_tests&#34;:&#34;1,950,448&#34;,&#34;tests_per_1m_population&#34;:&#34;297,993&#34;},{&#34;country_name&#34;:&#34;Ghana&#34;,&#34;cases&#34;:&#34;161,124&#34;,&#34;deaths&#34;:&#34;1,445&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;159,655&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;24&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,997&#34;,&#34;deaths_per_1m_population&#34;:&#34;45&#34;,&#34;total_tests&#34;:&#34;2,433,244&#34;,&#34;tests_per_1m_population&#34;:&#34;75,465&#34;},{&#34;country_name&#34;:&#34;Namibia&#34;,&#34;cases&#34;:&#34;158,332&#34;,&#34;deaths&#34;:&#34;4,023&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;153,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;647&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,341&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,533&#34;,&#34;total_tests&#34;:&#34;1,001,354&#34;,&#34;tests_per_1m_population&#34;:&#34;381,621&#34;},{&#34;country_name&#34;:&#34;Martinique&#34;,&#34;cases&#34;:&#34;147,519&#34;,&#34;deaths&#34;:&#34;918&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;104&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;146,497&#34;,&#34;total_cases_per_1m_population&#34;:&#34;393,657&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,450&#34;,&#34;total_tests&#34;:&#34;828,928&#34;,&#34;tests_per_1m_population&#34;:&#34;2,212,008&#34;},{&#34;country_name&#34;:&#34;Trinidad and Tobago&#34;,&#34;cases&#34;:&#34;144,359&#34;,&#34;deaths&#34;:&#34;3,812&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;133,604&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;18&#34;,&#34;active_cases&#34;:&#34;6,943&#34;,&#34;total_cases_per_1m_population&#34;:&#34;102,552&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,708&#34;,&#34;total_tests&#34;:&#34;696,148&#34;,&#34;tests_per_1m_population&#34;:&#34;494,540&#34;},{&#34;country_name&#34;:&#34;Brunei&#34;,&#34;cases&#34;:&#34;141,014&#34;,&#34;deaths&#34;:&#34;218&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;139,724&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,072&#34;,&#34;total_cases_per_1m_population&#34;:&#34;316,857&#34;,&#34;deaths_per_1m_population&#34;:&#34;490&#34;,&#34;total_tests&#34;:&#34;717,784&#34;,&#34;tests_per_1m_population&#34;:&#34;1,612,853&#34;},{&#34;country_name&#34;:&#34;Guadeloupe&#34;,&#34;cases&#34;:&#34;140,130&#34;,&#34;deaths&#34;:&#34;854&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,250&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;19&#34;,&#34;active_cases&#34;:&#34;137,026&#34;,&#34;total_cases_per_1m_population&#34;:&#34;350,108&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,134&#34;,&#34;total_tests&#34;:&#34;938,039&#34;,&#34;tests_per_1m_population&#34;:&#34;2,343,644&#34;},{&#34;country_name&#34;:&#34;Cambodia&#34;,&#34;cases&#34;:&#34;136,200&#34;,&#34;deaths&#34;:&#34;3,056&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;132,896&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;248&#34;,&#34;total_cases_per_1m_population&#34;:&#34;7,948&#34;,&#34;deaths_per_1m_population&#34;:&#34;178&#34;,&#34;total_tests&#34;:&#34;2,946,965&#34;,&#34;tests_per_1m_population&#34;:&#34;171,969&#34;},{&#34;country_name&#34;:&#34;Rwanda&#34;,&#34;cases&#34;:&#34;129,764&#34;,&#34;deaths&#34;:&#34;1,458&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;45,522&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;82,784&#34;,&#34;total_cases_per_1m_population&#34;:&#34;9,590&#34;,&#34;deaths_per_1m_population&#34;:&#34;108&#34;,&#34;total_tests&#34;:&#34;5,225,494&#34;,&#34;tests_per_1m_population&#34;:&#34;386,173&#34;},{&#34;country_name&#34;:&#34;Jamaica&#34;,&#34;cases&#34;:&#34;129,489&#34;,&#34;deaths&#34;:&#34;2,943&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;82,965&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;43,581&#34;,&#34;total_cases_per_1m_population&#34;:&#34;43,387&#34;,&#34;deaths_per_1m_population&#34;:&#34;986&#34;,&#34;total_tests&#34;:&#34;981,688&#34;,&#34;tests_per_1m_population&#34;:&#34;328,929&#34;},{&#34;country_name&#34;:&#34;Cameroon&#34;,&#34;cases&#34;:&#34;119,780&#34;,&#34;deaths&#34;:&#34;1,927&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;117,791&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;13&#34;,&#34;active_cases&#34;:&#34;62&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,318&#34;,&#34;deaths_per_1m_population&#34;:&#34;69&#34;,&#34;total_tests&#34;:&#34;1,751,774&#34;,&#34;tests_per_1m_population&#34;:&#34;63,154&#34;},{&#34;country_name&#34;:&#34;Angola&#34;,&#34;cases&#34;:&#34;99,194&#34;,&#34;deaths&#34;:&#34;1,900&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;97,149&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;145&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,858&#34;,&#34;deaths_per_1m_population&#34;:&#34;55&#34;,&#34;total_tests&#34;:&#34;1,499,795&#34;,&#34;tests_per_1m_population&#34;:&#34;43,209&#34;},{&#34;country_name&#34;:&#34;Malta&#34;,&#34;cases&#34;:&#34;90,595&#34;,&#34;deaths&#34;:&#34;688&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;84,646&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;196&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;5,261&#34;,&#34;total_cases_per_1m_population&#34;:&#34;204,196&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,551&#34;,&#34;total_tests&#34;:&#34;1,872,465&#34;,&#34;tests_per_1m_population&#34;:&#34;4,220,438&#34;},{&#34;country_name&#34;:&#34;DRC&#34;,&#34;cases&#34;:&#34;87,023&#34;,&#34;deaths&#34;:&#34;1,337&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;50,930&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;34,756&#34;,&#34;total_cases_per_1m_population&#34;:&#34;921&#34;,&#34;deaths_per_1m_population&#34;:&#34;14&#34;,&#34;total_tests&#34;:&#34;846,704&#34;,&#34;tests_per_1m_population&#34;:&#34;8,962&#34;},{&#34;country_name&#34;:&#34;Senegal&#34;,&#34;cases&#34;:&#34;85,984&#34;,&#34;deaths&#34;:&#34;1,966&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;84,001&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;17&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,902&#34;,&#34;deaths_per_1m_population&#34;:&#34;112&#34;,&#34;total_tests&#34;:&#34;1,063,849&#34;,&#34;tests_per_1m_population&#34;:&#34;60,653&#34;},{&#34;country_name&#34;:&#34;Malawi&#34;,&#34;cases&#34;:&#34;85,747&#34;,&#34;deaths&#34;:&#34;2,633&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;81,938&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;67&#34;,&#34;active_cases&#34;:&#34;1,176&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,283&#34;,&#34;deaths_per_1m_population&#34;:&#34;132&#34;,&#34;total_tests&#34;:&#34;571,585&#34;,&#34;tests_per_1m_population&#34;:&#34;28,548&#34;},{&#34;country_name&#34;:&#34;Ivory Coast&#34;,&#34;cases&#34;:&#34;81,887&#34;,&#34;deaths&#34;:&#34;799&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;81,061&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;27&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,972&#34;,&#34;deaths_per_1m_population&#34;:&#34;29&#34;,&#34;total_tests&#34;:&#34;1,494,624&#34;,&#34;tests_per_1m_population&#34;:&#34;54,238&#34;},{&#34;country_name&#34;:&#34;French Guiana&#34;,&#34;cases&#34;:&#34;80,422&#34;,&#34;deaths&#34;:&#34;394&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,254&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;68,774&#34;,&#34;total_cases_per_1m_population&#34;:&#34;257,228&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,260&#34;,&#34;total_tests&#34;:&#34;622,646&#34;,&#34;tests_per_1m_population&#34;:&#34;1,991,518&#34;},{&#34;country_name&#34;:&#34;Suriname&#34;,&#34;cases&#34;:&#34;79,302&#34;,&#34;deaths&#34;:&#34;1,327&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;49,396&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;28,579&#34;,&#34;total_cases_per_1m_population&#34;:&#34;133,030&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,226&#34;,&#34;total_tests&#34;:&#34;235,824&#34;,&#34;tests_per_1m_population&#34;:&#34;395,598&#34;},{&#34;country_name&#34;:&#34;Channel Islands&#34;,&#34;cases&#34;:&#34;73,609&#34;,&#34;deaths&#34;:&#34;166&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;72,059&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,384&#34;,&#34;total_cases_per_1m_population&#34;:&#34;416,444&#34;,&#34;deaths_per_1m_population&#34;:&#34;939&#34;,&#34;total_tests&#34;:&#34;1,252,808&#34;,&#34;tests_per_1m_population&#34;:&#34;7,087,782&#34;},{&#34;country_name&#34;:&#34;French Polynesia&#34;,&#34;cases&#34;:&#34;72,648&#34;,&#34;deaths&#34;:&#34;648&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;255,948&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,283&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Eswatini&#34;,&#34;cases&#34;:&#34;70,284&#34;,&#34;deaths&#34;:&#34;1,397&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;68,764&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;123&#34;,&#34;total_cases_per_1m_population&#34;:&#34;59,470&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,182&#34;,&#34;total_tests&#34;:&#34;1,012,397&#34;,&#34;tests_per_1m_population&#34;:&#34;856,623&#34;},{&#34;country_name&#34;:&#34;Barbados&#34;,&#34;cases&#34;:&#34;67,256&#34;,&#34;deaths&#34;:&#34;389&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;63,424&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,443&#34;,&#34;total_cases_per_1m_population&#34;:&#34;233,520&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,351&#34;,&#34;total_tests&#34;:&#34;640,085&#34;,&#34;tests_per_1m_population&#34;:&#34;2,222,440&#34;},{&#34;country_name&#34;:&#34;Fiji&#34;,&#34;cases&#34;:&#34;64,524&#34;,&#34;deaths&#34;:&#34;862&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;62,677&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;985&#34;,&#34;total_cases_per_1m_population&#34;:&#34;71,048&#34;,&#34;deaths_per_1m_population&#34;:&#34;949&#34;,&#34;total_tests&#34;:&#34;506,642&#34;,&#34;tests_per_1m_population&#34;:&#34;557,871&#34;},{&#34;country_name&#34;:&#34;Madagascar&#34;,&#34;cases&#34;:&#34;64,121&#34;,&#34;deaths&#34;:&#34;1,391&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;59,370&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;14&#34;,&#34;active_cases&#34;:&#34;3,360&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,213&#34;,&#34;deaths_per_1m_population&#34;:&#34;48&#34;,&#34;total_tests&#34;:&#34;418,849&#34;,&#34;tests_per_1m_population&#34;:&#34;14,455&#34;},{&#34;country_name&#34;:&#34;Guyana&#34;,&#34;cases&#34;:&#34;63,413&#34;,&#34;deaths&#34;:&#34;1,228&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;62,092&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;93&#34;,&#34;total_cases_per_1m_population&#34;:&#34;79,925&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,548&#34;,&#34;total_tests&#34;:&#34;590,638&#34;,&#34;tests_per_1m_population&#34;:&#34;744,436&#34;},{&#34;country_name&#34;:&#34;Sudan&#34;,&#34;cases&#34;:&#34;62,093&#34;,&#34;deaths&#34;:&#34;4,930&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,359&#34;,&#34;deaths_per_1m_population&#34;:&#34;108&#34;,&#34;total_tests&#34;:&#34;562,941&#34;,&#34;tests_per_1m_population&#34;:&#34;12,319&#34;},{&#34;country_name&#34;:&#34;New Caledonia&#34;,&#34;cases&#34;:&#34;60,457&#34;,&#34;deaths&#34;:&#34;312&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;60,064&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;9&#34;,&#34;active_cases&#34;:&#34;81&#34;,&#34;total_cases_per_1m_population&#34;:&#34;208,148&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,074&#34;,&#34;total_tests&#34;:&#34;98,964&#34;,&#34;tests_per_1m_population&#34;:&#34;340,724&#34;},{&#34;country_name&#34;:&#34;Mauritania&#34;,&#34;cases&#34;:&#34;58,683&#34;,&#34;deaths&#34;:&#34;982&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;57,693&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8&#34;,&#34;total_cases_per_1m_population&#34;:&#34;12,050&#34;,&#34;deaths_per_1m_population&#34;:&#34;202&#34;,&#34;total_tests&#34;:&#34;799,187&#34;,&#34;tests_per_1m_population&#34;:&#34;164,099&#34;},{&#34;country_name&#34;:&#34;Bhutan&#34;,&#34;cases&#34;:&#34;57,771&#34;,&#34;deaths&#34;:&#34;20&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;53,080&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;431&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;4,671&#34;,&#34;total_cases_per_1m_population&#34;:&#34;73,412&#34;,&#34;deaths_per_1m_population&#34;:&#34;25&#34;,&#34;total_tests&#34;:&#34;2,284,301&#34;,&#34;tests_per_1m_population&#34;:&#34;2,902,749&#34;},{&#34;country_name&#34;:&#34;Belize&#34;,&#34;cases&#34;:&#34;57,419&#34;,&#34;deaths&#34;:&#34;676&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;56,534&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;209&#34;,&#34;total_cases_per_1m_population&#34;:&#34;139,823&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,646&#34;,&#34;total_tests&#34;:&#34;534,770&#34;,&#34;tests_per_1m_population&#34;:&#34;1,302,237&#34;},{&#34;country_name&#34;:&#34;Taiwan&#34;,&#34;cases&#34;:&#34;56,468&#34;,&#34;deaths&#34;:&#34;856&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;23,729&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;5,172&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;31,883&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,363&#34;,&#34;deaths_per_1m_population&#34;:&#34;36&#34;,&#34;total_tests&#34;:&#34;14,289,370&#34;,&#34;tests_per_1m_population&#34;:&#34;598,017&#34;},{&#34;country_name&#34;:&#34;Cabo Verde&#34;,&#34;cases&#34;:&#34;56,004&#34;,&#34;deaths&#34;:&#34;401&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;55,538&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;65&#34;,&#34;total_cases_per_1m_population&#34;:&#34;98,792&#34;,&#34;deaths_per_1m_population&#34;:&#34;707&#34;,&#34;total_tests&#34;:&#34;400,982&#34;,&#34;tests_per_1m_population&#34;:&#34;707,340&#34;},{&#34;country_name&#34;:&#34;Syria&#34;,&#34;cases&#34;:&#34;55,795&#34;,&#34;deaths&#34;:&#34;3,150&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;52,090&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;555&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,054&#34;,&#34;deaths_per_1m_population&#34;:&#34;172&#34;,&#34;total_tests&#34;:&#34;146,269&#34;,&#34;tests_per_1m_population&#34;:&#34;8,007&#34;},{&#34;country_name&#34;:&#34;Gabon&#34;,&#34;cases&#34;:&#34;47,597&#34;,&#34;deaths&#34;:&#34;303&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;47,282&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;12&#34;,&#34;total_cases_per_1m_population&#34;:&#34;20,512&#34;,&#34;deaths_per_1m_population&#34;:&#34;131&#34;,&#34;total_tests&#34;:&#34;1,592,483&#34;,&#34;tests_per_1m_population&#34;:&#34;686,270&#34;},{&#34;country_name&#34;:&#34;Papua New Guinea&#34;,&#34;cases&#34;:&#34;43,732&#34;,&#34;deaths&#34;:&#34;649&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;43,025&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;58&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,726&#34;,&#34;deaths_per_1m_population&#34;:&#34;70&#34;,&#34;total_tests&#34;:&#34;249,149&#34;,&#34;tests_per_1m_population&#34;:&#34;26,927&#34;},{&#34;country_name&#34;:&#34;Seychelles&#34;,&#34;cases&#34;:&#34;42,079&#34;,&#34;deaths&#34;:&#34;165&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;41,260&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;654&#34;,&#34;total_cases_per_1m_population&#34;:&#34;423,134&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,659&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Cura u00e7ao&#34;,&#34;cases&#34;:&#34;41,966&#34;,&#34;deaths&#34;:&#34;273&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;41,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;442&#34;,&#34;total_cases_per_1m_population&#34;:&#34;253,872&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,652&#34;,&#34;total_tests&#34;:&#34;496,693&#34;,&#34;tests_per_1m_population&#34;:&#34;3,004,725&#34;},{&#34;country_name&#34;:&#34;Andorra&#34;,&#34;cases&#34;:&#34;41,013&#34;,&#34;deaths&#34;:&#34;153&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;40,343&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;14&#34;,&#34;active_cases&#34;:&#34;517&#34;,&#34;total_cases_per_1m_population&#34;:&#34;529,282&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,974&#34;,&#34;total_tests&#34;:&#34;249,838&#34;,&#34;tests_per_1m_population&#34;:&#34;3,224,215&#34;},{&#34;country_name&#34;:&#34;Burundi&#34;,&#34;cases&#34;:&#34;38,887&#34;,&#34;deaths&#34;:&#34;38&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;773&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;38,076&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,104&#34;,&#34;deaths_per_1m_population&#34;:&#34;3&#34;,&#34;total_tests&#34;:&#34;345,742&#34;,&#34;tests_per_1m_population&#34;:&#34;27,594&#34;},{&#34;country_name&#34;:&#34;Mauritius&#34;,&#34;cases&#34;:&#34;37,656&#34;,&#34;deaths&#34;:&#34;990&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;35,656&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,010&#34;,&#34;total_cases_per_1m_population&#34;:&#34;29,521&#34;,&#34;deaths_per_1m_population&#34;:&#34;776&#34;,&#34;total_tests&#34;:&#34;358,675&#34;,&#34;tests_per_1m_population&#34;:&#34;281,186&#34;},{&#34;country_name&#34;:&#34;Mayotte&#34;,&#34;cases&#34;:&#34;37,038&#34;,&#34;deaths&#34;:&#34;187&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,964&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;33,887&#34;,&#34;total_cases_per_1m_population&#34;:&#34;130,099&#34;,&#34;deaths_per_1m_population&#34;:&#34;657&#34;,&#34;total_tests&#34;:&#34;176,919&#34;,&#34;tests_per_1m_population&#34;:&#34;621,442&#34;},{&#34;country_name&#34;:&#34;Togo&#34;,&#34;cases&#34;:&#34;36,977&#34;,&#34;deaths&#34;:&#34;273&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;36,679&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;25&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,285&#34;,&#34;deaths_per_1m_population&#34;:&#34;32&#34;,&#34;total_tests&#34;:&#34;727,740&#34;,&#34;tests_per_1m_population&#34;:&#34;84,338&#34;},{&#34;country_name&#34;:&#34;Guinea&#34;,&#34;cases&#34;:&#34;36,459&#34;,&#34;deaths&#34;:&#34;440&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;35,976&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;8&#34;,&#34;active_cases&#34;:&#34;43&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,647&#34;,&#34;deaths_per_1m_population&#34;:&#34;32&#34;,&#34;total_tests&#34;:&#34;660,107&#34;,&#34;tests_per_1m_population&#34;:&#34;47,919&#34;},{&#34;country_name&#34;:&#34;Faeroe Islands&#34;,&#34;cases&#34;:&#34;34,658&#34;,&#34;deaths&#34;:&#34;28&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,693&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;26,937&#34;,&#34;total_cases_per_1m_population&#34;:&#34;704,460&#34;,&#34;deaths_per_1m_population&#34;:&#34;569&#34;,&#34;total_tests&#34;:&#34;778,000&#34;,&#34;tests_per_1m_population&#34;:&#34;15,813,651&#34;},{&#34;country_name&#34;:&#34;Aruba&#34;,&#34;cases&#34;:&#34;34,589&#34;,&#34;deaths&#34;:&#34;212&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;34,251&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;126&#34;,&#34;total_cases_per_1m_population&#34;:&#34;321,507&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,971&#34;,&#34;total_tests&#34;:&#34;177,885&#34;,&#34;tests_per_1m_population&#34;:&#34;1,653,452&#34;},{&#34;country_name&#34;:&#34;Tanzania&#34;,&#34;cases&#34;:&#34;33,864&#34;,&#34;deaths&#34;:&#34;803&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;539&#34;,&#34;deaths_per_1m_population&#34;:&#34;13&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Bahamas&#34;,&#34;cases&#34;:&#34;33,463&#34;,&#34;deaths&#34;:&#34;789&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;32,310&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;11&#34;,&#34;active_cases&#34;:&#34;364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;83,652&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,972&#34;,&#34;total_tests&#34;:&#34;229,817&#34;,&#34;tests_per_1m_population&#34;:&#34;574,504&#34;},{&#34;country_name&#34;:&#34;Lesotho&#34;,&#34;cases&#34;:&#34;32,910&#34;,&#34;deaths&#34;:&#34;697&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;24,155&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8,058&#34;,&#34;total_cases_per_1m_population&#34;:&#34;15,146&#34;,&#34;deaths_per_1m_population&#34;:&#34;321&#34;,&#34;total_tests&#34;:&#34;431,221&#34;,&#34;tests_per_1m_population&#34;:&#34;198,454&#34;},{&#34;country_name&#34;:&#34;Mali&#34;,&#34;cases&#34;:&#34;30,727&#34;,&#34;deaths&#34;:&#34;731&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,795&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;201&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,442&#34;,&#34;deaths_per_1m_population&#34;:&#34;34&#34;,&#34;total_tests&#34;:&#34;663,805&#34;,&#34;tests_per_1m_population&#34;:&#34;31,160&#34;},{&#34;country_name&#34;:&#34;Haiti&#34;,&#34;cases&#34;:&#34;30,640&#34;,&#34;deaths&#34;:&#34;835&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29,389&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;416&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,629&#34;,&#34;deaths_per_1m_population&#34;:&#34;72&#34;,&#34;total_tests&#34;:&#34;132,422&#34;,&#34;tests_per_1m_population&#34;:&#34;11,363&#34;},{&#34;country_name&#34;:&#34;Isle of Man&#34;,&#34;cases&#34;:&#34;28,416&#34;,&#34;deaths&#34;:&#34;87&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;26,794&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,535&#34;,&#34;total_cases_per_1m_population&#34;:&#34;331,015&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,013&#34;,&#34;total_tests&#34;:&#34;150,753&#34;,&#34;tests_per_1m_population&#34;:&#34;1,756,107&#34;},{&#34;country_name&#34;:&#34;Benin&#34;,&#34;cases&#34;:&#34;26,952&#34;,&#34;deaths&#34;:&#34;163&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;25,506&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;1,283&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,123&#34;,&#34;deaths_per_1m_population&#34;:&#34;13&#34;,&#34;total_tests&#34;:&#34;604,310&#34;,&#34;tests_per_1m_population&#34;:&#34;47,598&#34;},{&#34;country_name&#34;:&#34;Somalia&#34;,&#34;cases&#34;:&#34;26,485&#34;,&#34;deaths&#34;:&#34;1,350&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,182&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;11,953&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,587&#34;,&#34;deaths_per_1m_population&#34;:&#34;81&#34;,&#34;total_tests&#34;:&#34;400,466&#34;,&#34;tests_per_1m_population&#34;:&#34;23,990&#34;},{&#34;country_name&#34;:&#34;Congo&#34;,&#34;cases&#34;:&#34;24,079&#34;,&#34;deaths&#34;:&#34;385&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,178&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;3,516&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,178&#34;,&#34;deaths_per_1m_population&#34;:&#34;67&#34;,&#34;total_tests&#34;:&#34;347,815&#34;,&#34;tests_per_1m_population&#34;:&#34;60,352&#34;},{&#34;country_name&#34;:&#34;Saint Lucia&#34;,&#34;cases&#34;:&#34;23,239&#34;,&#34;deaths&#34;:&#34;368&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;22,736&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;135&#34;,&#34;total_cases_per_1m_population&#34;:&#34;125,520&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,988&#34;,&#34;total_tests&#34;:&#34;142,630&#34;,&#34;tests_per_1m_population&#34;:&#34;770,382&#34;},{&#34;country_name&#34;:&#34;Timor-Leste&#34;,&#34;cases&#34;:&#34;22,860&#34;,&#34;deaths&#34;:&#34;130&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;22,714&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;16&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16,762&#34;,&#34;deaths_per_1m_population&#34;:&#34;95&#34;,&#34;total_tests&#34;:&#34;261,007&#34;,&#34;tests_per_1m_population&#34;:&#34;191,388&#34;},{&#34;country_name&#34;:&#34;Cayman Islands&#34;,&#34;cases&#34;:&#34;21,755&#34;,&#34;deaths&#34;:&#34;26&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,553&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;13,176&#34;,&#34;total_cases_per_1m_population&#34;:&#34;324,145&#34;,&#34;deaths_per_1m_population&#34;:&#34;387&#34;,&#34;total_tests&#34;:&#34;222,773&#34;,&#34;tests_per_1m_population&#34;:&#34;3,319,273&#34;},{&#34;country_name&#34;:&#34;Burkina Faso&#34;,&#34;cases&#34;:&#34;20,853&#34;,&#34;deaths&#34;:&#34;382&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;20,439&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;32&#34;,&#34;total_cases_per_1m_population&#34;:&#34;951&#34;,&#34;deaths_per_1m_population&#34;:&#34;17&#34;,&#34;total_tests&#34;:&#34;248,995&#34;,&#34;tests_per_1m_population&#34;:&#34;11,350&#34;},{&#34;country_name&#34;:&#34;Nicaragua&#34;,&#34;cases&#34;:&#34;18,491&#34;,&#34;deaths&#34;:&#34;225&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,225&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;14,041&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,733&#34;,&#34;deaths_per_1m_population&#34;:&#34;33&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Gibraltar&#34;,&#34;cases&#34;:&#34;17,706&#34;,&#34;deaths&#34;:&#34;102&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;16,579&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,025&#34;,&#34;total_cases_per_1m_population&#34;:&#34;525,822&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,029&#34;,&#34;total_tests&#34;:&#34;534,283&#34;,&#34;tests_per_1m_population&#34;:&#34;15,866,807&#34;},{&#34;country_name&#34;:&#34;South Sudan&#34;,&#34;cases&#34;:&#34;17,422&#34;,&#34;deaths&#34;:&#34;138&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,514&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;3,770&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,524&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;376,391&#34;,&#34;tests_per_1m_population&#34;:&#34;32,928&#34;},{&#34;country_name&#34;:&#34;Tajikistan&#34;,&#34;cases&#34;:&#34;17,388&#34;,&#34;deaths&#34;:&#34;124&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;17,264&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,752&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Liechtenstein&#34;,&#34;cases&#34;:&#34;17,103&#34;,&#34;deaths&#34;:&#34;85&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;16,831&#34;,&#34;new_deaths&#34;:&#34;1&#34;,&#34;new_cases&#34;:&#34;12&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;187&#34;,&#34;total_cases_per_1m_population&#34;:&#34;446,251&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,218&#34;,&#34;total_tests&#34;:&#34;102,174&#34;,&#34;tests_per_1m_population&#34;:&#34;2,665,919&#34;},{&#34;country_name&#34;:&#34;San Marino&#34;,&#34;cases&#34;:&#34;16,140&#34;,&#34;deaths&#34;:&#34;114&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,662&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;364&#34;,&#34;total_cases_per_1m_population&#34;:&#34;473,870&#34;,&#34;deaths_per_1m_population&#34;:&#34;3,347&#34;,&#34;total_tests&#34;:&#34;149,271&#34;,&#34;tests_per_1m_population&#34;:&#34;4,382,590&#34;},{&#34;country_name&#34;:&#34;Equatorial Guinea&#34;,&#34;cases&#34;:&#34;15,907&#34;,&#34;deaths&#34;:&#34;183&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,698&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;26&#34;,&#34;total_cases_per_1m_population&#34;:&#34;10,704&#34;,&#34;deaths_per_1m_population&#34;:&#34;123&#34;,&#34;total_tests&#34;:&#34;310,972&#34;,&#34;tests_per_1m_population&#34;:&#34;209,251&#34;},{&#34;country_name&#34;:&#34;Djibouti&#34;,&#34;cases&#34;:&#34;15,611&#34;,&#34;deaths&#34;:&#34;189&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;15,411&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;11&#34;,&#34;total_cases_per_1m_population&#34;:&#34;15,396&#34;,&#34;deaths_per_1m_population&#34;:&#34;186&#34;,&#34;total_tests&#34;:&#34;303,924&#34;,&#34;tests_per_1m_population&#34;:&#34;299,748&#34;},{&#34;country_name&#34;:&#34;CAR&#34;,&#34;cases&#34;:&#34;14,649&#34;,&#34;deaths&#34;:&#34;113&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,859&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;7,677&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,941&#34;,&#34;deaths_per_1m_population&#34;:&#34;23&#34;,&#34;total_tests&#34;:&#34;81,294&#34;,&#34;tests_per_1m_population&#34;:&#34;16,320&#34;},{&#34;country_name&#34;:&#34;Grenada&#34;,&#34;cases&#34;:&#34;14,428&#34;,&#34;deaths&#34;:&#34;220&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;13,945&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;263&#34;,&#34;total_cases_per_1m_population&#34;:&#34;127,159&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,939&#34;,&#34;total_tests&#34;:&#34;148,567&#34;,&#34;tests_per_1m_population&#34;:&#34;1,309,376&#34;},{&#34;country_name&#34;:&#34;Bermuda&#34;,&#34;cases&#34;:&#34;13,143&#34;,&#34;deaths&#34;:&#34;131&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;12,719&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;293&#34;,&#34;total_cases_per_1m_population&#34;:&#34;212,453&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,118&#34;,&#34;total_tests&#34;:&#34;866,313&#34;,&#34;tests_per_1m_population&#34;:&#34;14,003,734&#34;},{&#34;country_name&#34;:&#34;Solomon Islands&#34;,&#34;cases&#34;:&#34;12,437&#34;,&#34;deaths&#34;:&#34;139&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,194&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,104&#34;,&#34;total_cases_per_1m_population&#34;:&#34;17,339&#34;,&#34;deaths_per_1m_population&#34;:&#34;194&#34;,&#34;total_tests&#34;:&#34;5,117&#34;,&#34;tests_per_1m_population&#34;:&#34;7,134&#34;},{&#34;country_name&#34;:&#34;Dominica&#34;,&#34;cases&#34;:&#34;12,011&#34;,&#34;deaths&#34;:&#34;63&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,926&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;22&#34;,&#34;total_cases_per_1m_population&#34;:&#34;166,107&#34;,&#34;deaths_per_1m_population&#34;:&#34;871&#34;,&#34;total_tests&#34;:&#34;187,690&#34;,&#34;tests_per_1m_population&#34;:&#34;2,595,666&#34;},{&#34;country_name&#34;:&#34;Gambia&#34;,&#34;cases&#34;:&#34;11,995&#34;,&#34;deaths&#34;:&#34;365&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,591&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;39&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,724&#34;,&#34;deaths_per_1m_population&#34;:&#34;144&#34;,&#34;total_tests&#34;:&#34;155,686&#34;,&#34;tests_per_1m_population&#34;:&#34;61,314&#34;},{&#34;country_name&#34;:&#34;Greenland&#34;,&#34;cases&#34;:&#34;11,971&#34;,&#34;deaths&#34;:&#34;21&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,761&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;9,189&#34;,&#34;total_cases_per_1m_population&#34;:&#34;210,209&#34;,&#34;deaths_per_1m_population&#34;:&#34;369&#34;,&#34;total_tests&#34;:&#34;164,926&#34;,&#34;tests_per_1m_population&#34;:&#34;2,896,081&#34;},{&#34;country_name&#34;:&#34;Yemen&#34;,&#34;cases&#34;:&#34;11,818&#34;,&#34;deaths&#34;:&#34;2,148&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,001&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;23&#34;,&#34;active_cases&#34;:&#34;669&#34;,&#34;total_cases_per_1m_population&#34;:&#34;381&#34;,&#34;deaths_per_1m_population&#34;:&#34;69&#34;,&#34;total_tests&#34;:&#34;265,253&#34;,&#34;tests_per_1m_population&#34;:&#34;8,553&#34;},{&#34;country_name&#34;:&#34;Monaco&#34;,&#34;cases&#34;:&#34;11,604&#34;,&#34;deaths&#34;:&#34;54&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;11,362&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;188&#34;,&#34;total_cases_per_1m_population&#34;:&#34;291,969&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,359&#34;,&#34;total_tests&#34;:&#34;54,960&#34;,&#34;tests_per_1m_population&#34;:&#34;1,382,850&#34;},{&#34;country_name&#34;:&#34;Saint Martin&#34;,&#34;cases&#34;:&#34;10,279&#34;,&#34;deaths&#34;:&#34;63&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,399&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;7&#34;,&#34;active_cases&#34;:&#34;8,817&#34;,&#34;total_cases_per_1m_population&#34;:&#34;257,903&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,581&#34;,&#34;total_tests&#34;:&#34;112,382&#34;,&#34;tests_per_1m_population&#34;:&#34;2,819,701&#34;},{&#34;country_name&#34;:&#34;Sint Maarten&#34;,&#34;cases&#34;:&#34;9,990&#34;,&#34;deaths&#34;:&#34;86&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,841&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;10&#34;,&#34;active_cases&#34;:&#34;63&#34;,&#34;total_cases_per_1m_population&#34;:&#34;228,317&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,965&#34;,&#34;total_tests&#34;:&#34;62,056&#34;,&#34;tests_per_1m_population&#34;:&#34;1,418,261&#34;},{&#34;country_name&#34;:&#34;Eritrea&#34;,&#34;cases&#34;:&#34;9,733&#34;,&#34;deaths&#34;:&#34;103&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,629&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;2,678&#34;,&#34;deaths_per_1m_population&#34;:&#34;28&#34;,&#34;total_tests&#34;:&#34;23,693&#34;,&#34;tests_per_1m_population&#34;:&#34;6,518&#34;},{&#34;country_name&#34;:&#34;Caribbean Netherlands&#34;,&#34;cases&#34;:&#34;9,592&#34;,&#34;deaths&#34;:&#34;34&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9,392&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;166&#34;,&#34;total_cases_per_1m_population&#34;:&#34;359,749&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,275&#34;,&#34;total_tests&#34;:&#34;30,126&#34;,&#34;tests_per_1m_population&#34;:&#34;1,129,880&#34;},{&#34;country_name&#34;:&#34;Tonga&#34;,&#34;cases&#34;:&#34;9,553&#34;,&#34;deaths&#34;:&#34;11&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,306&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1,236&#34;,&#34;total_cases_per_1m_population&#34;:&#34;88,571&#34;,&#34;deaths_per_1m_population&#34;:&#34;102&#34;,&#34;total_tests&#34;:&#34;408,213&#34;,&#34;tests_per_1m_population&#34;:&#34;3,784,761&#34;},{&#34;country_name&#34;:&#34;Niger&#34;,&#34;cases&#34;:&#34;8,914&#34;,&#34;deaths&#34;:&#34;309&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;8,507&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;98&#34;,&#34;total_cases_per_1m_population&#34;:&#34;346&#34;,&#34;deaths_per_1m_population&#34;:&#34;12&#34;,&#34;total_tests&#34;:&#34;249,026&#34;,&#34;tests_per_1m_population&#34;:&#34;9,657&#34;},{&#34;country_name&#34;:&#34;Guinea-Bissau&#34;,&#34;cases&#34;:&#34;8,185&#34;,&#34;deaths&#34;:&#34;171&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,515&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;6&#34;,&#34;active_cases&#34;:&#34;499&#34;,&#34;total_cases_per_1m_population&#34;:&#34;3,989&#34;,&#34;deaths_per_1m_population&#34;:&#34;83&#34;,&#34;total_tests&#34;:&#34;132,611&#34;,&#34;tests_per_1m_population&#34;:&#34;64,628&#34;},{&#34;country_name&#34;:&#34;Comoros&#34;,&#34;cases&#34;:&#34;8,100&#34;,&#34;deaths&#34;:&#34;160&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,933&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;7&#34;,&#34;total_cases_per_1m_population&#34;:&#34;8,970&#34;,&#34;deaths_per_1m_population&#34;:&#34;177&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Sierra Leone&#34;,&#34;cases&#34;:&#34;7,681&#34;,&#34;deaths&#34;:&#34;125&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;929&#34;,&#34;deaths_per_1m_population&#34;:&#34;15&#34;,&#34;total_tests&#34;:&#34;259,958&#34;,&#34;tests_per_1m_population&#34;:&#34;31,435&#34;},{&#34;country_name&#34;:&#34;Antigua and Barbuda&#34;,&#34;cases&#34;:&#34;7,571&#34;,&#34;deaths&#34;:&#34;135&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7,402&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;34&#34;,&#34;total_cases_per_1m_population&#34;:&#34;76,172&#34;,&#34;deaths_per_1m_population&#34;:&#34;1,358&#34;,&#34;total_tests&#34;:&#34;18,901&#34;,&#34;tests_per_1m_population&#34;:&#34;190,164&#34;},{&#34;country_name&#34;:&#34;Liberia&#34;,&#34;cases&#34;:&#34;7,432&#34;,&#34;deaths&#34;:&#34;294&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,747&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;2&#34;,&#34;active_cases&#34;:&#34;1,391&#34;,&#34;total_cases_per_1m_population&#34;:&#34;1,410&#34;,&#34;deaths_per_1m_population&#34;:&#34;56&#34;,&#34;total_tests&#34;:&#34;139,824&#34;,&#34;tests_per_1m_population&#34;:&#34;26,521&#34;},{&#34;country_name&#34;:&#34;Chad&#34;,&#34;cases&#34;:&#34;7,396&#34;,&#34;deaths&#34;:&#34;193&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;4,874&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;2,329&#34;,&#34;total_cases_per_1m_population&#34;:&#34;428&#34;,&#34;deaths_per_1m_population&#34;:&#34;11&#34;,&#34;total_tests&#34;:&#34;191,341&#34;,&#34;tests_per_1m_population&#34;:&#34;11,075&#34;},{&#34;country_name&#34;:&#34;Samoa&#34;,&#34;cases&#34;:&#34;7,185&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1,605&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;5,567&#34;,&#34;total_cases_per_1m_population&#34;:&#34;35,783&#34;,&#34;deaths_per_1m_population&#34;:&#34;65&#34;,&#34;total_tests&#34;:&#34;53,893&#34;,&#34;tests_per_1m_population&#34;:&#34;268,399&#34;},{&#34;country_name&#34;:&#34;Vanuatu&#34;,&#34;cases&#34;:&#34;6,793&#34;,&#34;deaths&#34;:&#34;12&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,991&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;5&#34;,&#34;active_cases&#34;:&#34;790&#34;,&#34;total_cases_per_1m_population&#34;:&#34;21,222&#34;,&#34;deaths_per_1m_population&#34;:&#34;37&#34;,&#34;total_tests&#34;:&#34;24,976&#34;,&#34;tests_per_1m_population&#34;:&#34;78,027&#34;},{&#34;country_name&#34;:&#34;St. Vincent Grenadines&#34;,&#34;cases&#34;:&#34;6,779&#34;,&#34;deaths&#34;:&#34;106&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;6,641&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;32&#34;,&#34;total_cases_per_1m_population&#34;:&#34;60,757&#34;,&#34;deaths_per_1m_population&#34;:&#34;950&#34;,&#34;total_tests&#34;:&#34;98,860&#34;,&#34;tests_per_1m_population&#34;:&#34;886,033&#34;},{&#34;country_name&#34;:&#34;British Virgin Islands&#34;,&#34;cases&#34;:&#34;6,296&#34;,&#34;deaths&#34;:&#34;62&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;205,792&#34;,&#34;deaths_per_1m_population&#34;:&#34;2,027&#34;,&#34;total_tests&#34;:&#34;102,862&#34;,&#34;tests_per_1m_population&#34;:&#34;3,362,163&#34;},{&#34;country_name&#34;:&#34;Sao Tome and Principe&#34;,&#34;cases&#34;:&#34;5,953&#34;,&#34;deaths&#34;:&#34;73&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,875&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;5&#34;,&#34;total_cases_per_1m_population&#34;:&#34;26,282&#34;,&#34;deaths_per_1m_population&#34;:&#34;322&#34;,&#34;total_tests&#34;:&#34;29,036&#34;,&#34;tests_per_1m_population&#34;:&#34;128,193&#34;},{&#34;country_name&#34;:&#34;Turks and Caicos&#34;,&#34;cases&#34;:&#34;5,941&#34;,&#34;deaths&#34;:&#34;36&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,862&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;43&#34;,&#34;total_cases_per_1m_population&#34;:&#34;149,791&#34;,&#34;deaths_per_1m_population&#34;:&#34;908&#34;,&#34;total_tests&#34;:&#34;478,593&#34;,&#34;tests_per_1m_population&#34;:&#34;12,066,789&#34;},{&#34;country_name&#34;:&#34;Saint Kitts and Nevis&#34;,&#34;cases&#34;:&#34;5,561&#34;,&#34;deaths&#34;:&#34;43&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;5,517&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;103,215&#34;,&#34;deaths_per_1m_population&#34;:&#34;798&#34;,&#34;total_tests&#34;:&#34;65,141&#34;,&#34;tests_per_1m_population&#34;:&#34;1,209,046&#34;},{&#34;country_name&#34;:&#34;Cook Islands&#34;,&#34;cases&#34;:&#34;4,727&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,990&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;737&#34;,&#34;total_cases_per_1m_population&#34;:&#34;268,686&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;15,740&#34;,&#34;tests_per_1m_population&#34;:&#34;894,674&#34;},{&#34;country_name&#34;:&#34;St. Barth&#34;,&#34;cases&#34;:&#34;4,432&#34;,&#34;deaths&#34;:&#34;6&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;446,279&#34;,&#34;deaths_per_1m_population&#34;:&#34;604&#34;,&#34;total_tests&#34;:&#34;78,646&#34;,&#34;tests_per_1m_population&#34;:&#34;7,919,243&#34;},{&#34;country_name&#34;:&#34;Palau&#34;,&#34;cases&#34;:&#34;4,396&#34;,&#34;deaths&#34;:&#34;6&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3,879&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;511&#34;,&#34;total_cases_per_1m_population&#34;:&#34;240,877&#34;,&#34;deaths_per_1m_population&#34;:&#34;329&#34;,&#34;total_tests&#34;:&#34;45,500&#34;,&#34;tests_per_1m_population&#34;:&#34;2,493,151&#34;},{&#34;country_name&#34;:&#34;Kiribati&#34;,&#34;cases&#34;:&#34;3,076&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,597&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;3&#34;,&#34;active_cases&#34;:&#34;466&#34;,&#34;total_cases_per_1m_population&#34;:&#34;25,058&#34;,&#34;deaths_per_1m_population&#34;:&#34;106&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Anguilla&#34;,&#34;cases&#34;:&#34;2,731&#34;,&#34;deaths&#34;:&#34;9&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,716&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;4&#34;,&#34;active_cases&#34;:&#34;6&#34;,&#34;total_cases_per_1m_population&#34;:&#34;179,141&#34;,&#34;deaths_per_1m_population&#34;:&#34;590&#34;,&#34;total_tests&#34;:&#34;51,382&#34;,&#34;tests_per_1m_population&#34;:&#34;3,370,417&#34;},{&#34;country_name&#34;:&#34;Saint Pierre Miquelon&#34;,&#34;cases&#34;:&#34;2,641&#34;,&#34;deaths&#34;:&#34;1&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2,449&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;1&#34;,&#34;active_cases&#34;:&#34;191&#34;,&#34;total_cases_per_1m_population&#34;:&#34;459,864&#34;,&#34;deaths_per_1m_population&#34;:&#34;174&#34;,&#34;total_tests&#34;:&#34;22,941&#34;,&#34;tests_per_1m_population&#34;:&#34;3,994,602&#34;},{&#34;country_name&#34;:&#34;Diamond Princess&#34;,&#34;cases&#34;:&#34;712&#34;,&#34;deaths&#34;:&#34;13&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;699&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;0&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Wallis and Futuna&#34;,&#34;cases&#34;:&#34;454&#34;,&#34;deaths&#34;:&#34;7&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;438&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;9&#34;,&#34;total_cases_per_1m_population&#34;:&#34;41,713&#34;,&#34;deaths_per_1m_population&#34;:&#34;643&#34;,&#34;total_tests&#34;:&#34;20,508&#34;,&#34;tests_per_1m_population&#34;:&#34;1,884,234&#34;},{&#34;country_name&#34;:&#34;Montserrat&#34;,&#34;cases&#34;:&#34;183&#34;,&#34;deaths&#34;:&#34;2&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;174&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;7&#34;,&#34;total_cases_per_1m_population&#34;:&#34;36,622&#34;,&#34;deaths_per_1m_population&#34;:&#34;400&#34;,&#34;total_tests&#34;:&#34;9,700&#34;,&#34;tests_per_1m_population&#34;:&#34;1,941,165&#34;},{&#34;country_name&#34;:&#34;Falkland Islands&#34;,&#34;cases&#34;:&#34;128&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;N /A&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;N /A&#34;,&#34;total_cases_per_1m_population&#34;:&#34;34,944&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;8,632&#34;,&#34;tests_per_1m_population&#34;:&#34;2,356,538&#34;},{&#34;country_name&#34;:&#34;Macao&#34;,&#34;cases&#34;:&#34;82&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;82&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;123&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;5,375&#34;,&#34;tests_per_1m_population&#34;:&#34;8,079&#34;},{&#34;country_name&#34;:&#34;Vatican City&#34;,&#34;cases&#34;:&#34;29&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;29&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;36,025&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Marshall Islands&#34;,&#34;cases&#34;:&#34;15&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;8&#34;,&#34;total_cases_per_1m_population&#34;:&#34;250&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Western Sahara&#34;,&#34;cases&#34;:&#34;10&#34;,&#34;deaths&#34;:&#34;1&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;9&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;16&#34;,&#34;deaths_per_1m_population&#34;:&#34;2&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;MS Zaandam&#34;,&#34;cases&#34;:&#34;9&#34;,&#34;deaths&#34;:&#34;2&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;0&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Niue&#34;,&#34;cases&#34;:&#34;8&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;7&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;1&#34;,&#34;total_cases_per_1m_population&#34;:&#34;4,860&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Nauru&#34;,&#34;cases&#34;:&#34;3&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;3&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;274&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Saint Helena&#34;,&#34;cases&#34;:&#34;2&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;2&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;327&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;},{&#34;country_name&#34;:&#34;Micronesia&#34;,&#34;cases&#34;:&#34;1&#34;,&#34;deaths&#34;:&#34;0&#34;,&#34;region&#34;:&#34;&#34;,&#34;total_recovered&#34;:&#34;1&#34;,&#34;new_deaths&#34;:&#34;0&#34;,&#34;new_cases&#34;:&#34;0&#34;,&#34;serious_critical&#34;:&#34;0&#34;,&#34;active_cases&#34;:&#34;0&#34;,&#34;total_cases_per_1m_population&#34;:&#34;9&#34;,&#34;deaths_per_1m_population&#34;:&#34;0&#34;,&#34;total_tests&#34;:&#34;0&#34;,&#34;tests_per_1m_population&#34;:&#34;0&#34;}],&#34;statistic_taken_at&#34;:&#34;2022-04-24 11:18:01&#34;,&#34;world_total&#34;:{&#34;total_cases&#34;:&#34;509,268,964&#34;,&#34;new_cases&#34;:&#34;204,268&#34;,&#34;total_deaths&#34;:&#34;6,242,509&#34;,&#34;new_deaths&#34;:&#34;630&#34;,&#34;total_recovered&#34;:&#34;461,827,849&#34;,&#34;active_cases&#34;:&#34;41,198,606&#34;,&#34;serious_critical&#34;:&#34;42,510&#34;,&#34;total_cases_per_1m_population&#34;:&#34;65,334&#34;,&#34;deaths_per_1m_population&#34;:&#34;800.9&#34;,&#34;statistic_taken_at&#34;:&#34;2022-04-24 11:18:01&#34;}} . import requests url = &quot;https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly&quot; querystring = {&quot;lat&quot;:&quot;35.5&quot;,&quot;lon&quot;:&quot;-78.5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&quot;, &quot;X-RapidAPI-Host&quot;: &quot;weatherbit-v1-mashape.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;data&#34;:[{&#34;rh&#34;:87,&#34;dewpt&#34;:13.2,&#34;uv&#34;:0,&#34;pres&#34;:1016,&#34;wind_dir&#34;:340,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800,&#34;description&#34;:&#34;Clear Sky&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:15.4,&#34;app_temp&#34;:15.4,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-04T00:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-03T20:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:262.8,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:4.38,&#34;pop&#34;:0,&#34;clouds&#34;:0,&#34;vis&#34;:15.096,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:1.97,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;north-northwest&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-04:00&#34;,&#34;ts&#34;:1667520000,&#34;wind_cdir&#34;:&#34;NNW&#34;},{&#34;rh&#34;:92,&#34;dewpt&#34;:13.7,&#34;uv&#34;:0,&#34;pres&#34;:1016.5,&#34;wind_dir&#34;:16,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:14.9,&#34;app_temp&#34;:14.9,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-04T03:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-03T23:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:261,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:6.55,&#34;pop&#34;:0,&#34;clouds&#34;:3,&#34;vis&#34;:13.296,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.37,&#34;clouds_low&#34;:3,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-04:03&#34;,&#34;ts&#34;:1667530800,&#34;wind_cdir&#34;:&#34;NNE&#34;},{&#34;rh&#34;:93,&#34;dewpt&#34;:12.7,&#34;uv&#34;:0,&#34;pres&#34;:1015.5,&#34;wind_dir&#34;:347,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:13.8,&#34;app_temp&#34;:13.8,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-04T06:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-04T02:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:253.9,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:4.56,&#34;pop&#34;:0,&#34;clouds&#34;:8,&#34;vis&#34;:12.2,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:1.71,&#34;clouds_low&#34;:8,&#34;wind_cdir_full&#34;:&#34;north-northwest&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-04:06&#34;,&#34;ts&#34;:1667541600,&#34;wind_cdir&#34;:&#34;NNW&#34;},{&#34;rh&#34;:93,&#34;dewpt&#34;:11.7,&#34;uv&#34;:0,&#34;pres&#34;:1016,&#34;wind_dir&#34;:25,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:12.8,&#34;app_temp&#34;:12.8,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-04T09:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-04T05:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:246.4,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:5.74,&#34;pop&#34;:0,&#34;clouds&#34;:3,&#34;vis&#34;:12.4,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.34,&#34;clouds_low&#34;:3,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-04:09&#34;,&#34;ts&#34;:1667552400,&#34;wind_cdir&#34;:&#34;NNE&#34;},{&#34;rh&#34;:92,&#34;dewpt&#34;:10.7,&#34;uv&#34;:1.6,&#34;pres&#34;:1017,&#34;wind_dir&#34;:7,&#34;ghi&#34;:28.61,&#34;dhi&#34;:26.51,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:11.9,&#34;app_temp&#34;:11.9,&#34;dni&#34;:204.23,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-04T12:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-04T08:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:242.9,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:5.32,&#34;pop&#34;:0,&#34;clouds&#34;:3,&#34;vis&#34;:12.2,&#34;solar_rad&#34;:27.701199,&#34;wind_spd&#34;:2.16,&#34;clouds_low&#34;:3,&#34;wind_cdir_full&#34;:&#34;north&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-04:12&#34;,&#34;ts&#34;:1667563200,&#34;wind_cdir&#34;:&#34;N&#34;},{&#34;rh&#34;:87,&#34;dewpt&#34;:16.4,&#34;uv&#34;:3.2,&#34;pres&#34;:1017.5,&#34;wind_dir&#34;:37,&#34;ghi&#34;:518.64,&#34;dhi&#34;:98.11,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:18.7,&#34;app_temp&#34;:18.9,&#34;dni&#34;:810.55,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-04T15:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-04T11:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:241.3,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:4.32,&#34;pop&#34;:0,&#34;clouds&#34;:9,&#34;vis&#34;:15.096,&#34;solar_rad&#34;:495.1901,&#34;wind_spd&#34;:2.37,&#34;clouds_low&#34;:9,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1025,&#34;datetime&#34;:&#34;2022-11-04:15&#34;,&#34;ts&#34;:1667574000,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:71,&#34;dewpt&#34;:18.3,&#34;uv&#34;:3.4,&#34;pres&#34;:1015.5,&#34;wind_dir&#34;:85,&#34;ghi&#34;:602.75,&#34;dhi&#34;:104.29,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:23.8,&#34;app_temp&#34;:24.1,&#34;dni&#34;:845.77,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-04T18:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-04T14:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:238.3,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:5.15,&#34;pop&#34;:0,&#34;clouds&#34;:27,&#34;vis&#34;:22.288,&#34;solar_rad&#34;:566.4033,&#34;wind_spd&#34;:2.8,&#34;clouds_low&#34;:27,&#34;wind_cdir_full&#34;:&#34;east&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-04:18&#34;,&#34;ts&#34;:1667584800,&#34;wind_cdir&#34;:&#34;E&#34;},{&#34;rh&#34;:67,&#34;dewpt&#34;:17.6,&#34;uv&#34;:1.2,&#34;pres&#34;:1015,&#34;wind_dir&#34;:82,&#34;ghi&#34;:181.49,&#34;dhi&#34;:62.66,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c03d&#34;,&#34;code&#34;:803,&#34;description&#34;:&#34;Broken clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:24.1,&#34;app_temp&#34;:24.3,&#34;dni&#34;:561.43,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-04T21:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-04T17:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:237.3,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:5.31,&#34;pop&#34;:0,&#34;clouds&#34;:53,&#34;vis&#34;:24.8,&#34;solar_rad&#34;:153.97943,&#34;wind_spd&#34;:3.94,&#34;clouds_low&#34;:53,&#34;wind_cdir_full&#34;:&#34;east&#34;,&#34;slp&#34;:1023.5,&#34;datetime&#34;:&#34;2022-11-04:21&#34;,&#34;ts&#34;:1667595600,&#34;wind_cdir&#34;:&#34;E&#34;},{&#34;rh&#34;:80,&#34;dewpt&#34;:16.3,&#34;uv&#34;:0,&#34;pres&#34;:1016,&#34;wind_dir&#34;:90,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:19.8,&#34;app_temp&#34;:20,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-05T00:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-04T20:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:237,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:5.64,&#34;pop&#34;:0,&#34;clouds&#34;:30,&#34;vis&#34;:17.6,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.73,&#34;clouds_low&#34;:30,&#34;wind_cdir_full&#34;:&#34;east&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-05:00&#34;,&#34;ts&#34;:1667606400,&#34;wind_cdir&#34;:&#34;E&#34;},{&#34;rh&#34;:92,&#34;dewpt&#34;:16.2,&#34;uv&#34;:0,&#34;pres&#34;:1015.5,&#34;wind_dir&#34;:110,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:17.5,&#34;app_temp&#34;:17.5,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-05T03:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-04T23:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:235.6,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:6.28,&#34;pop&#34;:0,&#34;clouds&#34;:5,&#34;vis&#34;:12.6,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.41,&#34;clouds_low&#34;:5,&#34;wind_cdir_full&#34;:&#34;east-southeast&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-05:03&#34;,&#34;ts&#34;:1667617200,&#34;wind_cdir&#34;:&#34;ESE&#34;},{&#34;rh&#34;:93,&#34;dewpt&#34;:15.1,&#34;uv&#34;:0,&#34;pres&#34;:1015,&#34;wind_dir&#34;:109,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:0,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:16.2,&#34;app_temp&#34;:16.2,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-05T06:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-05T02:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:235.8,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:6.09,&#34;pop&#34;:0,&#34;clouds&#34;:8,&#34;vis&#34;:12.2,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:1.9,&#34;clouds_low&#34;:8,&#34;wind_cdir_full&#34;:&#34;east-southeast&#34;,&#34;slp&#34;:1023,&#34;datetime&#34;:&#34;2022-11-05:06&#34;,&#34;ts&#34;:1667628000,&#34;wind_cdir&#34;:&#34;ESE&#34;},{&#34;rh&#34;:92,&#34;dewpt&#34;:14.1,&#34;uv&#34;:0,&#34;pres&#34;:1015,&#34;wind_dir&#34;:90,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:4,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:15.3,&#34;app_temp&#34;:15.3,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-05T09:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-05T05:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:234.6,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:5.91,&#34;pop&#34;:0,&#34;clouds&#34;:7,&#34;vis&#34;:12.2,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.27,&#34;clouds_low&#34;:7,&#34;wind_cdir_full&#34;:&#34;east&#34;,&#34;slp&#34;:1022,&#34;datetime&#34;:&#34;2022-11-05:09&#34;,&#34;ts&#34;:1667638800,&#34;wind_cdir&#34;:&#34;E&#34;},{&#34;rh&#34;:90,&#34;dewpt&#34;:13.8,&#34;uv&#34;:1.5,&#34;pres&#34;:1015,&#34;wind_dir&#34;:112,&#34;ghi&#34;:26.33,&#34;dhi&#34;:25.48,&#34;precip&#34;:0,&#34;clouds_hi&#34;:23,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:15.5,&#34;app_temp&#34;:15.5,&#34;dni&#34;:192.75,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-05T12:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-05T08:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:235.3,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:7.61,&#34;pop&#34;:0,&#34;clouds&#34;:15,&#34;vis&#34;:12.4,&#34;solar_rad&#34;:25.283924,&#34;wind_spd&#34;:2.39,&#34;clouds_low&#34;:15,&#34;wind_cdir_full&#34;:&#34;east-southeast&#34;,&#34;slp&#34;:1023,&#34;datetime&#34;:&#34;2022-11-05:12&#34;,&#34;ts&#34;:1667649600,&#34;wind_cdir&#34;:&#34;ESE&#34;},{&#34;rh&#34;:73,&#34;dewpt&#34;:18.3,&#34;uv&#34;:3.2,&#34;pres&#34;:1015,&#34;wind_dir&#34;:147,&#34;ghi&#34;:514.13,&#34;dhi&#34;:97.79,&#34;precip&#34;:0,&#34;clouds_hi&#34;:38,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:23.4,&#34;app_temp&#34;:23.7,&#34;dni&#34;:808.79,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-05T15:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-05T11:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:236.5,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:9.51,&#34;pop&#34;:0,&#34;clouds&#34;:10,&#34;vis&#34;:21.696,&#34;solar_rad&#34;:488.37744,&#34;wind_spd&#34;:4.71,&#34;clouds_low&#34;:1,&#34;wind_cdir_full&#34;:&#34;south-southeast&#34;,&#34;slp&#34;:1023,&#34;datetime&#34;:&#34;2022-11-05:15&#34;,&#34;ts&#34;:1667660400,&#34;wind_cdir&#34;:&#34;SSE&#34;},{&#34;rh&#34;:48,&#34;dewpt&#34;:14.8,&#34;uv&#34;:3.7,&#34;pres&#34;:1013.5,&#34;wind_dir&#34;:164,&#34;ghi&#34;:598.19,&#34;dhi&#34;:104,&#34;precip&#34;:0,&#34;clouds_hi&#34;:64,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:26.8,&#34;app_temp&#34;:27.1,&#34;dni&#34;:844.31,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-05T18:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-05T14:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:235.9,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:7.41,&#34;pop&#34;:0,&#34;clouds&#34;:16,&#34;vis&#34;:39.872,&#34;solar_rad&#34;:573.384,&#34;wind_spd&#34;:5.38,&#34;clouds_low&#34;:5,&#34;wind_cdir_full&#34;:&#34;south-southeast&#34;,&#34;slp&#34;:1021.5,&#34;datetime&#34;:&#34;2022-11-05:18&#34;,&#34;ts&#34;:1667671200,&#34;wind_cdir&#34;:&#34;SSE&#34;},{&#34;rh&#34;:71,&#34;dewpt&#34;:18.2,&#34;uv&#34;:1.2,&#34;pres&#34;:1013,&#34;wind_dir&#34;:137,&#34;ghi&#34;:178.09,&#34;dhi&#34;:62.16,&#34;precip&#34;:0,&#34;clouds_hi&#34;:38,&#34;weather&#34;:{&#34;icon&#34;:&#34;c03d&#34;,&#34;code&#34;:803,&#34;description&#34;:&#34;Broken clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:23.8,&#34;app_temp&#34;:24,&#34;dni&#34;:557.21,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-05T21:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-05T17:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:235.4,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:5.4,&#34;pop&#34;:0,&#34;clouds&#34;:55,&#34;vis&#34;:24.096,&#34;solar_rad&#34;:148.23415,&#34;wind_spd&#34;:4.02,&#34;clouds_low&#34;:55,&#34;wind_cdir_full&#34;:&#34;southeast&#34;,&#34;slp&#34;:1020.5,&#34;datetime&#34;:&#34;2022-11-05:21&#34;,&#34;ts&#34;:1667682000,&#34;wind_cdir&#34;:&#34;SE&#34;},{&#34;rh&#34;:77,&#34;dewpt&#34;:16.8,&#34;uv&#34;:0,&#34;pres&#34;:1014,&#34;wind_dir&#34;:125,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:7,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:20.9,&#34;app_temp&#34;:21.1,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-06T00:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-05T20:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:236.5,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:7.8,&#34;pop&#34;:0,&#34;clouds&#34;:18,&#34;vis&#34;:24.096,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.48,&#34;clouds_low&#34;:18,&#34;wind_cdir_full&#34;:&#34;southeast&#34;,&#34;slp&#34;:1021.5,&#34;datetime&#34;:&#34;2022-11-06:00&#34;,&#34;ts&#34;:1667692800,&#34;wind_cdir&#34;:&#34;SE&#34;},{&#34;rh&#34;:94,&#34;dewpt&#34;:17,&#34;uv&#34;:0,&#34;pres&#34;:1014.5,&#34;wind_dir&#34;:130,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:23,&#34;weather&#34;:{&#34;icon&#34;:&#34;c04n&#34;,&#34;code&#34;:804,&#34;description&#34;:&#34;Overcast clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:18,&#34;app_temp&#34;:18,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-06T03:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-05T23:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:236.5,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:8.4,&#34;pop&#34;:0,&#34;clouds&#34;:71,&#34;vis&#34;:24.096,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:3.05,&#34;clouds_low&#34;:71,&#34;wind_cdir_full&#34;:&#34;southeast&#34;,&#34;slp&#34;:1022,&#34;datetime&#34;:&#34;2022-11-06:03&#34;,&#34;ts&#34;:1667703600,&#34;wind_cdir&#34;:&#34;SE&#34;},{&#34;rh&#34;:99,&#34;dewpt&#34;:18.8,&#34;uv&#34;:0,&#34;pres&#34;:1014,&#34;wind_dir&#34;:140,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0.0625,&#34;clouds_hi&#34;:23,&#34;weather&#34;:{&#34;icon&#34;:&#34;c04n&#34;,&#34;code&#34;:804,&#34;description&#34;:&#34;Overcast clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:18.9,&#34;app_temp&#34;:19.5,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-06T06:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-06T01:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:237.1,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:9.09,&#34;pop&#34;:10,&#34;clouds&#34;:84,&#34;vis&#34;:24.096,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.1,&#34;clouds_low&#34;:84,&#34;wind_cdir_full&#34;:&#34;southeast&#34;,&#34;slp&#34;:1021.5,&#34;datetime&#34;:&#34;2022-11-06:06&#34;,&#34;ts&#34;:1667714400,&#34;wind_cdir&#34;:&#34;SE&#34;},{&#34;rh&#34;:94,&#34;dewpt&#34;:16.8,&#34;uv&#34;:0,&#34;pres&#34;:1012.5,&#34;wind_dir&#34;:134,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:17.7,&#34;app_temp&#34;:17.7,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-06T09:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-06T04:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:237.8,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:1.7,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:1.67,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;southeast&#34;,&#34;slp&#34;:1020.5,&#34;datetime&#34;:&#34;2022-11-06:09&#34;,&#34;ts&#34;:1667725200,&#34;wind_cdir&#34;:&#34;SE&#34;},{&#34;rh&#34;:95,&#34;dewpt&#34;:16.8,&#34;uv&#34;:1.4,&#34;pres&#34;:1014,&#34;wind_dir&#34;:84,&#34;ghi&#34;:24.11,&#34;dhi&#34;:24.42,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:17.6,&#34;app_temp&#34;:17.6,&#34;dni&#34;:181.01,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-06T12:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-06T07:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:238.4,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:1.91,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:46.842648,&#34;wind_spd&#34;:1.82,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;east&#34;,&#34;slp&#34;:1022,&#34;datetime&#34;:&#34;2022-11-06:12&#34;,&#34;ts&#34;:1667736000,&#34;wind_cdir&#34;:&#34;E&#34;},{&#34;rh&#34;:74,&#34;dewpt&#34;:17.8,&#34;uv&#34;:1.3,&#34;pres&#34;:1014.5,&#34;wind_dir&#34;:110,&#34;ghi&#34;:509.65,&#34;dhi&#34;:97.47,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c04d&#34;,&#34;code&#34;:804,&#34;description&#34;:&#34;Overcast clouds&#34;},&#34;clouds_mid&#34;:91,&#34;temp&#34;:22.7,&#34;app_temp&#34;:23,&#34;dni&#34;:807.01,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-06T15:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-06T10:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:238.9,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:3.93,&#34;pop&#34;:0,&#34;clouds&#34;:91,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:155.14583,&#34;wind_spd&#34;:2.99,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;east-southeast&#34;,&#34;slp&#34;:1022.5,&#34;datetime&#34;:&#34;2022-11-06:15&#34;,&#34;ts&#34;:1667746800,&#34;wind_cdir&#34;:&#34;ESE&#34;},{&#34;rh&#34;:54,&#34;dewpt&#34;:15.5,&#34;uv&#34;:3.4,&#34;pres&#34;:1013.5,&#34;wind_dir&#34;:82,&#34;ghi&#34;:593.69,&#34;dhi&#34;:103.72,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:9,&#34;temp&#34;:25.5,&#34;app_temp&#34;:25.5,&#34;dni&#34;:842.86,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-06T18:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-06T13:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:238.4,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:1.52,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:564.3136,&#34;wind_spd&#34;:1.58,&#34;clouds_low&#34;:1,&#34;wind_cdir_full&#34;:&#34;east&#34;,&#34;slp&#34;:1021,&#34;datetime&#34;:&#34;2022-11-06:18&#34;,&#34;ts&#34;:1667757600,&#34;wind_cdir&#34;:&#34;E&#34;},{&#34;rh&#34;:53,&#34;dewpt&#34;:14.8,&#34;uv&#34;:1.1,&#34;pres&#34;:1013,&#34;wind_dir&#34;:44,&#34;ghi&#34;:174.78,&#34;dhi&#34;:61.66,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c03d&#34;,&#34;code&#34;:803,&#34;description&#34;:&#34;Broken clouds&#34;},&#34;clouds_mid&#34;:58,&#34;temp&#34;:25.1,&#34;app_temp&#34;:25,&#34;dni&#34;:553.03,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-06T21:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-06T16:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:238.5,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:3.33,&#34;pop&#34;:0,&#34;clouds&#34;:58,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:143.27057,&#34;wind_spd&#34;:2.32,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1020.5,&#34;datetime&#34;:&#34;2022-11-06:21&#34;,&#34;ts&#34;:1667768400,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:73,&#34;dewpt&#34;:15.7,&#34;uv&#34;:0,&#34;pres&#34;:1013.5,&#34;wind_dir&#34;:59,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c04n&#34;,&#34;code&#34;:804,&#34;description&#34;:&#34;Overcast clouds&#34;},&#34;clouds_mid&#34;:81,&#34;temp&#34;:20.8,&#34;app_temp&#34;:20.8,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-07T00:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-06T19:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:239.1,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:6.1,&#34;pop&#34;:0,&#34;clouds&#34;:81,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.89,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;east-northeast&#34;,&#34;slp&#34;:1021.5,&#34;datetime&#34;:&#34;2022-11-07:00&#34;,&#34;ts&#34;:1667779200,&#34;wind_cdir&#34;:&#34;ENE&#34;},{&#34;rh&#34;:78,&#34;dewpt&#34;:15.2,&#34;uv&#34;:0,&#34;pres&#34;:1014,&#34;wind_dir&#34;:58,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:31,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:2,&#34;temp&#34;:19.2,&#34;app_temp&#34;:19.2,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-07T03:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-06T22:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:242,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:4.5,&#34;pop&#34;:0,&#34;clouds&#34;:8,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.56,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;east-northeast&#34;,&#34;slp&#34;:1022,&#34;datetime&#34;:&#34;2022-11-07:03&#34;,&#34;ts&#34;:1667790000,&#34;wind_cdir&#34;:&#34;ENE&#34;},{&#34;rh&#34;:89,&#34;dewpt&#34;:15.7,&#34;uv&#34;:0,&#34;pres&#34;:1014,&#34;wind_dir&#34;:50,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:98,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:17.6,&#34;app_temp&#34;:17.6,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-07T06:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-07T01:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:242.3,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:4.8,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.72,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1022,&#34;datetime&#34;:&#34;2022-11-07:06&#34;,&#34;ts&#34;:1667800800,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:92,&#34;dewpt&#34;:15.9,&#34;uv&#34;:0,&#34;pres&#34;:1014,&#34;wind_dir&#34;:18,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:17.2,&#34;app_temp&#34;:17.2,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-07T09:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-07T04:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:243.1,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:6.33,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:2.91,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;slp&#34;:1022,&#34;datetime&#34;:&#34;2022-11-07:09&#34;,&#34;ts&#34;:1667811600,&#34;wind_cdir&#34;:&#34;NNE&#34;},{&#34;rh&#34;:90,&#34;dewpt&#34;:15,&#34;uv&#34;:1.4,&#34;pres&#34;:1015,&#34;wind_dir&#34;:17,&#34;ghi&#34;:21.94,&#34;dhi&#34;:23.34,&#34;precip&#34;:0,&#34;clouds_hi&#34;:99,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:16.7,&#34;app_temp&#34;:16.7,&#34;dni&#34;:169.02,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-07T12:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-07T07:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:243.6,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:8.1,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:43.876057,&#34;wind_spd&#34;:3.26,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;slp&#34;:1023,&#34;datetime&#34;:&#34;2022-11-07:12&#34;,&#34;ts&#34;:1667822400,&#34;wind_cdir&#34;:&#34;NNE&#34;},{&#34;rh&#34;:67,&#34;dewpt&#34;:16.1,&#34;uv&#34;:2.9,&#34;pres&#34;:1015.5,&#34;wind_dir&#34;:39,&#34;ghi&#34;:505.2,&#34;dhi&#34;:97.15,&#34;precip&#34;:0,&#34;clouds_hi&#34;:70,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801,&#34;description&#34;:&#34;Few clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:22.5,&#34;app_temp&#34;:22.6,&#34;dni&#34;:805.23,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-07T15:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-07T10:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:244.4,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:6.8,&#34;pop&#34;:0,&#34;clouds&#34;:18,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:481.97238,&#34;wind_spd&#34;:4.59,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1023.5,&#34;datetime&#34;:&#34;2022-11-07:15&#34;,&#34;ts&#34;:1667833200,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:56,&#34;dewpt&#34;:16.4,&#34;uv&#34;:3.3,&#34;pres&#34;:1014,&#34;wind_dir&#34;:45,&#34;ghi&#34;:589.26,&#34;dhi&#34;:103.44,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:25.9,&#34;app_temp&#34;:26,&#34;dni&#34;:841.41,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-07T18:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-07T13:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:244,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:6.2,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:558.38477,&#34;wind_spd&#34;:5,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1022,&#34;datetime&#34;:&#34;2022-11-07:18&#34;,&#34;ts&#34;:1667844000,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:60,&#34;dewpt&#34;:16.9,&#34;uv&#34;:1.5,&#34;pres&#34;:1013.5,&#34;wind_dir&#34;:49,&#34;ghi&#34;:171.57,&#34;dhi&#34;:61.17,&#34;precip&#34;:0,&#34;clouds_hi&#34;:85,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:25.3,&#34;app_temp&#34;:25.4,&#34;dni&#34;:548.89,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-07T21:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-07T16:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:243.4,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:6.51,&#34;pop&#34;:0,&#34;clouds&#34;:21,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:162.97173,&#34;wind_spd&#34;:4.36,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1021.5,&#34;datetime&#34;:&#34;2022-11-07:21&#34;,&#34;ts&#34;:1667854800,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:75,&#34;dewpt&#34;:16.7,&#34;uv&#34;:0,&#34;pres&#34;:1014.5,&#34;wind_dir&#34;:38,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:21.3,&#34;app_temp&#34;:21.4,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-08T00:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-07T19:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:244,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:10.3,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:3.56,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1022.5,&#34;datetime&#34;:&#34;2022-11-08:00&#34;,&#34;ts&#34;:1667865600,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:82,&#34;dewpt&#34;:17,&#34;uv&#34;:0,&#34;pres&#34;:1015,&#34;wind_dir&#34;:48,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:20.2,&#34;app_temp&#34;:20.4,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-08T03:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-07T22:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:243.1,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:11.4,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:4.35,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1023,&#34;datetime&#34;:&#34;2022-11-08:03&#34;,&#34;ts&#34;:1667876400,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:85,&#34;dewpt&#34;:16.5,&#34;uv&#34;:0,&#34;pres&#34;:1014.5,&#34;wind_dir&#34;:40,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:19.1,&#34;app_temp&#34;:19.3,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-08T06:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-08T01:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:244.8,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:13.2,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:5.24,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1022.5,&#34;datetime&#34;:&#34;2022-11-08:06&#34;,&#34;ts&#34;:1667887200,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:80,&#34;dewpt&#34;:15.1,&#34;uv&#34;:0,&#34;pres&#34;:1014,&#34;wind_dir&#34;:34,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:0,&#34;temp&#34;:18.6,&#34;app_temp&#34;:18.6,&#34;dni&#34;:0,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-08T09:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-08T04:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:243.3,&#34;pod&#34;:&#34;n&#34;,&#34;wind_gust_spd&#34;:15.12,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:0,&#34;wind_spd&#34;:6.17,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1022,&#34;datetime&#34;:&#34;2022-11-08:09&#34;,&#34;ts&#34;:1667898000,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:82,&#34;dewpt&#34;:15.2,&#34;uv&#34;:1.4,&#34;pres&#34;:1015.5,&#34;wind_dir&#34;:34,&#34;ghi&#34;:19.84,&#34;dhi&#34;:22.23,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:12,&#34;temp&#34;:18.3,&#34;app_temp&#34;:18.3,&#34;dni&#34;:156.8,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-08T12:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-08T07:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:242.3,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:16.09,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:40.78233,&#34;wind_spd&#34;:7.28,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1023.5,&#34;datetime&#34;:&#34;2022-11-08:12&#34;,&#34;ts&#34;:1667908800,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:68,&#34;dewpt&#34;:14,&#34;uv&#34;:1,&#34;pres&#34;:1016.5,&#34;wind_dir&#34;:39,&#34;ghi&#34;:500.77,&#34;dhi&#34;:96.83,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c04d&#34;,&#34;code&#34;:804,&#34;description&#34;:&#34;Overcast clouds&#34;},&#34;clouds_mid&#34;:99,&#34;temp&#34;:20.1,&#34;app_temp&#34;:19.9,&#34;dni&#34;:803.43,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-08T15:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-08T10:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:240.8,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:16.09,&#34;pop&#34;:0,&#34;clouds&#34;:99,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:140.73563,&#34;wind_spd&#34;:8.72,&#34;clouds_low&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-11-08:15&#34;,&#34;ts&#34;:1667919600,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:57,&#34;dewpt&#34;:12.4,&#34;uv&#34;:3.3,&#34;pres&#34;:1015,&#34;wind_dir&#34;:44,&#34;ghi&#34;:584.9,&#34;dhi&#34;:103.16,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802,&#34;description&#34;:&#34;Scattered clouds&#34;},&#34;clouds_mid&#34;:17,&#34;temp&#34;:21.3,&#34;app_temp&#34;:21,&#34;dni&#34;:839.98,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-08T18:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-08T13:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:238.9,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:14.91,&#34;pop&#34;:0,&#34;clouds&#34;:25,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:559.9225,&#34;wind_spd&#34;:9.86,&#34;clouds_low&#34;:1,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1023,&#34;datetime&#34;:&#34;2022-11-08:18&#34;,&#34;ts&#34;:1667930400,&#34;wind_cdir&#34;:&#34;NE&#34;},{&#34;rh&#34;:46,&#34;dewpt&#34;:7.1,&#34;uv&#34;:0.6,&#34;pres&#34;:1015.5,&#34;wind_dir&#34;:44,&#34;ghi&#34;:168.46,&#34;dhi&#34;:60.69,&#34;precip&#34;:0,&#34;clouds_hi&#34;:100,&#34;weather&#34;:{&#34;icon&#34;:&#34;c04d&#34;,&#34;code&#34;:804,&#34;description&#34;:&#34;Overcast clouds&#34;},&#34;clouds_mid&#34;:100,&#34;temp&#34;:18.9,&#34;app_temp&#34;:18.1,&#34;dni&#34;:544.82,&#34;snow_depth&#34;:0,&#34;timestamp_utc&#34;:&#34;2022-11-08T21:00:00&#34;,&#34;timestamp_local&#34;:&#34;2022-11-08T16:00:00&#34;,&#34;snow&#34;:0,&#34;ozone&#34;:236.5,&#34;pod&#34;:&#34;d&#34;,&#34;wind_gust_spd&#34;:16.5,&#34;pop&#34;:0,&#34;clouds&#34;:100,&#34;vis&#34;:24.128,&#34;solar_rad&#34;:77.535995,&#34;wind_spd&#34;:9.75,&#34;clouds_low&#34;:2,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1023.5,&#34;datetime&#34;:&#34;2022-11-08:21&#34;,&#34;ts&#34;:1667941200,&#34;wind_cdir&#34;:&#34;NE&#34;}],&#34;lon&#34;:-78.5,&#34;country_code&#34;:&#34;US&#34;,&#34;lat&#34;:35.5,&#34;timezone&#34;:&#34;America /New_York&#34;,&#34;city_name&#34;:&#34;Four Oaks&#34;,&#34;state_code&#34;:&#34;NC&#34;} .",
            "url": "https://jw95z.github.io/JeongWooLee/api/2022/10/10/api.html",
            "relUrl": "/api/2022/10/10/api.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i-1] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The letter b is the 2 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: if i == letter: count = 0 a = alphabetList.index(letter) for b in range(a+1): count += 1 print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) . The letter b is the 2 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: count += 1 if i == letter: break print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) . The letter c is the 3 letter in the alphabet . evens = [] i = 0 while i +1 &lt;= 10: evens.append(i+1) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: if i % 2 == 1: odds.append(i) i += 1 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 != 0): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 1 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i-1] % 5 == 0: newNumbers.append(numbers[i-1]) if numbers[i-1] % 2 == 0: newNumbers.append(numbers[i-1]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times while True: item = input(&quot;Please select an item from the menu&quot;) total += menu[item] ans = input(&quot;do you want to order more? [y/n]&quot;) if ans == &quot;n&quot;: break else : #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://jw95z.github.io/JeongWooLee/assignment/2022/10/03/error_testing.html",
            "relUrl": "/assignment/2022/10/03/error_testing.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Program design and development",
            "content": "Program developed with a systematic approach to achieve a desired purpose. n . Develop of program . Program always starts with idea. . Programs are all developed a specific with specific purpose. | Developes follow specific steps and stick to their plan | Sometimes the development is more exploratory than anything, and the steps are dictated by what happens | . When we think about early AI projects or artificial intelligence, we abbreviate that to AI. Early on in this developers were just trying to figure out like hey, what is possible?, what can we make a computer do that would resemble intelligence. . Developes start investigating the problem/purpose and reflect . Investigation is an important step in the process. | Developers must determine the requirements of the program | Developers must understand the constraints | . One of the constraints is time you don’t have enough time to write this grand thing, you have to be very limited and very targeted about what you would accomplish. So understanding the constraints are a very important part of the investigative process. . Method of investigate . surveys | user testing | interviews | direct observations | . Developers design the program by . brainstorm | storyboarding the program | planning user experience | laying out the user interface | organizing into modules | develop a testing strategy | . Developers decide on the program requirements that . describe how a program should behave | include a list of user interactions | . The program specifications outline all of the requirements. Developers create a prototype of the program or components. An incremental process is frequently used so developers can refine small parts of the program . Testing, testing, and more testing . Developers test the program every step of the way . Testing occurs at the . micro level | macro level | . Developers refine and revise through testing, feedback, and reflection . Program development is rarely a solo endeavor . Programs are usually developed with by teams of people | Individuals and teams work on different functional components | Each member of the project deserves to receive credit for their work | Their names must be written in the documentation of the program indicating their contributors to the project | . The program should also be given credit where credit is due . Documentation is an important place to give credit . Many projects use comments within the programming language | Important part of the development of the program | When developers find a bug, they need to be able to determine who can fix the program | This may be most useful after a program is completed and users find additional bugs | . Many times developers use code segments, procedures, algorithms, and more than that are written by others. Similar to quoting someone in a research paper or article. . Reason of creating program documentation . describe the overall program | list program specifications | describe functions/procedures/methods within the code | specific code segments | list of events and corresponding outputs | the development of program | how other programs may interact with the program | . | list of contributors/authors of the program | . When does documentation happens . Documentation happens throughout the development of the program . At the beginning: list specifications | During: to keep track of process | After: to explain the overall process | improvement of documentation . efficiency of overall programming process | programmer’s ability to test and to refine the program | programmer’s response to bugs | . How do programmers document while programming . Most programming languages offer a commenting feature, although some do not. Commenting allows programming to write text within the program. This text does not affect the program. Comments are for programmers to read. This is a form of documentation and can be very useful when programmers collaborate or work individually. . example of comments . Text . Python | Java | Javascript, C/C++, Swift | XML/HTML | Applescript/Pascal | . Block based language . Scratch | MIT Applnventor | .",
            "url": "https://jw95z.github.io/JeongWooLee/notes_from_video/2022/10/01/Programpurpose.html",
            "relUrl": "/notes_from_video/2022/10/01/Programpurpose.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Table",
            "content": ". . Resources Description Images . Diamond A rare mineral obtained from diamond ore or loot chests | | &lt;/tr&gt; Gold A material found in both the overworld and the Nether | | &lt;/tr&gt; Iron The product of the naturally occuring Silver Ore that is located underground | | &lt;/tr&gt; Emerald Rare minerals that are used primarily as the currency for trading with villagers and wandering traders | | &lt;/tr&gt; Netherite A material from the Nether, used primarily to upgrade diamond gear | | &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; | . | . | . | . | .",
            "url": "https://jw95z.github.io/JeongWooLee/practice/2022/09/26/javatable.html",
            "relUrl": "/practice/2022/09/26/javatable.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "JavaScript",
            "content": "const options = { method: &#39;POST&#39;, headers: { &#39;content-type&#39;: &#39;application/json&#39;, &#39;X-RapidAPI-Key&#39;: &#39;56cf0d9c39msh90ab47fd56c02e6p1d2792jsn0f4dfaa46b90&#39;, &#39;X-RapidAPI-Host&#39;: &#39;motivational-quotes1.p.rapidapi.com&#39; }, body: &#39;{&quot;key1&quot;:&quot;value&quot;,&quot;key2&quot;:&quot;value&quot;}&#39; }; fetch(&#39;https://motivational-quotes1.p.rapidapi.com/motivation&#39;, options) .then(response =&gt; response.json()) .then(response =&gt; console.log(response)) .catch(err =&gt; console.error(err)); . evalmachine.&lt;anonymous&gt;:1 const options = { ^ TypeError: Identifier &#39;options&#39; has already been declared at evalmachine.&lt;anonymous&gt;:1:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . test = [] test.push({&quot;num&quot;: 1, &quot;int&quot;: 2}); test.push({&quot;num&quot;: 2, &quot;int&quot;: 3}); test.push({&quot;num&quot;: 3, &quot;int&quot;: 4}); test.push({&quot;num&quot;: 4, &quot;int&quot;: 5}); var obj = new Object() obj.num = 5; obj.int = 6; test.push(obj); test.forEach(function(item) { console.log(item.num + &quot;, &quot;+ item.int); }); console.log(&#39;== Get index 0, 1 value&#39;); test.splice(0,2).forEach(function(item) { console.log(item.num + &quot;, &quot; + item.int); }); console.log(&quot;==only values except index 0, 1 remain in the val&quot;) test.forEach(function(item) { console.log(item.num + &quot;, &quot; + item.int); }); console.log(&quot;= change the object which name is 4&quot;) var test3 = test.find(function(item){ return item.num == &quot;4&quot;; }); test3.num = &quot;change to 100&quot;; test.forEach(function(item) { console.log(item.num + &quot;, &quot; + item.int); }); console.log(&quot;== remove object which name is changed&quot;) var index = test.indexOf(test3) test.splice(index, 1); test.forEach(function(item) { console.log(item.num + &quot;, &quot; + item.int); }); . 1, 2 2, 3 3, 4 4, 5 5, 6 == Get index 0, 1 value 1, 2 2, 3 ==only values except index 0, 1 remain in the val 3, 4 4, 5 5, 6 = change the object which name is 4 3, 4 change to 100, 5 5, 6 == remove object which name is changed 3, 4 5, 6 .",
            "url": "https://jw95z.github.io/JeongWooLee/practice/2022/09/21/javascript.html",
            "relUrl": "/practice/2022/09/21/javascript.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Collaboration 1.1",
            "content": "Benefit of collaborating . Effective collaboration suppresses communication, consensus building, conflict resolution, and negotiation skills | Effective collaboration produces a computing innovation that reflects the diversity of talents and perspective of those who designed it. | We are humans, and when we code, we&#39;re not perfect and we have to think things through. | . Interpersonal skills . Communication | Consensus Building | Conflict Resolution | Negotiation | . How to collaborate in class . Pair Programming: Two programmers work together as a pair. One(the driver) writes program code, while the other(the observer, pointer, or navigator) reviews each line of program code as it is typed in. Think pair share: Students think through a problem alone, pair with a partner to share ideas and then share results with the class . Leave comments . Communicate to your partner(s) | Communicate to yourself | Acknowledge code segments used from other sources | Acknowledge media used from other sources | Differentiate what you and your partner(s) did | Clarify the functionality of your code | . Online tools . repl.it - multiplayer | Github - collaboration and repository | . shared document or folder . Ask friends and family to test drive your program and give you feedback .",
            "url": "https://jw95z.github.io/JeongWooLee/notes_from_video/2022/09/19/Collaboration.html",
            "relUrl": "/notes_from_video/2022/09/19/Collaboration.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Quiz in code.org",
            "content": "Fruit_quiz question1: what color the apple have? answer: red wrong: blue wrong: purple wrong: orange when were bananas discovered? answer: 327 BC wrong: 1997 wrong: 1792 wrong 2020 BC what one is a fruit? answer: strawberries wrong: melon wrong: tomato wrong: strawberries If answer is wrong, there is one chance to redo and if there is two incorrect, the player cannot take the quiz. If player solve the question with at least one incorrect, they can retake the quiz. . var total = 0; var i = 1; function myFunction() { onEvent(&quot;button1&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen2&quot;); }); onEvent(&quot;button2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen4&quot;); }); onEvent(&quot;button3&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button4&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button5&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button6&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button7&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button9&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button8&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen5&quot;); }); onEvent(&quot;button10&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button11&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button12&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen6&quot;); }); onEvent(&quot;button13&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); } function games() { onEvent(&quot;button1&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen2&quot;); }); onEvent(&quot;button2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen4&quot;); total = total + 1; }); onEvent(&quot;button3&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen2&quot;); myFunction(); total = total - 1; }); }); onEvent(&quot;button4&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen2&quot;); myFunction(); total = total - 1; }); }); onEvent(&quot;button5&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen2&quot;); myFunction(); total = total - 1; }); }); onEvent(&quot;button6&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen4&quot;); myFunction(); total = total - 1; }); }); onEvent(&quot;button7&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); myFunction(); total = total - 1; }); }); onEvent(&quot;button9&quot;, &quot;click&quot;, function( ) { onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); myFunction(); total = total - 1; }); }); onEvent(&quot;button8&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen5&quot;); total = total + 1; }); onEvent(&quot;button10&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen5&quot;); myFunction(); total = total - 1; }); }); onEvent(&quot;button11&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen5&quot;); myFunction(); total = total - 1; }); }); onEvent(&quot;button12&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen6&quot;); total = total + 1; }); onEvent(&quot;button13&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen5&quot;); myFunction(); total = total - 1; }); }); } games(); onEvent(&quot;button2&quot;, &quot;click&quot;, function( ) { playSound(&quot;sound://category_achievements/lighthearted_bonus_objective_1.mp3&quot;, false); }); onEvent(&quot;button8&quot;, &quot;click&quot;, function( ) { playSound(&quot;sound://category_achievements/lighthearted_bonus_objective_1.mp3&quot;, false); }); onEvent(&quot;button12&quot;, &quot;click&quot;, function( ) { playSound(&quot;sound://category_achievements/lighthearted_bonus_objective_1.mp3&quot;, false); }); onEvent(&quot;button14&quot;, &quot;click&quot;, function( ) { write(&quot;you got&quot; + total); }); onEvent(&quot;button16&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen1&quot;); total = 0; games(); }); .",
            "url": "https://jw95z.github.io/JeongWooLee/quiz_stuff/2022/09/07/quiz_org.html",
            "relUrl": "/quiz_stuff/2022/09/07/quiz_org.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "List of dictionaries",
            "content": "Week2 . this is week 2 . dic_list = [] while True: sel = int(input(&quot;press 1 to continue and press 2 to stop&quot;)) if sel == 1: print(&quot;adding in dictionary&quot;) my_dict = {} while True: key = int(input(&quot;key: &quot;)) val = input(&quot;value: &quot;) my_dict[key] = val con = int(input(&quot;press 1 to continue and press 2 to stop&quot;)) if con ==2: print(&quot; The End &quot;) break dic_list.append(my_dict) elif sel == 2: print(&quot;end&quot;) break else: print(&quot;you pick the wrong one&quot;) break print(&quot;This is the list you made: &quot;,dic_list) . adding in dictionary The End end This is the list you made: [{1: &#39;hello&#39;, 2: &#39;world&#39;}] .",
            "url": "https://jw95z.github.io/JeongWooLee/quiz_stuff/2022/09/01/Quiz.html",
            "relUrl": "/quiz_stuff/2022/09/01/Quiz.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "List",
            "content": "Week2 . this is week 2 . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;James&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;Sempember 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;michaelmichael6909@gmail.com&quot;, &quot;Owns_sisters&quot;: [&quot;Chole&quot;, &quot;Rayna&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Owns_sisters:&quot;, &quot;, &quot;.join(d_rec[&quot;Owns_sisters&quot;]) ) def while_loop(): print(&quot;While loop output n&quot;) i = 0 for i in range(0, len(InfoDb)): record = InfoDb[i] print_data(record) return while_loop() . While loop output James Lee Residence: San Diego Birth Day: Sempember 5 Email: michaelmichael6909@gmail.com Owns_sisters: Chole, Rayna .",
            "url": "https://jw95z.github.io/JeongWooLee/practice/2022/08/30/Loop.html",
            "relUrl": "/practice/2022/08/30/Loop.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Bash shell practice",
            "content": "Week1 . this is week 1 . python3 --version . Python 3.9.12 . Anaconda Verification . conda --version . conda 4.14.0 . git status . On branch master Your branch is up to date with &#39;origin/master&#39;. Untracked files: (use &#34;git add &lt;file&gt;...&#34; to include in what will be committed) 2022-08-29-Bash.ipynb version nothing added to commit but untracked files present (use &#34;git add&#34; to track) . git add *.ipynb . git status . On branch master Your branch is up to date with &#39;origin/master&#39;. Changes to be committed: (use &#34;git restore --staged &lt;file&gt;...&#34; to unstage) new file: 2022-08-29-Bash.ipynb Untracked files: (use &#34;git add &lt;file&gt;...&#34; to include in what will be committed) version . git commit -am &quot;Test Commit 2022-08-29.00&quot; . [master 77f0eae] Test Commit 2022-08-29.00 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 _notebooks/2022-08-29-Bash.ipynb . git push . Username for &#39;https://github.com&#39;: .",
            "url": "https://jw95z.github.io/JeongWooLee/practice/2022/08/29/Bash.html",
            "relUrl": "/practice/2022/08/29/Bash.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Quiz",
            "content": "Week1 . this is week 1 . import getpass, sys correct = 0 def questionAnswer(prompt): print(&quot;question: &quot; + prompt) ans = input() print(&quot;Answer: &quot; + ans) return ans def questionRespone(prompt): print(&quot;question: &quot; + prompt) ans = input() print(&quot;I got a number :&quot;,ans) return ans def questi(): global correct res = questionRespone(&quot;1 + 1 = ? &quot;) if res == &quot;2&quot;: print(res + &quot; is correct&quot;) correct += 1 else: print(res + &quot; is incorrect&quot;) rep = questionRespone(&quot;2 + 3 = ? &quot;) if rep == &quot;5&quot;: print(rep + &quot; is correct&quot;) correct += 1 else: print(rep + &quot; is incorrect&quot;) reg = questionRespone(&quot;3 + 5 = ? &quot;) if reg == &quot;8&quot;: print(reg + &quot; is correct&quot;) correct += 1 else: print(reg + &quot; is incorrect&quot;) print((str)((float)(correct/quest*100)) + &quot;%&quot;) quest = 3 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(quest) + &quot; questions.&quot;) a = questionAnswer(&quot;Are you ready to take the test[y/n]? &quot;) if a == &quot;y&quot;: questi() else: print(&quot;......&quot;) . Hello, james running /bin/python3 You will be asked 3 questions. question: Are you ready to take the test[y/n]? Answer: y question: 1 + 1 = ? I goy number : 2 2 is correct question: 2 + 3 = ? I goy number : 5 5 is correct question: 3 + 5 = ? I goy number : 8 8 is correct 100.0% .",
            "url": "https://jw95z.github.io/JeongWooLee/quiz_stuff/2022/08/24/My-First-Post.html",
            "relUrl": "/quiz_stuff/2022/08/24/My-First-Post.html",
            "date": " • Aug 24, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Sub_menu",
          "content": "Using Javascript Table .",
          "url": "https://jw95z.github.io/JeongWooLee/stub/",
          "relUrl": "/stub/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "Hello my name is James This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jw95z.github.io/JeongWooLee/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Psychology and the Good life",
          "content": "Psychology and the Good Life . Vocab . Syllabus: an outline of the subjects in a course of study or teaching . Notes . Yale students have a lot of stress. Yale students are incredibly privileged to be at an amazing place like Yale with so many opportunities but they react to that with anxiety. Students are so stressed so they can’t make good opportunities. The stress takes its toll and it takes its toll in a way the students sometimes don’t want to admit. Many students are suffering at mental problems such as loneliness and depression. Science comes from two domains. One domain is this domain of positive psychology a field that literally studies happy people and other is the science of behavior change. Taking times in things that we like are built into the syllabus. We can control our happiness that we think and lot of this work comes from an idea that we tended think of people as being kind of a half glassful type person or a half empty kind of person. Unhappy people are spending time alone more than happy people. . Glitches . I think my whole life is my glitches. My heart is like a broken glass. . How to adapt . Just accept it and live. I just live because I don’t want to die. . Gratitude . I appreciated to my ELD teacher in last semester. Because of her, I could hear what teachers saying in the school. I was confused when I came to this school, but teacher teach me and communicate with me. . | I also thankful to staff of “league of legends”. I spend most of time in there. I used 1000 dollars in there. It is important as my life. I think my characters in the game have to wear expensive clothes than me. . | . Goal . To be alive | Get good score in every subjects | Be good at all of the finals | .",
          "url": "https://jw95z.github.io/JeongWooLee/gratitude/",
          "relUrl": "/gratitude/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Notes",
          "content": "This website is powered by fastpages [^1]. This is my first server that I made [^1]:a blogging platform that natively supports Jupyter notebooks in addition to other formats. .",
          "url": "https://jw95z.github.io/JeongWooLee/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  
      ,"page9": {
          "title": "Table",
          "content": "Week AP Test Prep Career Tech . 0 | Pseudo code | Tools and equipment | . 1 | Hello to Phython | Fastpages, Jupyter notebooks, Markdown | . 2 | Phython list and dictionaries | Tools and equipment | .",
          "url": "https://jw95z.github.io/JeongWooLee/Table/",
          "relUrl": "/Table/",
          "date": ""
      }
      
  

  

  
      ,"page11": {
          "title": "vocab",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jw95z.github.io/JeongWooLee/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jw95z.github.io/JeongWooLee/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}